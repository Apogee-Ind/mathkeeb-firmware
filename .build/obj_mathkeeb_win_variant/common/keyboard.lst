   1               		.file	"keyboard.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.matrix_setup,"ax",@progbits
  11               		.weak	matrix_setup
  13               	matrix_setup:
  14               	.LFB103:
  15               		.file 1 "./tmk_core/common/keyboard.c"
   1:./tmk_core/common/keyboard.c **** /*
   2:./tmk_core/common/keyboard.c **** Copyright 2011, 2012, 2013 Jun Wako <wakojun@gmail.com>
   3:./tmk_core/common/keyboard.c **** 
   4:./tmk_core/common/keyboard.c **** This program is free software: you can redistribute it and/or modify
   5:./tmk_core/common/keyboard.c **** it under the terms of the GNU General Public License as published by
   6:./tmk_core/common/keyboard.c **** the Free Software Foundation, either version 2 of the License, or
   7:./tmk_core/common/keyboard.c **** (at your option) any later version.
   8:./tmk_core/common/keyboard.c **** 
   9:./tmk_core/common/keyboard.c **** This program is distributed in the hope that it will be useful,
  10:./tmk_core/common/keyboard.c **** but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:./tmk_core/common/keyboard.c **** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:./tmk_core/common/keyboard.c **** GNU General Public License for more details.
  13:./tmk_core/common/keyboard.c **** 
  14:./tmk_core/common/keyboard.c **** You should have received a copy of the GNU General Public License
  15:./tmk_core/common/keyboard.c **** along with this program.  If not, see <http://www.gnu.org/licenses/>.
  16:./tmk_core/common/keyboard.c **** */
  17:./tmk_core/common/keyboard.c **** #include <stdint.h>
  18:./tmk_core/common/keyboard.c **** #include "keyboard.h"
  19:./tmk_core/common/keyboard.c **** #include "matrix.h"
  20:./tmk_core/common/keyboard.c **** #include "keymap.h"
  21:./tmk_core/common/keyboard.c **** #include "host.h"
  22:./tmk_core/common/keyboard.c **** #include "led.h"
  23:./tmk_core/common/keyboard.c **** #include "keycode.h"
  24:./tmk_core/common/keyboard.c **** #include "timer.h"
  25:./tmk_core/common/keyboard.c **** #include "print.h"
  26:./tmk_core/common/keyboard.c **** #include "debug.h"
  27:./tmk_core/common/keyboard.c **** #include "command.h"
  28:./tmk_core/common/keyboard.c **** #include "util.h"
  29:./tmk_core/common/keyboard.c **** #include "sendchar.h"
  30:./tmk_core/common/keyboard.c **** #include "eeconfig.h"
  31:./tmk_core/common/keyboard.c **** #include "backlight.h"
  32:./tmk_core/common/keyboard.c **** #include "action_layer.h"
  33:./tmk_core/common/keyboard.c **** #ifdef BOOTMAGIC_ENABLE
  34:./tmk_core/common/keyboard.c **** #   include "bootmagic.h"
  35:./tmk_core/common/keyboard.c **** #else
  36:./tmk_core/common/keyboard.c **** #   include "magic.h"
  37:./tmk_core/common/keyboard.c **** #endif
  38:./tmk_core/common/keyboard.c **** #ifdef MOUSEKEY_ENABLE
  39:./tmk_core/common/keyboard.c **** #   include "mousekey.h"
  40:./tmk_core/common/keyboard.c **** #endif
  41:./tmk_core/common/keyboard.c **** #ifdef PS2_MOUSE_ENABLE
  42:./tmk_core/common/keyboard.c **** #   include "ps2_mouse.h"
  43:./tmk_core/common/keyboard.c **** #endif
  44:./tmk_core/common/keyboard.c **** #ifdef SERIAL_MOUSE_ENABLE
  45:./tmk_core/common/keyboard.c **** #   include "serial_mouse.h"
  46:./tmk_core/common/keyboard.c **** #endif
  47:./tmk_core/common/keyboard.c **** #ifdef ADB_MOUSE_ENABLE
  48:./tmk_core/common/keyboard.c **** #   include "adb.h"
  49:./tmk_core/common/keyboard.c **** #endif
  50:./tmk_core/common/keyboard.c **** #ifdef RGBLIGHT_ENABLE
  51:./tmk_core/common/keyboard.c **** #   include "rgblight.h"
  52:./tmk_core/common/keyboard.c **** #endif
  53:./tmk_core/common/keyboard.c **** #ifdef SERIAL_LINK_ENABLE
  54:./tmk_core/common/keyboard.c **** #   include "serial_link/system/serial_link.h"
  55:./tmk_core/common/keyboard.c **** #endif
  56:./tmk_core/common/keyboard.c **** #ifdef VISUALIZER_ENABLE
  57:./tmk_core/common/keyboard.c **** #   include "visualizer/visualizer.h"
  58:./tmk_core/common/keyboard.c **** #endif
  59:./tmk_core/common/keyboard.c **** 
  60:./tmk_core/common/keyboard.c **** 
  61:./tmk_core/common/keyboard.c **** 
  62:./tmk_core/common/keyboard.c **** #ifdef MATRIX_HAS_GHOST
  63:./tmk_core/common/keyboard.c **** static bool has_ghost_in_row(uint8_t row)
  64:./tmk_core/common/keyboard.c **** {
  65:./tmk_core/common/keyboard.c ****     matrix_row_t matrix_row = matrix_get_row(row);
  66:./tmk_core/common/keyboard.c ****     // No ghost exists when less than 2 keys are down on the row
  67:./tmk_core/common/keyboard.c ****     if (((matrix_row - 1) & matrix_row) == 0)
  68:./tmk_core/common/keyboard.c ****         return false;
  69:./tmk_core/common/keyboard.c **** 
  70:./tmk_core/common/keyboard.c ****     // Ghost occurs when the row shares column line with other row
  71:./tmk_core/common/keyboard.c ****     for (uint8_t i=0; i < MATRIX_ROWS; i++) {
  72:./tmk_core/common/keyboard.c ****         if (i != row && (matrix_get_row(i) & matrix_row))
  73:./tmk_core/common/keyboard.c ****             return true;
  74:./tmk_core/common/keyboard.c ****     }
  75:./tmk_core/common/keyboard.c ****     return false;
  76:./tmk_core/common/keyboard.c **** }
  77:./tmk_core/common/keyboard.c **** #endif
  78:./tmk_core/common/keyboard.c **** 
  79:./tmk_core/common/keyboard.c **** __attribute__ ((weak))
  80:./tmk_core/common/keyboard.c **** void matrix_setup(void) {
  16               		.loc 1 80 0
  17               		.cfi_startproc
  18               	/* prologue: function */
  19               	/* frame size = 0 */
  20               	/* stack size = 0 */
  21               	.L__stack_usage = 0
  22 0000 0895      		ret
  23               		.cfi_endproc
  24               	.LFE103:
  26               		.section	.text.keyboard_setup,"ax",@progbits
  27               	.global	keyboard_setup
  29               	keyboard_setup:
  30               	.LFB104:
  81:./tmk_core/common/keyboard.c **** }
  82:./tmk_core/common/keyboard.c **** 
  83:./tmk_core/common/keyboard.c **** void keyboard_setup(void) {
  31               		.loc 1 83 0
  32               		.cfi_startproc
  33               	/* prologue: function */
  34               	/* frame size = 0 */
  35               	/* stack size = 0 */
  36               	.L__stack_usage = 0
  84:./tmk_core/common/keyboard.c ****     matrix_setup();
  37               		.loc 1 84 0
  38 0000 0C94 0000 		jmp matrix_setup
  39               	.LVL0:
  40               		.cfi_endproc
  41               	.LFE104:
  43               		.section	.text.keyboard_init,"ax",@progbits
  44               	.global	keyboard_init
  46               	keyboard_init:
  47               	.LFB105:
  85:./tmk_core/common/keyboard.c **** }
  86:./tmk_core/common/keyboard.c **** 
  87:./tmk_core/common/keyboard.c **** void keyboard_init(void) {
  48               		.loc 1 87 0
  49               		.cfi_startproc
  50               	/* prologue: function */
  51               	/* frame size = 0 */
  52               	/* stack size = 0 */
  53               	.L__stack_usage = 0
  88:./tmk_core/common/keyboard.c ****     timer_init();
  54               		.loc 1 88 0
  55 0000 0E94 0000 		call timer_init
  56               	.LVL1:
  89:./tmk_core/common/keyboard.c ****     matrix_init();
  57               		.loc 1 89 0
  58 0004 0E94 0000 		call matrix_init
  59               	.LVL2:
  90:./tmk_core/common/keyboard.c **** #ifdef PS2_MOUSE_ENABLE
  91:./tmk_core/common/keyboard.c ****     ps2_mouse_init();
  92:./tmk_core/common/keyboard.c **** #endif
  93:./tmk_core/common/keyboard.c **** #ifdef SERIAL_MOUSE_ENABLE
  94:./tmk_core/common/keyboard.c ****     serial_mouse_init();
  95:./tmk_core/common/keyboard.c **** #endif
  96:./tmk_core/common/keyboard.c **** #ifdef ADB_MOUSE_ENABLE
  97:./tmk_core/common/keyboard.c ****     adb_mouse_init();
  98:./tmk_core/common/keyboard.c **** #endif
  99:./tmk_core/common/keyboard.c **** #ifdef BOOTMAGIC_ENABLE
 100:./tmk_core/common/keyboard.c ****     bootmagic();
  60               		.loc 1 100 0
  61 0008 0C94 0000 		jmp bootmagic
  62               	.LVL3:
  63               		.cfi_endproc
  64               	.LFE105:
  66               		.section	.text.keyboard_task,"ax",@progbits
  67               	.global	keyboard_task
  69               	keyboard_task:
  70               	.LFB106:
 101:./tmk_core/common/keyboard.c **** #else
 102:./tmk_core/common/keyboard.c ****     magic();
 103:./tmk_core/common/keyboard.c **** #endif
 104:./tmk_core/common/keyboard.c **** #ifdef BACKLIGHT_ENABLE
 105:./tmk_core/common/keyboard.c ****     backlight_init();
 106:./tmk_core/common/keyboard.c **** #endif
 107:./tmk_core/common/keyboard.c **** #ifdef RGBLIGHT_ENABLE
 108:./tmk_core/common/keyboard.c ****     rgblight_init();
 109:./tmk_core/common/keyboard.c **** #endif
 110:./tmk_core/common/keyboard.c **** #if defined(NKRO_ENABLE) && defined(FORCE_NKRO)
 111:./tmk_core/common/keyboard.c ****     keymap_config.nkro = 1;
 112:./tmk_core/common/keyboard.c **** #endif
 113:./tmk_core/common/keyboard.c **** }
 114:./tmk_core/common/keyboard.c **** 
 115:./tmk_core/common/keyboard.c **** /*
 116:./tmk_core/common/keyboard.c ****  * Do keyboard routine jobs: scan mantrix, light LEDs, ...
 117:./tmk_core/common/keyboard.c ****  * This is repeatedly called as fast as possible.
 118:./tmk_core/common/keyboard.c ****  */
 119:./tmk_core/common/keyboard.c **** void keyboard_task(void)
 120:./tmk_core/common/keyboard.c **** {
  71               		.loc 1 120 0
  72               		.cfi_startproc
  73 0000 CF92      		push r12
  74               	.LCFI0:
  75               		.cfi_def_cfa_offset 3
  76               		.cfi_offset 12, -2
  77 0002 DF92      		push r13
  78               	.LCFI1:
  79               		.cfi_def_cfa_offset 4
  80               		.cfi_offset 13, -3
  81 0004 EF92      		push r14
  82               	.LCFI2:
  83               		.cfi_def_cfa_offset 5
  84               		.cfi_offset 14, -4
  85 0006 FF92      		push r15
  86               	.LCFI3:
  87               		.cfi_def_cfa_offset 6
  88               		.cfi_offset 15, -5
  89 0008 0F93      		push r16
  90               	.LCFI4:
  91               		.cfi_def_cfa_offset 7
  92               		.cfi_offset 16, -6
  93 000a 1F93      		push r17
  94               	.LCFI5:
  95               		.cfi_def_cfa_offset 8
  96               		.cfi_offset 17, -7
  97 000c CF93      		push r28
  98               	.LCFI6:
  99               		.cfi_def_cfa_offset 9
 100               		.cfi_offset 28, -8
 101 000e DF93      		push r29
 102               	.LCFI7:
 103               		.cfi_def_cfa_offset 10
 104               		.cfi_offset 29, -9
 105 0010 CDB7      		in r28,__SP_L__
 106 0012 DEB7      		in r29,__SP_H__
 107               	.LCFI8:
 108               		.cfi_def_cfa_register 28
 109 0014 2B97      		sbiw r28,11
 110               	.LCFI9:
 111               		.cfi_def_cfa_offset 21
 112 0016 0FB6      		in __tmp_reg__,__SREG__
 113 0018 F894      		cli
 114 001a DEBF      		out __SP_H__,r29
 115 001c 0FBE      		out __SREG__,__tmp_reg__
 116 001e CDBF      		out __SP_L__,r28
 117               	/* prologue: function */
 118               	/* frame size = 11 */
 119               	/* stack size = 19 */
 120               	.L__stack_usage = 19
 121               	.LVL4:
 121:./tmk_core/common/keyboard.c ****     static matrix_row_t matrix_prev[MATRIX_ROWS];
 122:./tmk_core/common/keyboard.c **** #ifdef MATRIX_HAS_GHOST
 123:./tmk_core/common/keyboard.c ****     static matrix_row_t matrix_ghost[MATRIX_ROWS];
 124:./tmk_core/common/keyboard.c **** #endif
 125:./tmk_core/common/keyboard.c ****     static uint8_t led_status = 0;
 126:./tmk_core/common/keyboard.c ****     matrix_row_t matrix_row = 0;
 127:./tmk_core/common/keyboard.c ****     matrix_row_t matrix_change = 0;
 128:./tmk_core/common/keyboard.c **** 
 129:./tmk_core/common/keyboard.c ****     matrix_scan();
 122               		.loc 1 129 0
 123 0020 0E94 0000 		call matrix_scan
 124               	.LVL5:
 125 0024 30E0      		ldi r19,lo8(matrix_prev.4866)
 126 0026 E32E      		mov r14,r19
 127 0028 30E0      		ldi r19,hi8(matrix_prev.4866)
 128 002a F32E      		mov r15,r19
 129 002c 00E0      		ldi r16,0
 130 002e 10E0      		ldi r17,0
 131               	.LVL6:
 132               	.L14:
 133 0030 C02E      		mov r12,r16
 134               	.LVL7:
 135               	.LBB6:
 130:./tmk_core/common/keyboard.c ****     for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
 131:./tmk_core/common/keyboard.c ****         matrix_row = matrix_get_row(r);
 136               		.loc 1 131 0
 137 0032 802F      		mov r24,r16
 138 0034 0E94 0000 		call matrix_get_row
 139               	.LVL8:
 132:./tmk_core/common/keyboard.c ****         matrix_change = matrix_row ^ matrix_prev[r];
 140               		.loc 1 132 0
 141 0038 F701      		movw r30,r14
 142 003a D190      		ld r13,Z+
 143 003c 7F01      		movw r14,r30
 144 003e D826      		eor r13,r24
 145               	.LVL9:
 133:./tmk_core/common/keyboard.c ****         if (matrix_change) {
 146               		.loc 1 133 0
 147 0040 01F4      		brne .L5
 148               	.LVL10:
 149               	.L12:
 150 0042 0F5F      		subi r16,-1
 151 0044 1F4F      		sbci r17,-1
 152               	.LVL11:
 130:./tmk_core/common/keyboard.c ****     for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
 153               		.loc 1 130 0
 154 0046 0730      		cpi r16,7
 155 0048 1105      		cpc r17,__zero_reg__
 156 004a 01F4      		brne .L14
 157               	.LBE6:
 134:./tmk_core/common/keyboard.c **** #ifdef MATRIX_HAS_GHOST
 135:./tmk_core/common/keyboard.c ****             if (has_ghost_in_row(r)) {
 136:./tmk_core/common/keyboard.c ****                 /* Keep track of whether ghosted status has changed for
 137:./tmk_core/common/keyboard.c ****                  * debugging. But don't update matrix_prev until un-ghosted, or
 138:./tmk_core/common/keyboard.c ****                  * the last key would be lost.
 139:./tmk_core/common/keyboard.c ****                  */
 140:./tmk_core/common/keyboard.c ****                 if (debug_matrix && matrix_ghost[r] != matrix_row) {
 141:./tmk_core/common/keyboard.c ****                     matrix_print();
 142:./tmk_core/common/keyboard.c ****                 }
 143:./tmk_core/common/keyboard.c ****                 matrix_ghost[r] = matrix_row;
 144:./tmk_core/common/keyboard.c ****                 continue;
 145:./tmk_core/common/keyboard.c ****             }
 146:./tmk_core/common/keyboard.c ****             matrix_ghost[r] = matrix_row;
 147:./tmk_core/common/keyboard.c **** #endif
 148:./tmk_core/common/keyboard.c ****             if (debug_matrix) matrix_print();
 149:./tmk_core/common/keyboard.c ****             for (uint8_t c = 0; c < MATRIX_COLS; c++) {
 150:./tmk_core/common/keyboard.c ****                 if (matrix_change & ((matrix_row_t)1<<c)) {
 151:./tmk_core/common/keyboard.c ****                     action_exec((keyevent_t){
 152:./tmk_core/common/keyboard.c ****                         .key = (keypos_t){ .row = r, .col = c },
 153:./tmk_core/common/keyboard.c ****                         .pressed = (matrix_row & ((matrix_row_t)1<<c)),
 154:./tmk_core/common/keyboard.c ****                         .time = (timer_read() | 1) /* time should not be 0 */
 155:./tmk_core/common/keyboard.c ****                     });
 156:./tmk_core/common/keyboard.c ****                     // record a processed key
 157:./tmk_core/common/keyboard.c ****                     matrix_prev[r] ^= ((matrix_row_t)1<<c);
 158:./tmk_core/common/keyboard.c ****                     // process a key per task call
 159:./tmk_core/common/keyboard.c ****                     goto MATRIX_LOOP_END;
 160:./tmk_core/common/keyboard.c ****                 }
 161:./tmk_core/common/keyboard.c ****             }
 162:./tmk_core/common/keyboard.c ****         }
 163:./tmk_core/common/keyboard.c ****     }
 164:./tmk_core/common/keyboard.c ****     // call with pseudo tick event when no real key event.
 165:./tmk_core/common/keyboard.c ****     action_exec(TICK);
 158               		.loc 1 165 0
 159 004c 8FEF      		ldi r24,lo8(-1)
 160 004e 8983      		std Y+1,r24
 161 0050 8A83      		std Y+2,r24
 162 0052 1B82      		std Y+3,__zero_reg__
 163 0054 0E94 0000 		call timer_read
 164               	.LVL12:
 165 0058 8160      		ori r24,1
 166 005a 782F      		mov r23,r24
 167 005c 9D83      		std Y+5,r25
 168 005e 8C83      		std Y+4,r24
 169 0060 4981      		ldd r20,Y+1
 170 0062 5A81      		ldd r21,Y+2
 171 0064 6B81      		ldd r22,Y+3
 172 0066 8D81      		ldd r24,Y+5
 173 0068 0E94 0000 		call action_exec
 174               	.LVL13:
 175 006c 00C0      		rjmp .L11
 176               	.LVL14:
 177               	.L5:
 178               	.LBB8:
 148:./tmk_core/common/keyboard.c ****             for (uint8_t c = 0; c < MATRIX_COLS; c++) {
 179               		.loc 1 148 0
 180 006e 9091 0000 		lds r25,debug_config
 181 0072 91FF      		sbrs r25,1
 182 0074 00C0      		rjmp .L8
 148:./tmk_core/common/keyboard.c ****             for (uint8_t c = 0; c < MATRIX_COLS; c++) {
 183               		.loc 1 148 0 is_stmt 0 discriminator 1
 184 0076 8B87      		std Y+11,r24
 185 0078 0E94 0000 		call matrix_print
 186               	.LVL15:
 187 007c 8B85      		ldd r24,Y+11
 188               	.L8:
 189               	.LVL16:
 190               	.LBE8:
 129:./tmk_core/common/keyboard.c ****     for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
 191               		.loc 1 129 0 is_stmt 1
 192 007e 20E0      		ldi r18,0
 193 0080 30E0      		ldi r19,0
 194               	.LBB9:
 195               	.LBB7:
 150:./tmk_core/common/keyboard.c ****                     action_exec((keyevent_t){
 196               		.loc 1 150 0
 197 0082 4D2D      		mov r20,r13
 198 0084 50E0      		ldi r21,0
 199               	.LVL17:
 200               	.L13:
 201 0086 922F      		mov r25,r18
 202               	.LVL18:
 203 0088 BA01      		movw r22,r20
 204 008a 022E      		mov r0,r18
 205 008c 00C0      		rjmp 2f
 206               		1:
 207 008e 7595      		asr r23
 208 0090 6795      		ror r22
 209               		2:
 210 0092 0A94      		dec r0
 211 0094 02F4      		brpl 1b
 212 0096 60FF      		sbrs r22,0
 213 0098 00C0      		rjmp .L9
 151:./tmk_core/common/keyboard.c ****                         .key = (keypos_t){ .row = r, .col = c },
 214               		.loc 1 151 0
 215 009a 2E83      		std Y+6,r18
 216 009c CF82      		std Y+7,r12
 153:./tmk_core/common/keyboard.c ****                         .time = (timer_read() | 1) /* time should not be 0 */
 217               		.loc 1 153 0
 218 009e EE24      		clr r14
 219 00a0 E394      		inc r14
 220 00a2 F12C      		mov r15,__zero_reg__
 221               	.LVL19:
 222 00a4 00C0      		rjmp 2f
 223               		1:
 224 00a6 EE0C      		lsl r14
 225 00a8 FF1C      		rol r15
 226               		2:
 227 00aa 9A95      		dec r25
 228 00ac 02F4      		brpl 1b
 229 00ae 90E0      		ldi r25,0
 230 00b0 8E21      		and r24,r14
 231 00b2 9F21      		and r25,r15
 232 00b4 21E0      		ldi r18,lo8(1)
 233 00b6 892B      		or r24,r25
 234 00b8 01F4      		brne .L10
 235 00ba 20E0      		ldi r18,0
 236               	.L10:
 151:./tmk_core/common/keyboard.c ****                         .key = (keypos_t){ .row = r, .col = c },
 237               		.loc 1 151 0
 238 00bc 2887      		std Y+8,r18
 154:./tmk_core/common/keyboard.c ****                     });
 239               		.loc 1 154 0
 240 00be 0E94 0000 		call timer_read
 241               	.LVL20:
 242 00c2 8160      		ori r24,1
 151:./tmk_core/common/keyboard.c ****                         .key = (keypos_t){ .row = r, .col = c },
 243               		.loc 1 151 0
 244 00c4 782F      		mov r23,r24
 245 00c6 9A87      		std Y+10,r25
 246 00c8 8987      		std Y+9,r24
 247 00ca 4E81      		ldd r20,Y+6
 248 00cc 5F81      		ldd r21,Y+7
 249 00ce 6885      		ldd r22,Y+8
 250 00d0 8A85      		ldd r24,Y+10
 251 00d2 0E94 0000 		call action_exec
 252               	.LVL21:
 157:./tmk_core/common/keyboard.c ****                     // process a key per task call
 253               		.loc 1 157 0
 254 00d6 F801      		movw r30,r16
 255 00d8 E050      		subi r30,lo8(-(matrix_prev.4866))
 256 00da F040      		sbci r31,hi8(-(matrix_prev.4866))
 257 00dc 8081      		ld r24,Z
 258 00de 8E25      		eor r24,r14
 259 00e0 8083      		st Z,r24
 159:./tmk_core/common/keyboard.c ****                 }
 260               		.loc 1 159 0
 261 00e2 00C0      		rjmp .L11
 262               	.LVL22:
 263               	.L9:
 264 00e4 2F5F      		subi r18,-1
 265 00e6 3F4F      		sbci r19,-1
 266               	.LVL23:
 149:./tmk_core/common/keyboard.c ****                 if (matrix_change & ((matrix_row_t)1<<c)) {
 267               		.loc 1 149 0
 268 00e8 2830      		cpi r18,8
 269 00ea 3105      		cpc r19,__zero_reg__
 270 00ec 01F4      		brne .L13
 271 00ee 00C0      		rjmp .L12
 272               	.LVL24:
 273               	.L11:
 274               	.LBE7:
 275               	.LBE9:
 166:./tmk_core/common/keyboard.c **** 
 167:./tmk_core/common/keyboard.c **** MATRIX_LOOP_END:
 168:./tmk_core/common/keyboard.c **** 
 169:./tmk_core/common/keyboard.c **** #ifdef MOUSEKEY_ENABLE
 170:./tmk_core/common/keyboard.c ****     // mousekey repeat & acceleration
 171:./tmk_core/common/keyboard.c ****     mousekey_task();
 276               		.loc 1 171 0
 277 00f0 0E94 0000 		call mousekey_task
 278               	.LVL25:
 172:./tmk_core/common/keyboard.c **** #endif
 173:./tmk_core/common/keyboard.c **** 
 174:./tmk_core/common/keyboard.c **** #ifdef PS2_MOUSE_ENABLE
 175:./tmk_core/common/keyboard.c ****     ps2_mouse_task();
 176:./tmk_core/common/keyboard.c **** #endif
 177:./tmk_core/common/keyboard.c **** 
 178:./tmk_core/common/keyboard.c **** #ifdef SERIAL_MOUSE_ENABLE
 179:./tmk_core/common/keyboard.c ****     serial_mouse_task();
 180:./tmk_core/common/keyboard.c **** #endif
 181:./tmk_core/common/keyboard.c **** 
 182:./tmk_core/common/keyboard.c **** #ifdef ADB_MOUSE_ENABLE
 183:./tmk_core/common/keyboard.c ****     adb_mouse_task();
 184:./tmk_core/common/keyboard.c **** #endif
 185:./tmk_core/common/keyboard.c **** 
 186:./tmk_core/common/keyboard.c **** #ifdef SERIAL_LINK_ENABLE
 187:./tmk_core/common/keyboard.c **** 	serial_link_update();
 188:./tmk_core/common/keyboard.c **** #endif
 189:./tmk_core/common/keyboard.c **** 
 190:./tmk_core/common/keyboard.c **** #ifdef VISUALIZER_ENABLE
 191:./tmk_core/common/keyboard.c ****     visualizer_update(default_layer_state, layer_state, host_keyboard_leds());
 192:./tmk_core/common/keyboard.c **** #endif
 193:./tmk_core/common/keyboard.c **** 
 194:./tmk_core/common/keyboard.c ****     // update LED
 195:./tmk_core/common/keyboard.c ****     if (led_status != host_keyboard_leds()) {
 279               		.loc 1 195 0
 280 00f4 1091 0000 		lds r17,led_status.4867
 281 00f8 0E94 0000 		call host_keyboard_leds
 282               	.LVL26:
 283 00fc 1817      		cp r17,r24
 284 00fe 01F0      		breq .L4
 196:./tmk_core/common/keyboard.c ****         led_status = host_keyboard_leds();
 285               		.loc 1 196 0
 286 0100 0E94 0000 		call host_keyboard_leds
 287               	.LVL27:
 288 0104 8093 0000 		sts led_status.4867,r24
 289               	.LVL28:
 290               	/* epilogue start */
 197:./tmk_core/common/keyboard.c ****         keyboard_set_leds(led_status);
 198:./tmk_core/common/keyboard.c ****     }
 199:./tmk_core/common/keyboard.c **** }
 291               		.loc 1 199 0
 292 0108 2B96      		adiw r28,11
 293 010a 0FB6      		in __tmp_reg__,__SREG__
 294 010c F894      		cli
 295 010e DEBF      		out __SP_H__,r29
 296 0110 0FBE      		out __SREG__,__tmp_reg__
 297 0112 CDBF      		out __SP_L__,r28
 298 0114 DF91      		pop r29
 299 0116 CF91      		pop r28
 300 0118 1F91      		pop r17
 301 011a 0F91      		pop r16
 302 011c FF90      		pop r15
 303 011e EF90      		pop r14
 304 0120 DF90      		pop r13
 305               	.LVL29:
 306 0122 CF90      		pop r12
 307               	.LBB10:
 308               	.LBB11:
 200:./tmk_core/common/keyboard.c **** 
 201:./tmk_core/common/keyboard.c **** void keyboard_set_leds(uint8_t leds)
 202:./tmk_core/common/keyboard.c **** {
 203:./tmk_core/common/keyboard.c ****     if (debug_keyboard) { debug("keyboard_set_led: "); debug_hex8(leds); debug("\n"); }
 204:./tmk_core/common/keyboard.c ****     led_set(leds);
 309               		.loc 1 204 0
 310 0124 0C94 0000 		jmp led_set
 311               	.LVL30:
 312               	.L4:
 313               	/* epilogue start */
 314               	.LBE11:
 315               	.LBE10:
 199:./tmk_core/common/keyboard.c **** 
 316               		.loc 1 199 0
 317 0128 2B96      		adiw r28,11
 318 012a 0FB6      		in __tmp_reg__,__SREG__
 319 012c F894      		cli
 320 012e DEBF      		out __SP_H__,r29
 321 0130 0FBE      		out __SREG__,__tmp_reg__
 322 0132 CDBF      		out __SP_L__,r28
 323 0134 DF91      		pop r29
 324 0136 CF91      		pop r28
 325 0138 1F91      		pop r17
 326 013a 0F91      		pop r16
 327 013c FF90      		pop r15
 328 013e EF90      		pop r14
 329 0140 DF90      		pop r13
 330               	.LVL31:
 331 0142 CF90      		pop r12
 332 0144 0895      		ret
 333               		.cfi_endproc
 334               	.LFE106:
 336               		.section	.text.keyboard_set_leds,"ax",@progbits
 337               	.global	keyboard_set_leds
 339               	keyboard_set_leds:
 340               	.LFB107:
 202:./tmk_core/common/keyboard.c ****     if (debug_keyboard) { debug("keyboard_set_led: "); debug_hex8(leds); debug("\n"); }
 341               		.loc 1 202 0
 342               		.cfi_startproc
 343               	.LVL32:
 344               	/* prologue: function */
 345               	/* frame size = 0 */
 346               	/* stack size = 0 */
 347               	.L__stack_usage = 0
 348               		.loc 1 204 0
 349 0000 0C94 0000 		jmp led_set
 350               	.LVL33:
 351               		.cfi_endproc
 352               	.LFE107:
 354               		.section	.bss.led_status.4867,"aw",@nobits
 357               	led_status.4867:
 358 0000 00        		.zero	1
 359               		.section	.bss.matrix_prev.4866,"aw",@nobits
 362               	matrix_prev.4866:
 363 0000 0000 0000 		.zero	7
 363      0000 00
 364               		.text
 365               	.Letext0:
 366               		.file 2 "c:\\users\\james\\mhv_avr\\avr\\include\\stdint.h"
 367               		.file 3 "./tmk_core/common/keyboard.h"
 368               		.file 4 "./tmk_core/common/matrix.h"
 369               		.file 5 "./tmk_core/common/debug.h"
 370               		.file 6 "./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/USBTask.h"
 371               		.file 7 "./tmk_core/common/timer.h"
 372               		.file 8 "./tmk_core/common/bootmagic.h"
 373               		.file 9 "./tmk_core/common/action.h"
 374               		.file 10 "./tmk_core/common/led.h"
 375               		.file 11 "./tmk_core/common/mousekey.h"
 376               		.file 12 "./tmk_core/common/host.h"
DEFINED SYMBOLS
                            *ABS*:00000000 keyboard.c
C:\Users\James\AppData\Local\Temp\ccmbM66b.s:2      *ABS*:0000003e __SP_H__
C:\Users\James\AppData\Local\Temp\ccmbM66b.s:3      *ABS*:0000003d __SP_L__
C:\Users\James\AppData\Local\Temp\ccmbM66b.s:4      *ABS*:0000003f __SREG__
C:\Users\James\AppData\Local\Temp\ccmbM66b.s:5      *ABS*:00000000 __tmp_reg__
C:\Users\James\AppData\Local\Temp\ccmbM66b.s:6      *ABS*:00000001 __zero_reg__
C:\Users\James\AppData\Local\Temp\ccmbM66b.s:13     .text.matrix_setup:00000000 matrix_setup
C:\Users\James\AppData\Local\Temp\ccmbM66b.s:29     .text.keyboard_setup:00000000 keyboard_setup
C:\Users\James\AppData\Local\Temp\ccmbM66b.s:46     .text.keyboard_init:00000000 keyboard_init
C:\Users\James\AppData\Local\Temp\ccmbM66b.s:69     .text.keyboard_task:00000000 keyboard_task
C:\Users\James\AppData\Local\Temp\ccmbM66b.s:362    .bss.matrix_prev.4866:00000000 matrix_prev.4866
C:\Users\James\AppData\Local\Temp\ccmbM66b.s:357    .bss.led_status.4867:00000000 led_status.4867
C:\Users\James\AppData\Local\Temp\ccmbM66b.s:339    .text.keyboard_set_leds:00000000 keyboard_set_leds

UNDEFINED SYMBOLS
timer_init
matrix_init
bootmagic
matrix_scan
matrix_get_row
timer_read
action_exec
debug_config
matrix_print
mousekey_task
host_keyboard_leds
led_set
__do_clear_bss
