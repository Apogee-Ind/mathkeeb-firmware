   1               		.file	"process_unicode.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.hex_to_keycode,"ax",@progbits
  11               		.weak	hex_to_keycode
  13               	hex_to_keycode:
  14               	.LFB107:
  15               		.file 1 "quantum/process_keycode/process_unicode.c"
   1:quantum/process_keycode/process_unicode.c **** #include "process_unicode.h"
   2:quantum/process_keycode/process_unicode.c **** #include "action_util.h"
   3:quantum/process_keycode/process_unicode.c **** 
   4:quantum/process_keycode/process_unicode.c **** static uint8_t input_mode;
   5:quantum/process_keycode/process_unicode.c **** uint8_t mods;
   6:quantum/process_keycode/process_unicode.c **** 
   7:quantum/process_keycode/process_unicode.c **** __attribute__((weak))
   8:quantum/process_keycode/process_unicode.c **** uint16_t hex_to_keycode(uint8_t hex)
   9:quantum/process_keycode/process_unicode.c **** {
  16               		.loc 1 9 0
  17               		.cfi_startproc
  18               	.LVL0:
  19               	/* prologue: function */
  20               	/* frame size = 0 */
  21               	/* stack size = 0 */
  22               	.L__stack_usage = 0
  23 0000 282F      		mov r18,r24
  10:quantum/process_keycode/process_unicode.c ****   if (hex == 0x0) {
  24               		.loc 1 10 0
  25 0002 8823      		tst r24
  26 0004 01F0      		breq .L4
  27 0006 90E0      		ldi r25,0
  11:quantum/process_keycode/process_unicode.c ****     return KC_0;
  12:quantum/process_keycode/process_unicode.c ****   } else if (hex < 0xA) {
  28               		.loc 1 12 0
  29 0008 2A30      		cpi r18,lo8(10)
  30 000a 00F4      		brsh .L3
  13:quantum/process_keycode/process_unicode.c ****     return KC_1 + (hex - 0x1);
  31               		.loc 1 13 0
  32 000c 4D96      		adiw r24,29
  33               	.LVL1:
  34 000e 0895      		ret
  35               	.L3:
  14:quantum/process_keycode/process_unicode.c ****   } else {
  15:quantum/process_keycode/process_unicode.c ****     return KC_A + (hex - 0xA);
  36               		.loc 1 15 0
  37 0010 0697      		sbiw r24,6
  38 0012 0895      		ret
  39               	.L4:
  11:quantum/process_keycode/process_unicode.c ****   } else if (hex < 0xA) {
  40               		.loc 1 11 0
  41 0014 87E2      		ldi r24,lo8(39)
  42 0016 90E0      		ldi r25,0
  16:quantum/process_keycode/process_unicode.c ****   }
  17:quantum/process_keycode/process_unicode.c **** }
  43               		.loc 1 17 0
  44 0018 0895      		ret
  45               		.cfi_endproc
  46               	.LFE107:
  48               		.section	.text.set_unicode_input_mode,"ax",@progbits
  49               	.global	set_unicode_input_mode
  51               	set_unicode_input_mode:
  52               	.LFB108:
  18:quantum/process_keycode/process_unicode.c **** 
  19:quantum/process_keycode/process_unicode.c **** void set_unicode_input_mode(uint8_t os_target)
  20:quantum/process_keycode/process_unicode.c **** {
  53               		.loc 1 20 0
  54               		.cfi_startproc
  55               	.LVL2:
  56               	/* prologue: function */
  57               	/* frame size = 0 */
  58               	/* stack size = 0 */
  59               	.L__stack_usage = 0
  21:quantum/process_keycode/process_unicode.c ****   input_mode = os_target;
  60               		.loc 1 21 0
  61 0000 8093 0000 		sts input_mode,r24
  62 0004 0895      		ret
  63               		.cfi_endproc
  64               	.LFE108:
  66               		.section	.text.get_unicode_input_mode,"ax",@progbits
  67               	.global	get_unicode_input_mode
  69               	get_unicode_input_mode:
  70               	.LFB109:
  22:quantum/process_keycode/process_unicode.c **** }
  23:quantum/process_keycode/process_unicode.c **** 
  24:quantum/process_keycode/process_unicode.c **** uint8_t get_unicode_input_mode(void) {
  71               		.loc 1 24 0
  72               		.cfi_startproc
  73               	/* prologue: function */
  74               	/* frame size = 0 */
  75               	/* stack size = 0 */
  76               	.L__stack_usage = 0
  25:quantum/process_keycode/process_unicode.c ****   return input_mode;
  26:quantum/process_keycode/process_unicode.c **** }
  77               		.loc 1 26 0
  78 0000 8091 0000 		lds r24,input_mode
  79 0004 0895      		ret
  80               		.cfi_endproc
  81               	.LFE109:
  83               		.section	.text.unicode_input_start,"ax",@progbits
  84               		.weak	unicode_input_start
  86               	unicode_input_start:
  87               	.LFB110:
  27:quantum/process_keycode/process_unicode.c **** 
  28:quantum/process_keycode/process_unicode.c **** __attribute__((weak))
  29:quantum/process_keycode/process_unicode.c **** void unicode_input_start (void) {
  88               		.loc 1 29 0
  89               		.cfi_startproc
  90               	/* prologue: function */
  91               	/* frame size = 0 */
  92               	/* stack size = 0 */
  93               	.L__stack_usage = 0
  30:quantum/process_keycode/process_unicode.c ****   // save current mods
  31:quantum/process_keycode/process_unicode.c ****   mods = keyboard_report->mods;
  94               		.loc 1 31 0
  95 0000 E091 0000 		lds r30,keyboard_report
  96 0004 F091 0000 		lds r31,keyboard_report+1
  97 0008 8081      		ld r24,Z
  98 000a 8093 0000 		sts mods,r24
  32:quantum/process_keycode/process_unicode.c **** 
  33:quantum/process_keycode/process_unicode.c ****   // unregister all mods to start from clean state
  34:quantum/process_keycode/process_unicode.c ****   if (mods & MOD_BIT(KC_LSFT)) unregister_code(KC_LSFT);
  99               		.loc 1 34 0
 100 000e 81FF      		sbrs r24,1
 101 0010 00C0      		rjmp .L9
 102               		.loc 1 34 0 is_stmt 0 discriminator 1
 103 0012 81EE      		ldi r24,lo8(-31)
 104 0014 0E94 0000 		call unregister_code
 105               	.LVL3:
 106               	.L9:
  35:quantum/process_keycode/process_unicode.c ****   if (mods & MOD_BIT(KC_RSFT)) unregister_code(KC_RSFT);
 107               		.loc 1 35 0 is_stmt 1
 108 0018 8091 0000 		lds r24,mods
 109 001c 85FF      		sbrs r24,5
 110 001e 00C0      		rjmp .L10
 111               		.loc 1 35 0 is_stmt 0 discriminator 1
 112 0020 85EE      		ldi r24,lo8(-27)
 113 0022 0E94 0000 		call unregister_code
 114               	.LVL4:
 115               	.L10:
  36:quantum/process_keycode/process_unicode.c ****   if (mods & MOD_BIT(KC_LCTL)) unregister_code(KC_LCTL);
 116               		.loc 1 36 0 is_stmt 1
 117 0026 8091 0000 		lds r24,mods
 118 002a 80FF      		sbrs r24,0
 119 002c 00C0      		rjmp .L11
 120               		.loc 1 36 0 is_stmt 0 discriminator 1
 121 002e 80EE      		ldi r24,lo8(-32)
 122 0030 0E94 0000 		call unregister_code
 123               	.LVL5:
 124               	.L11:
  37:quantum/process_keycode/process_unicode.c ****   if (mods & MOD_BIT(KC_RCTL)) unregister_code(KC_RCTL);
 125               		.loc 1 37 0 is_stmt 1
 126 0034 8091 0000 		lds r24,mods
 127 0038 84FF      		sbrs r24,4
 128 003a 00C0      		rjmp .L12
 129               		.loc 1 37 0 is_stmt 0 discriminator 1
 130 003c 84EE      		ldi r24,lo8(-28)
 131 003e 0E94 0000 		call unregister_code
 132               	.LVL6:
 133               	.L12:
  38:quantum/process_keycode/process_unicode.c ****   if (mods & MOD_BIT(KC_LALT)) unregister_code(KC_LALT);
 134               		.loc 1 38 0 is_stmt 1
 135 0042 8091 0000 		lds r24,mods
 136 0046 82FF      		sbrs r24,2
 137 0048 00C0      		rjmp .L13
 138               		.loc 1 38 0 is_stmt 0 discriminator 1
 139 004a 82EE      		ldi r24,lo8(-30)
 140 004c 0E94 0000 		call unregister_code
 141               	.LVL7:
 142               	.L13:
  39:quantum/process_keycode/process_unicode.c ****   if (mods & MOD_BIT(KC_RALT)) unregister_code(KC_RALT);
 143               		.loc 1 39 0 is_stmt 1
 144 0050 8091 0000 		lds r24,mods
 145 0054 86FF      		sbrs r24,6
 146 0056 00C0      		rjmp .L14
 147               		.loc 1 39 0 is_stmt 0 discriminator 1
 148 0058 86EE      		ldi r24,lo8(-26)
 149 005a 0E94 0000 		call unregister_code
 150               	.LVL8:
 151               	.L14:
  40:quantum/process_keycode/process_unicode.c ****   if (mods & MOD_BIT(KC_LGUI)) unregister_code(KC_LGUI);
 152               		.loc 1 40 0 is_stmt 1
 153 005e 8091 0000 		lds r24,mods
 154 0062 83FF      		sbrs r24,3
 155 0064 00C0      		rjmp .L15
 156               		.loc 1 40 0 is_stmt 0 discriminator 1
 157 0066 83EE      		ldi r24,lo8(-29)
 158 0068 0E94 0000 		call unregister_code
 159               	.LVL9:
 160               	.L15:
  41:quantum/process_keycode/process_unicode.c ****   if (mods & MOD_BIT(KC_RGUI)) unregister_code(KC_RGUI);
 161               		.loc 1 41 0 is_stmt 1
 162 006c 8091 0000 		lds r24,mods
 163 0070 87FF      		sbrs r24,7
 164 0072 00C0      		rjmp .L16
 165               		.loc 1 41 0 is_stmt 0 discriminator 1
 166 0074 87EE      		ldi r24,lo8(-25)
 167 0076 0E94 0000 		call unregister_code
 168               	.LVL10:
 169               	.L16:
  42:quantum/process_keycode/process_unicode.c **** 
  43:quantum/process_keycode/process_unicode.c ****   switch(input_mode) {
 170               		.loc 1 43 0 is_stmt 1
 171 007a 8091 0000 		lds r24,input_mode
 172 007e 8130      		cpi r24,lo8(1)
 173 0080 01F0      		breq .L18
 174 0082 00F0      		brlo .L19
 175 0084 8230      		cpi r24,lo8(2)
 176 0086 01F0      		breq .L20
 177 0088 8430      		cpi r24,lo8(4)
 178 008a 01F4      		brne .L17
  44:quantum/process_keycode/process_unicode.c ****   case UC_OSX:
  45:quantum/process_keycode/process_unicode.c ****     register_code(KC_LALT);
  46:quantum/process_keycode/process_unicode.c ****     break;
  47:quantum/process_keycode/process_unicode.c ****   case UC_LNX:
  48:quantum/process_keycode/process_unicode.c ****     register_code(KC_LCTL);
  49:quantum/process_keycode/process_unicode.c ****     register_code(KC_LSFT);
  50:quantum/process_keycode/process_unicode.c ****     register_code(KC_U);
  51:quantum/process_keycode/process_unicode.c ****     unregister_code(KC_U);
  52:quantum/process_keycode/process_unicode.c ****     unregister_code(KC_LSFT);
  53:quantum/process_keycode/process_unicode.c ****     unregister_code(KC_LCTL);
  54:quantum/process_keycode/process_unicode.c ****     break;
  55:quantum/process_keycode/process_unicode.c ****   case UC_WIN:
  56:quantum/process_keycode/process_unicode.c ****     register_code(KC_LALT);
  57:quantum/process_keycode/process_unicode.c ****     register_code(KC_PPLS);
  58:quantum/process_keycode/process_unicode.c ****     unregister_code(KC_PPLS);
  59:quantum/process_keycode/process_unicode.c ****     break;
  60:quantum/process_keycode/process_unicode.c ****   case UC_WINC:
  61:quantum/process_keycode/process_unicode.c ****     register_code(KC_RALT);
 179               		.loc 1 61 0
 180 008c 86EE      		ldi r24,lo8(-26)
 181 008e 0E94 0000 		call register_code
 182               	.LVL11:
  62:quantum/process_keycode/process_unicode.c ****     unregister_code(KC_RALT);
 183               		.loc 1 62 0
 184 0092 86EE      		ldi r24,lo8(-26)
 185 0094 0E94 0000 		call unregister_code
 186               	.LVL12:
  63:quantum/process_keycode/process_unicode.c ****     register_code(KC_U);
 187               		.loc 1 63 0
 188 0098 88E1      		ldi r24,lo8(24)
 189 009a 0E94 0000 		call register_code
 190               	.LVL13:
  64:quantum/process_keycode/process_unicode.c ****     unregister_code(KC_U);
 191               		.loc 1 64 0
 192 009e 88E1      		ldi r24,lo8(24)
 193 00a0 00C0      		rjmp .L43
 194               	.L19:
  45:quantum/process_keycode/process_unicode.c ****     break;
 195               		.loc 1 45 0
 196 00a2 82EE      		ldi r24,lo8(-30)
 197 00a4 0E94 0000 		call register_code
 198               	.LVL14:
  46:quantum/process_keycode/process_unicode.c ****   case UC_LNX:
 199               		.loc 1 46 0
 200 00a8 00C0      		rjmp .L17
 201               	.L18:
  48:quantum/process_keycode/process_unicode.c ****     register_code(KC_LSFT);
 202               		.loc 1 48 0
 203 00aa 80EE      		ldi r24,lo8(-32)
 204 00ac 0E94 0000 		call register_code
 205               	.LVL15:
  49:quantum/process_keycode/process_unicode.c ****     register_code(KC_U);
 206               		.loc 1 49 0
 207 00b0 81EE      		ldi r24,lo8(-31)
 208 00b2 0E94 0000 		call register_code
 209               	.LVL16:
  50:quantum/process_keycode/process_unicode.c ****     unregister_code(KC_U);
 210               		.loc 1 50 0
 211 00b6 88E1      		ldi r24,lo8(24)
 212 00b8 0E94 0000 		call register_code
 213               	.LVL17:
  51:quantum/process_keycode/process_unicode.c ****     unregister_code(KC_LSFT);
 214               		.loc 1 51 0
 215 00bc 88E1      		ldi r24,lo8(24)
 216 00be 0E94 0000 		call unregister_code
 217               	.LVL18:
  52:quantum/process_keycode/process_unicode.c ****     unregister_code(KC_LCTL);
 218               		.loc 1 52 0
 219 00c2 81EE      		ldi r24,lo8(-31)
 220 00c4 0E94 0000 		call unregister_code
 221               	.LVL19:
  53:quantum/process_keycode/process_unicode.c ****     break;
 222               		.loc 1 53 0
 223 00c8 80EE      		ldi r24,lo8(-32)
 224 00ca 00C0      		rjmp .L43
 225               	.L20:
  56:quantum/process_keycode/process_unicode.c ****     register_code(KC_PPLS);
 226               		.loc 1 56 0
 227 00cc 82EE      		ldi r24,lo8(-30)
 228 00ce 0E94 0000 		call register_code
 229               	.LVL20:
  57:quantum/process_keycode/process_unicode.c ****     unregister_code(KC_PPLS);
 230               		.loc 1 57 0
 231 00d2 87E5      		ldi r24,lo8(87)
 232 00d4 0E94 0000 		call register_code
 233               	.LVL21:
  58:quantum/process_keycode/process_unicode.c ****     break;
 234               		.loc 1 58 0
 235 00d8 87E5      		ldi r24,lo8(87)
 236               	.L43:
 237               		.loc 1 64 0
 238 00da 0E94 0000 		call unregister_code
 239               	.LVL22:
 240               	.L17:
 241               	.LBB4:
 242               	.LBB5:
 243               		.file 2 "c:\\users\\james\\mhv_avr\\avr\\include\\util\\delay.h"
   1:c:\users\james\mhv_avr\avr\include\util\delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:c:\users\james\mhv_avr\avr\include\util\delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:c:\users\james\mhv_avr\avr\include\util\delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:c:\users\james\mhv_avr\avr\include\util\delay.h ****    All rights reserved.
   5:c:\users\james\mhv_avr\avr\include\util\delay.h **** 
   6:c:\users\james\mhv_avr\avr\include\util\delay.h ****    Redistribution and use in source and binary forms, with or without
   7:c:\users\james\mhv_avr\avr\include\util\delay.h ****    modification, are permitted provided that the following conditions are met:
   8:c:\users\james\mhv_avr\avr\include\util\delay.h **** 
   9:c:\users\james\mhv_avr\avr\include\util\delay.h ****    * Redistributions of source code must retain the above copyright
  10:c:\users\james\mhv_avr\avr\include\util\delay.h ****      notice, this list of conditions and the following disclaimer.
  11:c:\users\james\mhv_avr\avr\include\util\delay.h **** 
  12:c:\users\james\mhv_avr\avr\include\util\delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:c:\users\james\mhv_avr\avr\include\util\delay.h ****      notice, this list of conditions and the following disclaimer in
  14:c:\users\james\mhv_avr\avr\include\util\delay.h ****      the documentation and/or other materials provided with the
  15:c:\users\james\mhv_avr\avr\include\util\delay.h ****      distribution.
  16:c:\users\james\mhv_avr\avr\include\util\delay.h **** 
  17:c:\users\james\mhv_avr\avr\include\util\delay.h ****    * Neither the name of the copyright holders nor the names of
  18:c:\users\james\mhv_avr\avr\include\util\delay.h ****      contributors may be used to endorse or promote products derived
  19:c:\users\james\mhv_avr\avr\include\util\delay.h ****      from this software without specific prior written permission.
  20:c:\users\james\mhv_avr\avr\include\util\delay.h **** 
  21:c:\users\james\mhv_avr\avr\include\util\delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:c:\users\james\mhv_avr\avr\include\util\delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:c:\users\james\mhv_avr\avr\include\util\delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:c:\users\james\mhv_avr\avr\include\util\delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:c:\users\james\mhv_avr\avr\include\util\delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:c:\users\james\mhv_avr\avr\include\util\delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:c:\users\james\mhv_avr\avr\include\util\delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:c:\users\james\mhv_avr\avr\include\util\delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:c:\users\james\mhv_avr\avr\include\util\delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:c:\users\james\mhv_avr\avr\include\util\delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:c:\users\james\mhv_avr\avr\include\util\delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:c:\users\james\mhv_avr\avr\include\util\delay.h **** 
  33:c:\users\james\mhv_avr\avr\include\util\delay.h **** /* $Id: delay.h.in 2385 2013-05-03 13:14:20Z joerg_wunsch $ */
  34:c:\users\james\mhv_avr\avr\include\util\delay.h **** 
  35:c:\users\james\mhv_avr\avr\include\util\delay.h **** #ifndef _UTIL_DELAY_H_
  36:c:\users\james\mhv_avr\avr\include\util\delay.h **** #define _UTIL_DELAY_H_ 1
  37:c:\users\james\mhv_avr\avr\include\util\delay.h **** 
  38:c:\users\james\mhv_avr\avr\include\util\delay.h **** #ifndef __HAS_DELAY_CYCLES
  39:c:\users\james\mhv_avr\avr\include\util\delay.h **** #define __HAS_DELAY_CYCLES 1
  40:c:\users\james\mhv_avr\avr\include\util\delay.h **** #endif
  41:c:\users\james\mhv_avr\avr\include\util\delay.h **** 
  42:c:\users\james\mhv_avr\avr\include\util\delay.h **** #include <inttypes.h>
  43:c:\users\james\mhv_avr\avr\include\util\delay.h **** #include <util/delay_basic.h>
  44:c:\users\james\mhv_avr\avr\include\util\delay.h **** #include <math.h>
  45:c:\users\james\mhv_avr\avr\include\util\delay.h **** 
  46:c:\users\james\mhv_avr\avr\include\util\delay.h **** /** \file */
  47:c:\users\james\mhv_avr\avr\include\util\delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  48:c:\users\james\mhv_avr\avr\include\util\delay.h ****     \code
  49:c:\users\james\mhv_avr\avr\include\util\delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  50:c:\users\james\mhv_avr\avr\include\util\delay.h ****     //#define F_CPU 14.7456E6
  51:c:\users\james\mhv_avr\avr\include\util\delay.h ****     #include <util/delay.h>
  52:c:\users\james\mhv_avr\avr\include\util\delay.h ****     \endcode
  53:c:\users\james\mhv_avr\avr\include\util\delay.h **** 
  54:c:\users\james\mhv_avr\avr\include\util\delay.h ****     \note As an alternative method, it is possible to pass the
  55:c:\users\james\mhv_avr\avr\include\util\delay.h ****     F_CPU macro down to the compiler from the Makefile.
  56:c:\users\james\mhv_avr\avr\include\util\delay.h ****     Obviously, in that case, no \c \#define statement should be
  57:c:\users\james\mhv_avr\avr\include\util\delay.h ****     used.
  58:c:\users\james\mhv_avr\avr\include\util\delay.h **** 
  59:c:\users\james\mhv_avr\avr\include\util\delay.h ****     The functions in this header file are wrappers around the basic
  60:c:\users\james\mhv_avr\avr\include\util\delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  61:c:\users\james\mhv_avr\avr\include\util\delay.h ****     convenience functions where actual time values can be specified
  62:c:\users\james\mhv_avr\avr\include\util\delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  63:c:\users\james\mhv_avr\avr\include\util\delay.h ****     that compile-time constant expressions will be eliminated by
  64:c:\users\james\mhv_avr\avr\include\util\delay.h ****     compiler optimization so floating-point expressions can be used
  65:c:\users\james\mhv_avr\avr\include\util\delay.h ****     to calculate the number of delay cycles needed based on the CPU
  66:c:\users\james\mhv_avr\avr\include\util\delay.h ****     frequency passed by the macro F_CPU.
  67:c:\users\james\mhv_avr\avr\include\util\delay.h **** 
  68:c:\users\james\mhv_avr\avr\include\util\delay.h ****     \note In order for these functions to work as intended, compiler
  69:c:\users\james\mhv_avr\avr\include\util\delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  70:c:\users\james\mhv_avr\avr\include\util\delay.h ****     <em>must</em> be an expression that is a known constant at
  71:c:\users\james\mhv_avr\avr\include\util\delay.h ****     compile-time.  If these requirements are not met, the resulting
  72:c:\users\james\mhv_avr\avr\include\util\delay.h ****     delay will be much longer (and basically unpredictable), and
  73:c:\users\james\mhv_avr\avr\include\util\delay.h ****     applications that otherwise do not use floating-point calculations
  74:c:\users\james\mhv_avr\avr\include\util\delay.h ****     will experience severe code bloat by the floating-point library
  75:c:\users\james\mhv_avr\avr\include\util\delay.h ****     routines linked into the application.
  76:c:\users\james\mhv_avr\avr\include\util\delay.h **** 
  77:c:\users\james\mhv_avr\avr\include\util\delay.h ****     The functions available allow the specification of microsecond, and
  78:c:\users\james\mhv_avr\avr\include\util\delay.h ****     millisecond delays directly, using the application-supplied macro
  79:c:\users\james\mhv_avr\avr\include\util\delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  80:c:\users\james\mhv_avr\avr\include\util\delay.h **** 
  81:c:\users\james\mhv_avr\avr\include\util\delay.h **** */
  82:c:\users\james\mhv_avr\avr\include\util\delay.h **** 
  83:c:\users\james\mhv_avr\avr\include\util\delay.h **** #if !defined(__DOXYGEN__)
  84:c:\users\james\mhv_avr\avr\include\util\delay.h **** static inline void _delay_us(double __us) __attribute__((always_inline));
  85:c:\users\james\mhv_avr\avr\include\util\delay.h **** static inline void _delay_ms(double __ms) __attribute__((always_inline));
  86:c:\users\james\mhv_avr\avr\include\util\delay.h **** #endif
  87:c:\users\james\mhv_avr\avr\include\util\delay.h **** 
  88:c:\users\james\mhv_avr\avr\include\util\delay.h **** #ifndef F_CPU
  89:c:\users\james\mhv_avr\avr\include\util\delay.h **** /* prevent compiler error by supplying a default */
  90:c:\users\james\mhv_avr\avr\include\util\delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  91:c:\users\james\mhv_avr\avr\include\util\delay.h **** # define F_CPU 1000000UL
  92:c:\users\james\mhv_avr\avr\include\util\delay.h **** #endif
  93:c:\users\james\mhv_avr\avr\include\util\delay.h **** 
  94:c:\users\james\mhv_avr\avr\include\util\delay.h **** #ifndef __OPTIMIZE__
  95:c:\users\james\mhv_avr\avr\include\util\delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
  96:c:\users\james\mhv_avr\avr\include\util\delay.h **** #endif
  97:c:\users\james\mhv_avr\avr\include\util\delay.h **** 
  98:c:\users\james\mhv_avr\avr\include\util\delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
  99:c:\users\james\mhv_avr\avr\include\util\delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 100:c:\users\james\mhv_avr\avr\include\util\delay.h ****   __STDC_HOSTED__
 101:c:\users\james\mhv_avr\avr\include\util\delay.h **** #  include <math.h>
 102:c:\users\james\mhv_avr\avr\include\util\delay.h **** #endif
 103:c:\users\james\mhv_avr\avr\include\util\delay.h **** 
 104:c:\users\james\mhv_avr\avr\include\util\delay.h **** /**
 105:c:\users\james\mhv_avr\avr\include\util\delay.h ****    \ingroup util_delay
 106:c:\users\james\mhv_avr\avr\include\util\delay.h **** 
 107:c:\users\james\mhv_avr\avr\include\util\delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 108:c:\users\james\mhv_avr\avr\include\util\delay.h **** 
 109:c:\users\james\mhv_avr\avr\include\util\delay.h ****    The macro F_CPU is supposed to be defined to a
 110:c:\users\james\mhv_avr\avr\include\util\delay.h ****    constant defining the CPU clock frequency (in Hertz).
 111:c:\users\james\mhv_avr\avr\include\util\delay.h **** 
 112:c:\users\james\mhv_avr\avr\include\util\delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 113:c:\users\james\mhv_avr\avr\include\util\delay.h **** 
 114:c:\users\james\mhv_avr\avr\include\util\delay.h ****    When the user request delay which exceed the maximum possible one,
 115:c:\users\james\mhv_avr\avr\include\util\delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 116:c:\users\james\mhv_avr\avr\include\util\delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 117:c:\users\james\mhv_avr\avr\include\util\delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 118:c:\users\james\mhv_avr\avr\include\util\delay.h ****    user will not be informed about decreased resolution.
 119:c:\users\james\mhv_avr\avr\include\util\delay.h **** 
 120:c:\users\james\mhv_avr\avr\include\util\delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles(unsigned long)
 121:c:\users\james\mhv_avr\avr\include\util\delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 122:c:\users\james\mhv_avr\avr\include\util\delay.h ****    values greater than the maximal possible delay, overflows results in
 123:c:\users\james\mhv_avr\avr\include\util\delay.h ****    no delay i.e., 0ms.
 124:c:\users\james\mhv_avr\avr\include\util\delay.h **** 
 125:c:\users\james\mhv_avr\avr\include\util\delay.h ****    Conversion of __us into clock cycles may not always result in integer.
 126:c:\users\james\mhv_avr\avr\include\util\delay.h ****    By default, the clock cycles rounded up to next integer. This ensures that
 127:c:\users\james\mhv_avr\avr\include\util\delay.h ****    the user gets atleast __us microseconds of delay.
 128:c:\users\james\mhv_avr\avr\include\util\delay.h **** 
 129:c:\users\james\mhv_avr\avr\include\util\delay.h ****    Alternatively, user can define __DELAY_ROUND_DOWN__ and __DELAY_ROUND_CLOSEST__
 130:c:\users\james\mhv_avr\avr\include\util\delay.h ****    to round down and round to closest integer.
 131:c:\users\james\mhv_avr\avr\include\util\delay.h **** 
 132:c:\users\james\mhv_avr\avr\include\util\delay.h ****    Note: The new implementation of _delay_ms(double __ms) with 
 133:c:\users\james\mhv_avr\avr\include\util\delay.h ****     __builtin_avr_delay_cycles(unsigned long) support is not backward compatible. 
 134:c:\users\james\mhv_avr\avr\include\util\delay.h ****    User can define __DELAY_BACKWARD_COMPATIBLE__ to get a backward compatible delay.
 135:c:\users\james\mhv_avr\avr\include\util\delay.h ****    Also, the backward compatible
 136:c:\users\james\mhv_avr\avr\include\util\delay.h ****    algorithm will be chosen if the code is compiled in a <em>freestanding
 137:c:\users\james\mhv_avr\avr\include\util\delay.h ****    environment</em> (GCC option \c -ffreestanding), as the math functions
 138:c:\users\james\mhv_avr\avr\include\util\delay.h ****    required for rounding are not available to the compiler then.
 139:c:\users\james\mhv_avr\avr\include\util\delay.h **** 
 140:c:\users\james\mhv_avr\avr\include\util\delay.h ****  */
 141:c:\users\james\mhv_avr\avr\include\util\delay.h **** void
 142:c:\users\james\mhv_avr\avr\include\util\delay.h **** _delay_ms(double __ms)
 143:c:\users\james\mhv_avr\avr\include\util\delay.h **** {
 144:c:\users\james\mhv_avr\avr\include\util\delay.h **** 	double __tmp ; 
 145:c:\users\james\mhv_avr\avr\include\util\delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 146:c:\users\james\mhv_avr\avr\include\util\delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 147:c:\users\james\mhv_avr\avr\include\util\delay.h ****   __STDC_HOSTED__
 148:c:\users\james\mhv_avr\avr\include\util\delay.h **** 	uint32_t __ticks_dc;
 149:c:\users\james\mhv_avr\avr\include\util\delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 150:c:\users\james\mhv_avr\avr\include\util\delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 151:c:\users\james\mhv_avr\avr\include\util\delay.h **** 
 152:c:\users\james\mhv_avr\avr\include\util\delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 153:c:\users\james\mhv_avr\avr\include\util\delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 154:c:\users\james\mhv_avr\avr\include\util\delay.h **** 
 155:c:\users\james\mhv_avr\avr\include\util\delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 156:c:\users\james\mhv_avr\avr\include\util\delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 157:c:\users\james\mhv_avr\avr\include\util\delay.h **** 
 158:c:\users\james\mhv_avr\avr\include\util\delay.h **** 	#else
 159:c:\users\james\mhv_avr\avr\include\util\delay.h **** 		//round up by default
 160:c:\users\james\mhv_avr\avr\include\util\delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 161:c:\users\james\mhv_avr\avr\include\util\delay.h **** 	#endif
 162:c:\users\james\mhv_avr\avr\include\util\delay.h **** 
 163:c:\users\james\mhv_avr\avr\include\util\delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 244               		.loc 2 163 0
 245 00de 8FE3      		ldi r24,lo8(-25537)
 246 00e0 9CE9      		ldi r25,hi8(-25537)
 247 00e2 0197      		1: sbiw r24,1
 248 00e4 01F4      		brne 1b
 249 00e6 00C0      		rjmp .
 250 00e8 0000      		nop
 251 00ea 0895      		ret
 252               	.LBE5:
 253               	.LBE4:
 254               		.cfi_endproc
 255               	.LFE110:
 257               		.section	.text.unicode_input_finish,"ax",@progbits
 258               		.weak	unicode_input_finish
 260               	unicode_input_finish:
 261               	.LFB111:
  65:quantum/process_keycode/process_unicode.c ****   }
  66:quantum/process_keycode/process_unicode.c ****   wait_ms(UNICODE_TYPE_DELAY);
  67:quantum/process_keycode/process_unicode.c **** }
  68:quantum/process_keycode/process_unicode.c **** 
  69:quantum/process_keycode/process_unicode.c **** __attribute__((weak))
  70:quantum/process_keycode/process_unicode.c **** void unicode_input_finish (void) {
 262               		.loc 1 70 0
 263               		.cfi_startproc
 264               	/* prologue: function */
 265               	/* frame size = 0 */
 266               	/* stack size = 0 */
 267               	.L__stack_usage = 0
  71:quantum/process_keycode/process_unicode.c ****   switch(input_mode) {
 268               		.loc 1 71 0
 269 0000 8091 0000 		lds r24,input_mode
 270 0004 8130      		cpi r24,lo8(1)
 271 0006 01F0      		breq .L46
 272 0008 00F0      		brlo .L47
 273 000a 8230      		cpi r24,lo8(2)
 274 000c 01F4      		brne .L45
 275               	.L47:
  72:quantum/process_keycode/process_unicode.c ****     case UC_OSX:
  73:quantum/process_keycode/process_unicode.c ****     case UC_WIN:
  74:quantum/process_keycode/process_unicode.c ****       unregister_code(KC_LALT);
 276               		.loc 1 74 0
 277 000e 82EE      		ldi r24,lo8(-30)
 278 0010 00C0      		rjmp .L80
 279               	.L46:
  75:quantum/process_keycode/process_unicode.c ****       break;
  76:quantum/process_keycode/process_unicode.c ****     case UC_LNX:
  77:quantum/process_keycode/process_unicode.c ****       register_code(KC_SPC);
 280               		.loc 1 77 0
 281 0012 8CE2      		ldi r24,lo8(44)
 282 0014 0E94 0000 		call register_code
 283               	.LVL23:
  78:quantum/process_keycode/process_unicode.c ****       unregister_code(KC_SPC);
 284               		.loc 1 78 0
 285 0018 8CE2      		ldi r24,lo8(44)
 286               	.L80:
 287 001a 0E94 0000 		call unregister_code
 288               	.LVL24:
 289               	.L45:
  79:quantum/process_keycode/process_unicode.c ****       break;
  80:quantum/process_keycode/process_unicode.c ****   }
  81:quantum/process_keycode/process_unicode.c **** 
  82:quantum/process_keycode/process_unicode.c ****   // reregister previously set mods
  83:quantum/process_keycode/process_unicode.c ****   if (mods & MOD_BIT(KC_LSFT)) register_code(KC_LSFT);
 290               		.loc 1 83 0
 291 001e 8091 0000 		lds r24,mods
 292 0022 81FF      		sbrs r24,1
 293 0024 00C0      		rjmp .L48
 294               		.loc 1 83 0 is_stmt 0 discriminator 1
 295 0026 81EE      		ldi r24,lo8(-31)
 296 0028 0E94 0000 		call register_code
 297               	.LVL25:
 298               	.L48:
  84:quantum/process_keycode/process_unicode.c ****   if (mods & MOD_BIT(KC_RSFT)) register_code(KC_RSFT);
 299               		.loc 1 84 0 is_stmt 1
 300 002c 8091 0000 		lds r24,mods
 301 0030 85FF      		sbrs r24,5
 302 0032 00C0      		rjmp .L49
 303               		.loc 1 84 0 is_stmt 0 discriminator 1
 304 0034 85EE      		ldi r24,lo8(-27)
 305 0036 0E94 0000 		call register_code
 306               	.LVL26:
 307               	.L49:
  85:quantum/process_keycode/process_unicode.c ****   if (mods & MOD_BIT(KC_LCTL)) register_code(KC_LCTL);
 308               		.loc 1 85 0 is_stmt 1
 309 003a 8091 0000 		lds r24,mods
 310 003e 80FF      		sbrs r24,0
 311 0040 00C0      		rjmp .L50
 312               		.loc 1 85 0 is_stmt 0 discriminator 1
 313 0042 80EE      		ldi r24,lo8(-32)
 314 0044 0E94 0000 		call register_code
 315               	.LVL27:
 316               	.L50:
  86:quantum/process_keycode/process_unicode.c ****   if (mods & MOD_BIT(KC_RCTL)) register_code(KC_RCTL);
 317               		.loc 1 86 0 is_stmt 1
 318 0048 8091 0000 		lds r24,mods
 319 004c 84FF      		sbrs r24,4
 320 004e 00C0      		rjmp .L51
 321               		.loc 1 86 0 is_stmt 0 discriminator 1
 322 0050 84EE      		ldi r24,lo8(-28)
 323 0052 0E94 0000 		call register_code
 324               	.LVL28:
 325               	.L51:
  87:quantum/process_keycode/process_unicode.c ****   if (mods & MOD_BIT(KC_LALT)) register_code(KC_LALT);
 326               		.loc 1 87 0 is_stmt 1
 327 0056 8091 0000 		lds r24,mods
 328 005a 82FF      		sbrs r24,2
 329 005c 00C0      		rjmp .L52
 330               		.loc 1 87 0 is_stmt 0 discriminator 1
 331 005e 82EE      		ldi r24,lo8(-30)
 332 0060 0E94 0000 		call register_code
 333               	.LVL29:
 334               	.L52:
  88:quantum/process_keycode/process_unicode.c ****   if (mods & MOD_BIT(KC_RALT)) register_code(KC_RALT);
 335               		.loc 1 88 0 is_stmt 1
 336 0064 8091 0000 		lds r24,mods
 337 0068 86FF      		sbrs r24,6
 338 006a 00C0      		rjmp .L53
 339               		.loc 1 88 0 is_stmt 0 discriminator 1
 340 006c 86EE      		ldi r24,lo8(-26)
 341 006e 0E94 0000 		call register_code
 342               	.LVL30:
 343               	.L53:
  89:quantum/process_keycode/process_unicode.c ****   if (mods & MOD_BIT(KC_LGUI)) register_code(KC_LGUI);
 344               		.loc 1 89 0 is_stmt 1
 345 0072 8091 0000 		lds r24,mods
 346 0076 83FF      		sbrs r24,3
 347 0078 00C0      		rjmp .L54
 348               		.loc 1 89 0 is_stmt 0 discriminator 1
 349 007a 83EE      		ldi r24,lo8(-29)
 350 007c 0E94 0000 		call register_code
 351               	.LVL31:
 352               	.L54:
  90:quantum/process_keycode/process_unicode.c ****   if (mods & MOD_BIT(KC_RGUI)) register_code(KC_RGUI);
 353               		.loc 1 90 0 is_stmt 1
 354 0080 8091 0000 		lds r24,mods
 355 0084 87FF      		sbrs r24,7
 356 0086 00C0      		rjmp .L44
 357               		.loc 1 90 0 is_stmt 0 discriminator 1
 358 0088 87EE      		ldi r24,lo8(-25)
 359 008a 0C94 0000 		jmp register_code
 360               	.LVL32:
 361               	.L44:
 362 008e 0895      		ret
 363               		.cfi_endproc
 364               	.LFE111:
 366               		.section	.text.register_hex,"ax",@progbits
 367               	.global	register_hex
 369               	register_hex:
 370               	.LFB112:
  91:quantum/process_keycode/process_unicode.c **** }
  92:quantum/process_keycode/process_unicode.c **** 
  93:quantum/process_keycode/process_unicode.c **** void register_hex(uint16_t hex) {
 371               		.loc 1 93 0 is_stmt 1
 372               		.cfi_startproc
 373               	.LVL33:
 374 0000 FF92      		push r15
 375               	.LCFI0:
 376               		.cfi_def_cfa_offset 3
 377               		.cfi_offset 15, -2
 378 0002 0F93      		push r16
 379               	.LCFI1:
 380               		.cfi_def_cfa_offset 4
 381               		.cfi_offset 16, -3
 382 0004 1F93      		push r17
 383               	.LCFI2:
 384               		.cfi_def_cfa_offset 5
 385               		.cfi_offset 17, -4
 386 0006 CF93      		push r28
 387               	.LCFI3:
 388               		.cfi_def_cfa_offset 6
 389               		.cfi_offset 28, -5
 390 0008 DF93      		push r29
 391               	.LCFI4:
 392               		.cfi_def_cfa_offset 7
 393               		.cfi_offset 29, -6
 394               	/* prologue: function */
 395               	/* frame size = 0 */
 396               	/* stack size = 5 */
 397               	.L__stack_usage = 5
 398 000a 8C01      		movw r16,r24
 399               	.LVL34:
 400               		.loc 1 93 0
 401 000c CCE0      		ldi r28,lo8(12)
 402 000e D0E0      		ldi r29,0
 403               	.LVL35:
 404               	.L83:
 405               	.LBB6:
 406               	.LBB7:
  94:quantum/process_keycode/process_unicode.c ****   for(int i = 3; i >= 0; i--) {
  95:quantum/process_keycode/process_unicode.c ****     uint8_t digit = ((hex >> (i*4)) & 0xF);
 407               		.loc 1 95 0 discriminator 2
 408 0010 C801      		movw r24,r16
 409 0012 0C2E      		mov r0,r28
 410 0014 00C0      		rjmp 2f
 411               		1:
 412 0016 9695      		lsr r25
 413 0018 8795      		ror r24
 414               		2:
 415 001a 0A94      		dec r0
 416 001c 02F4      		brpl 1b
 417 001e 282F      		mov r18,r24
 418 0020 2F70      		andi r18,lo8(15)
 419 0022 F22E      		mov r15,r18
 420               	.LVL36:
  96:quantum/process_keycode/process_unicode.c ****     register_code(hex_to_keycode(digit));
 421               		.loc 1 96 0 discriminator 2
 422 0024 822F      		mov r24,r18
 423               	.LVL37:
 424 0026 0E94 0000 		call hex_to_keycode
 425               	.LVL38:
 426 002a 0E94 0000 		call register_code
 427               	.LVL39:
  97:quantum/process_keycode/process_unicode.c ****     unregister_code(hex_to_keycode(digit));
 428               		.loc 1 97 0 discriminator 2
 429 002e 8F2D      		mov r24,r15
 430 0030 0E94 0000 		call hex_to_keycode
 431               	.LVL40:
 432 0034 0E94 0000 		call unregister_code
 433               	.LVL41:
 434 0038 2497      		sbiw r28,4
 435               	.LVL42:
 436               	.LBE7:
  94:quantum/process_keycode/process_unicode.c ****   for(int i = 3; i >= 0; i--) {
 437               		.loc 1 94 0 discriminator 2
 438 003a CC3F      		cpi r28,-4
 439 003c 8FEF      		ldi r24,-1
 440 003e D807      		cpc r29,r24
 441 0040 01F4      		brne .L83
 442               	/* epilogue start */
 443               	.LBE6:
  98:quantum/process_keycode/process_unicode.c ****   }
  99:quantum/process_keycode/process_unicode.c **** }
 444               		.loc 1 99 0
 445 0042 DF91      		pop r29
 446 0044 CF91      		pop r28
 447 0046 1F91      		pop r17
 448 0048 0F91      		pop r16
 449               	.LVL43:
 450 004a FF90      		pop r15
 451 004c 0895      		ret
 452               		.cfi_endproc
 453               	.LFE112:
 455               		.section	.text.process_unicode,"ax",@progbits
 456               	.global	process_unicode
 458               	process_unicode:
 459               	.LFB113:
 100:quantum/process_keycode/process_unicode.c **** 
 101:quantum/process_keycode/process_unicode.c **** bool process_unicode(uint16_t keycode, keyrecord_t *record) {
 460               		.loc 1 101 0
 461               		.cfi_startproc
 462               	.LVL44:
 463 0000 CF93      		push r28
 464               	.LCFI5:
 465               		.cfi_def_cfa_offset 3
 466               		.cfi_offset 28, -2
 467 0002 DF93      		push r29
 468               	.LCFI6:
 469               		.cfi_def_cfa_offset 4
 470               		.cfi_offset 29, -3
 471               	/* prologue: function */
 472               	/* frame size = 0 */
 473               	/* stack size = 2 */
 474               	.L__stack_usage = 2
 475 0004 EC01      		movw r28,r24
 102:quantum/process_keycode/process_unicode.c ****   if (keycode > QK_UNICODE && record->event.pressed) {
 476               		.loc 1 102 0
 477 0006 C130      		cpi r28,1
 478 0008 80E8      		ldi r24,-128
 479 000a D807      		cpc r29,r24
 480               	.LVL45:
 481 000c 00F0      		brlo .L85
 482               		.loc 1 102 0 is_stmt 0 discriminator 1
 483 000e FB01      		movw r30,r22
 484 0010 8281      		ldd r24,Z+2
 485 0012 8823      		tst r24
 486 0014 01F0      		breq .L85
 487               	.LVL46:
 488               	.LBB8:
 103:quantum/process_keycode/process_unicode.c ****     uint16_t unicode = keycode & 0x7FFF;
 104:quantum/process_keycode/process_unicode.c ****     unicode_input_start();
 489               		.loc 1 104 0 is_stmt 1
 490 0016 0E94 0000 		call unicode_input_start
 491               	.LVL47:
 105:quantum/process_keycode/process_unicode.c ****     register_hex(unicode);
 492               		.loc 1 105 0
 493 001a CE01      		movw r24,r28
 494 001c 9F77      		andi r25,127
 495               	.LVL48:
 496 001e 0E94 0000 		call register_hex
 497               	.LVL49:
 106:quantum/process_keycode/process_unicode.c ****     unicode_input_finish();
 498               		.loc 1 106 0
 499 0022 0E94 0000 		call unicode_input_finish
 500               	.LVL50:
 501               	.L85:
 502               	.LBE8:
 107:quantum/process_keycode/process_unicode.c ****   }
 108:quantum/process_keycode/process_unicode.c ****   return true;
 109:quantum/process_keycode/process_unicode.c **** }
 503               		.loc 1 109 0
 504 0026 81E0      		ldi r24,lo8(1)
 505               	/* epilogue start */
 506 0028 DF91      		pop r29
 507 002a CF91      		pop r28
 508               	.LVL51:
 509 002c 0895      		ret
 510               		.cfi_endproc
 511               	.LFE113:
 513               		.comm	mods,1,1
 514               		.section	.bss.input_mode,"aw",@nobits
 517               	input_mode:
 518 0000 00        		.zero	1
 519               		.text
 520               	.Letext0:
 521               		.file 3 "c:\\users\\james\\mhv_avr\\avr\\include\\stdint.h"
 522               		.file 4 "./tmk_core/common/keyboard.h"
 523               		.file 5 "./tmk_core/common/action.h"
 524               		.file 6 "./tmk_core/common/report.h"
 525               		.file 7 "./tmk_core/common/keycode.h"
 526               		.file 8 "./quantum/quantum_keycodes.h"
 527               		.file 9 "./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/USBTask.h"
 528               		.file 10 "./tmk_core/common/action_util.h"
DEFINED SYMBOLS
                            *ABS*:00000000 process_unicode.c
C:\Users\James\AppData\Local\Temp\cckr1BY3.s:2      *ABS*:0000003e __SP_H__
C:\Users\James\AppData\Local\Temp\cckr1BY3.s:3      *ABS*:0000003d __SP_L__
C:\Users\James\AppData\Local\Temp\cckr1BY3.s:4      *ABS*:0000003f __SREG__
C:\Users\James\AppData\Local\Temp\cckr1BY3.s:5      *ABS*:00000000 __tmp_reg__
C:\Users\James\AppData\Local\Temp\cckr1BY3.s:6      *ABS*:00000001 __zero_reg__
C:\Users\James\AppData\Local\Temp\cckr1BY3.s:13     .text.hex_to_keycode:00000000 hex_to_keycode
C:\Users\James\AppData\Local\Temp\cckr1BY3.s:51     .text.set_unicode_input_mode:00000000 set_unicode_input_mode
C:\Users\James\AppData\Local\Temp\cckr1BY3.s:517    .bss.input_mode:00000000 input_mode
C:\Users\James\AppData\Local\Temp\cckr1BY3.s:69     .text.get_unicode_input_mode:00000000 get_unicode_input_mode
C:\Users\James\AppData\Local\Temp\cckr1BY3.s:86     .text.unicode_input_start:00000000 unicode_input_start
                            *COM*:00000001 mods
C:\Users\James\AppData\Local\Temp\cckr1BY3.s:260    .text.unicode_input_finish:00000000 unicode_input_finish
C:\Users\James\AppData\Local\Temp\cckr1BY3.s:369    .text.register_hex:00000000 register_hex
C:\Users\James\AppData\Local\Temp\cckr1BY3.s:458    .text.process_unicode:00000000 process_unicode

UNDEFINED SYMBOLS
keyboard_report
unregister_code
register_code
__do_clear_bss
