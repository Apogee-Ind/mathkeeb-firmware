   1               		.file	"matrix.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.matrix_init_user,"ax",@progbits
  11               		.weak	matrix_init_user
  13               	matrix_init_user:
  14               	.LFB10:
  15               		.file 1 "quantum/matrix.c"
   1:quantum/matrix.c **** /*
   2:quantum/matrix.c **** Copyright 2012 Jun Wako
   3:quantum/matrix.c **** Copyright 2014 Jack Humbert
   4:quantum/matrix.c **** 
   5:quantum/matrix.c **** This program is free software: you can redistribute it and/or modify
   6:quantum/matrix.c **** it under the terms of the GNU General Public License as published by
   7:quantum/matrix.c **** the Free Software Foundation, either version 2 of the License, or
   8:quantum/matrix.c **** (at your option) any later version.
   9:quantum/matrix.c **** 
  10:quantum/matrix.c **** This program is distributed in the hope that it will be useful,
  11:quantum/matrix.c **** but WITHOUT ANY WARRANTY; without even the implied warranty of
  12:quantum/matrix.c **** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  13:quantum/matrix.c **** GNU General Public License for more details.
  14:quantum/matrix.c **** 
  15:quantum/matrix.c **** You should have received a copy of the GNU General Public License
  16:quantum/matrix.c **** along with this program.  If not, see <http://www.gnu.org/licenses/>.
  17:quantum/matrix.c **** */
  18:quantum/matrix.c **** #include <stdint.h>
  19:quantum/matrix.c **** #include <stdbool.h>
  20:quantum/matrix.c **** #if defined(__AVR__)
  21:quantum/matrix.c **** #include <avr/io.h>
  22:quantum/matrix.c **** #endif
  23:quantum/matrix.c **** #include "wait.h"
  24:quantum/matrix.c **** #include "print.h"
  25:quantum/matrix.c **** #include "debug.h"
  26:quantum/matrix.c **** #include "util.h"
  27:quantum/matrix.c **** #include "matrix.h"
  28:quantum/matrix.c **** #include "timer.h"
  29:quantum/matrix.c **** 
  30:quantum/matrix.c **** 
  31:quantum/matrix.c **** /* Set 0 if debouncing isn't needed */
  32:quantum/matrix.c **** 
  33:quantum/matrix.c **** #ifndef DEBOUNCING_DELAY
  34:quantum/matrix.c **** #   define DEBOUNCING_DELAY 5
  35:quantum/matrix.c **** #endif
  36:quantum/matrix.c **** 
  37:quantum/matrix.c **** #if (DEBOUNCING_DELAY > 0)
  38:quantum/matrix.c ****     static uint16_t debouncing_time;
  39:quantum/matrix.c ****     static bool debouncing = false;
  40:quantum/matrix.c **** #endif
  41:quantum/matrix.c **** 
  42:quantum/matrix.c **** #if (MATRIX_COLS <= 8)
  43:quantum/matrix.c **** #    define print_matrix_header()  print("\nr/c 01234567\n")
  44:quantum/matrix.c **** #    define print_matrix_row(row)  print_bin_reverse8(matrix_get_row(row))
  45:quantum/matrix.c **** #    define matrix_bitpop(i)       bitpop(matrix[i])
  46:quantum/matrix.c **** #    define ROW_SHIFTER ((uint8_t)1)
  47:quantum/matrix.c **** #elif (MATRIX_COLS <= 16)
  48:quantum/matrix.c **** #    define print_matrix_header()  print("\nr/c 0123456789ABCDEF\n")
  49:quantum/matrix.c **** #    define print_matrix_row(row)  print_bin_reverse16(matrix_get_row(row))
  50:quantum/matrix.c **** #    define matrix_bitpop(i)       bitpop16(matrix[i])
  51:quantum/matrix.c **** #    define ROW_SHIFTER ((uint16_t)1)
  52:quantum/matrix.c **** #elif (MATRIX_COLS <= 32)
  53:quantum/matrix.c **** #    define print_matrix_header()  print("\nr/c 0123456789ABCDEF0123456789ABCDEF\n")
  54:quantum/matrix.c **** #    define print_matrix_row(row)  print_bin_reverse32(matrix_get_row(row))
  55:quantum/matrix.c **** #    define matrix_bitpop(i)       bitpop32(matrix[i])
  56:quantum/matrix.c **** #    define ROW_SHIFTER  ((uint32_t)1)
  57:quantum/matrix.c **** #endif
  58:quantum/matrix.c **** 
  59:quantum/matrix.c **** #ifdef MATRIX_MASKED
  60:quantum/matrix.c ****     extern const matrix_row_t matrix_mask[];
  61:quantum/matrix.c **** #endif
  62:quantum/matrix.c **** 
  63:quantum/matrix.c **** static const uint8_t row_pins[MATRIX_ROWS] = MATRIX_ROW_PINS;
  64:quantum/matrix.c **** static const uint8_t col_pins[MATRIX_COLS] = MATRIX_COL_PINS;
  65:quantum/matrix.c **** 
  66:quantum/matrix.c **** /* matrix state(1:on, 0:off) */
  67:quantum/matrix.c **** static matrix_row_t matrix[MATRIX_ROWS];
  68:quantum/matrix.c **** 
  69:quantum/matrix.c **** static matrix_row_t matrix_raw[MATRIX_ROWS];
  70:quantum/matrix.c **** static matrix_row_t matrix_debouncing[MATRIX_ROWS];
  71:quantum/matrix.c **** 
  72:quantum/matrix.c **** 
  73:quantum/matrix.c **** #if (DIODE_DIRECTION == COL2ROW)
  74:quantum/matrix.c ****     static void init_cols(void);
  75:quantum/matrix.c ****     static bool read_cols_on_row(matrix_row_t current_matrix[], uint8_t current_row);
  76:quantum/matrix.c ****     static void unselect_rows(void);
  77:quantum/matrix.c ****     static void select_row(uint8_t row);
  78:quantum/matrix.c ****     static void unselect_row(uint8_t row);
  79:quantum/matrix.c **** #else // ROW2COL
  80:quantum/matrix.c ****     static void init_rows(void);
  81:quantum/matrix.c ****     static bool read_rows_on_col(matrix_row_t current_matrix[], uint8_t current_col);
  82:quantum/matrix.c ****     static void unselect_cols(void);
  83:quantum/matrix.c ****     static void unselect_col(uint8_t col);
  84:quantum/matrix.c ****     static void select_col(uint8_t col);
  85:quantum/matrix.c **** #endif
  86:quantum/matrix.c **** 
  87:quantum/matrix.c **** __attribute__ ((weak))
  88:quantum/matrix.c **** void matrix_init_quantum(void) {
  89:quantum/matrix.c ****     matrix_init_kb();
  90:quantum/matrix.c **** }
  91:quantum/matrix.c **** 
  92:quantum/matrix.c **** __attribute__ ((weak))
  93:quantum/matrix.c **** void matrix_scan_quantum(void) {
  94:quantum/matrix.c ****     matrix_scan_kb();
  95:quantum/matrix.c **** }
  96:quantum/matrix.c **** 
  97:quantum/matrix.c **** __attribute__ ((weak))
  98:quantum/matrix.c **** void matrix_init_kb(void) {
  99:quantum/matrix.c ****     matrix_init_user();
 100:quantum/matrix.c **** }
 101:quantum/matrix.c **** 
 102:quantum/matrix.c **** __attribute__ ((weak))
 103:quantum/matrix.c **** void matrix_scan_kb(void) {
 104:quantum/matrix.c ****     matrix_scan_user();
 105:quantum/matrix.c **** }
 106:quantum/matrix.c **** 
 107:quantum/matrix.c **** __attribute__ ((weak))
 108:quantum/matrix.c **** void matrix_init_user(void) {
  16               		.loc 1 108 0
  17               		.cfi_startproc
  18               	/* prologue: function */
  19               	/* frame size = 0 */
  20               	/* stack size = 0 */
  21               	.L__stack_usage = 0
  22 0000 0895      		ret
  23               		.cfi_endproc
  24               	.LFE10:
  26               		.section	.text.matrix_init_kb,"ax",@progbits
  27               		.weak	matrix_init_kb
  29               	matrix_init_kb:
  30               	.LFB8:
  98:quantum/matrix.c ****     matrix_init_user();
  31               		.loc 1 98 0
  32               		.cfi_startproc
  33               	/* prologue: function */
  34               	/* frame size = 0 */
  35               	/* stack size = 0 */
  36               	.L__stack_usage = 0
  99:quantum/matrix.c **** }
  37               		.loc 1 99 0
  38 0000 0C94 0000 		jmp matrix_init_user
  39               	.LVL0:
  40               		.cfi_endproc
  41               	.LFE8:
  43               		.section	.text.matrix_init_quantum,"ax",@progbits
  44               		.weak	matrix_init_quantum
  46               	matrix_init_quantum:
  47               	.LFB6:
  88:quantum/matrix.c ****     matrix_init_kb();
  48               		.loc 1 88 0
  49               		.cfi_startproc
  50               	/* prologue: function */
  51               	/* frame size = 0 */
  52               	/* stack size = 0 */
  53               	.L__stack_usage = 0
  89:quantum/matrix.c **** }
  54               		.loc 1 89 0
  55 0000 0C94 0000 		jmp matrix_init_kb
  56               	.LVL1:
  57               		.cfi_endproc
  58               	.LFE6:
  60               		.section	.text.matrix_scan_user,"ax",@progbits
  61               		.weak	matrix_scan_user
  63               	matrix_scan_user:
  64               	.LFB11:
 109:quantum/matrix.c **** }
 110:quantum/matrix.c **** 
 111:quantum/matrix.c **** __attribute__ ((weak))
 112:quantum/matrix.c **** void matrix_scan_user(void) {
  65               		.loc 1 112 0
  66               		.cfi_startproc
  67               	/* prologue: function */
  68               	/* frame size = 0 */
  69               	/* stack size = 0 */
  70               	.L__stack_usage = 0
  71 0000 0895      		ret
  72               		.cfi_endproc
  73               	.LFE11:
  75               		.section	.text.matrix_scan_kb,"ax",@progbits
  76               		.weak	matrix_scan_kb
  78               	matrix_scan_kb:
  79               	.LFB9:
 103:quantum/matrix.c ****     matrix_scan_user();
  80               		.loc 1 103 0
  81               		.cfi_startproc
  82               	/* prologue: function */
  83               	/* frame size = 0 */
  84               	/* stack size = 0 */
  85               	.L__stack_usage = 0
 104:quantum/matrix.c **** }
  86               		.loc 1 104 0
  87 0000 0C94 0000 		jmp matrix_scan_user
  88               	.LVL2:
  89               		.cfi_endproc
  90               	.LFE9:
  92               		.section	.text.matrix_scan_quantum,"ax",@progbits
  93               		.weak	matrix_scan_quantum
  95               	matrix_scan_quantum:
  96               	.LFB7:
  93:quantum/matrix.c ****     matrix_scan_kb();
  97               		.loc 1 93 0
  98               		.cfi_startproc
  99               	/* prologue: function */
 100               	/* frame size = 0 */
 101               	/* stack size = 0 */
 102               	.L__stack_usage = 0
  94:quantum/matrix.c **** }
 103               		.loc 1 94 0
 104 0000 0C94 0000 		jmp matrix_scan_kb
 105               	.LVL3:
 106               		.cfi_endproc
 107               	.LFE7:
 109               		.section	.text.matrix_rows,"ax",@progbits
 110               	.global	matrix_rows
 112               	matrix_rows:
 113               	.LFB12:
 113:quantum/matrix.c **** }
 114:quantum/matrix.c **** 
 115:quantum/matrix.c **** inline
 116:quantum/matrix.c **** uint8_t matrix_rows(void) {
 114               		.loc 1 116 0
 115               		.cfi_startproc
 116               	/* prologue: function */
 117               	/* frame size = 0 */
 118               	/* stack size = 0 */
 119               	.L__stack_usage = 0
 117:quantum/matrix.c ****     return MATRIX_ROWS;
 118:quantum/matrix.c **** }
 120               		.loc 1 118 0
 121 0000 87E0      		ldi r24,lo8(7)
 122 0002 0895      		ret
 123               		.cfi_endproc
 124               	.LFE12:
 126               		.section	.text.matrix_cols,"ax",@progbits
 127               	.global	matrix_cols
 129               	matrix_cols:
 130               	.LFB13:
 119:quantum/matrix.c **** 
 120:quantum/matrix.c **** inline
 121:quantum/matrix.c **** uint8_t matrix_cols(void) {
 131               		.loc 1 121 0
 132               		.cfi_startproc
 133               	/* prologue: function */
 134               	/* frame size = 0 */
 135               	/* stack size = 0 */
 136               	.L__stack_usage = 0
 122:quantum/matrix.c ****     return MATRIX_COLS;
 123:quantum/matrix.c **** }
 137               		.loc 1 123 0
 138 0000 88E0      		ldi r24,lo8(8)
 139 0002 0895      		ret
 140               		.cfi_endproc
 141               	.LFE13:
 143               		.section	.text.matrix_init,"ax",@progbits
 144               	.global	matrix_init
 146               	matrix_init:
 147               	.LFB14:
 124:quantum/matrix.c **** 
 125:quantum/matrix.c **** // void matrix_power_up(void) {
 126:quantum/matrix.c **** // #if (DIODE_DIRECTION == COL2ROW)
 127:quantum/matrix.c **** //     for (int8_t r = MATRIX_ROWS - 1; r >= 0; --r) {
 128:quantum/matrix.c **** //         /* DDRxn */
 129:quantum/matrix.c **** //         _SFR_IO8((row_pins[r] >> 4) + 1) |= _BV(row_pins[r] & 0xF);
 130:quantum/matrix.c **** //         toggle_row(r);
 131:quantum/matrix.c **** //     }
 132:quantum/matrix.c **** //     for (int8_t c = MATRIX_COLS - 1; c >= 0; --c) {
 133:quantum/matrix.c **** //         /* PORTxn */
 134:quantum/matrix.c **** //         _SFR_IO8((col_pins[c] >> 4) + 2) |= _BV(col_pins[c] & 0xF);
 135:quantum/matrix.c **** //     }
 136:quantum/matrix.c **** // #else
 137:quantum/matrix.c **** //     for (int8_t c = MATRIX_COLS - 1; c >= 0; --c) {
 138:quantum/matrix.c **** //         /* DDRxn */
 139:quantum/matrix.c **** //         _SFR_IO8((col_pins[c] >> 4) + 1) |= _BV(col_pins[c] & 0xF);
 140:quantum/matrix.c **** //         toggle_col(c);
 141:quantum/matrix.c **** //     }
 142:quantum/matrix.c **** //     for (int8_t r = MATRIX_ROWS - 1; r >= 0; --r) {
 143:quantum/matrix.c **** //         /* PORTxn */
 144:quantum/matrix.c **** //         _SFR_IO8((row_pins[r] >> 4) + 2) |= _BV(row_pins[r] & 0xF);
 145:quantum/matrix.c **** //     }
 146:quantum/matrix.c **** // #endif
 147:quantum/matrix.c **** // }
 148:quantum/matrix.c **** 
 149:quantum/matrix.c **** void matrix_init(void) {
 148               		.loc 1 149 0
 149               		.cfi_startproc
 150 0000 CF93      		push r28
 151               	.LCFI0:
 152               		.cfi_def_cfa_offset 3
 153               		.cfi_offset 28, -2
 154 0002 DF93      		push r29
 155               	.LCFI1:
 156               		.cfi_def_cfa_offset 4
 157               		.cfi_offset 29, -3
 158               	/* prologue: function */
 159               	/* frame size = 0 */
 160               	/* stack size = 2 */
 161               	.L__stack_usage = 2
 150:quantum/matrix.c **** 
 151:quantum/matrix.c ****     // To use PORTF disable JTAG with writing JTD bit twice within four cycles.
 152:quantum/matrix.c ****     #if  (defined(__AVR_AT90USB1286__) || defined(__AVR_AT90USB1287__) || defined(__AVR_ATmega32U4_
 153:quantum/matrix.c ****         MCUCR |= _BV(JTD);
 162               		.loc 1 153 0
 163 0004 85B7      		in r24,0x35
 164 0006 8068      		ori r24,lo8(-128)
 165 0008 85BF      		out 0x35,r24
 154:quantum/matrix.c ****         MCUCR |= _BV(JTD);
 166               		.loc 1 154 0
 167 000a 85B7      		in r24,0x35
 168 000c 8068      		ori r24,lo8(-128)
 169 000e 85BF      		out 0x35,r24
 170               	.LVL4:
 171 0010 A0E0      		ldi r26,lo8(row_pins)
 172 0012 B0E0      		ldi r27,hi8(row_pins)
 173               	.LBB19:
 174               	.LBB20:
 175               	.LBB21:
 155:quantum/matrix.c ****     #endif
 156:quantum/matrix.c **** 
 157:quantum/matrix.c ****     // initialize row and col
 158:quantum/matrix.c **** #if (DIODE_DIRECTION == COL2ROW)
 159:quantum/matrix.c ****     unselect_rows();
 160:quantum/matrix.c ****     init_cols();
 161:quantum/matrix.c **** #else // ROW2COL
 162:quantum/matrix.c ****     unselect_cols();
 163:quantum/matrix.c ****     init_rows();
 164:quantum/matrix.c **** #endif
 165:quantum/matrix.c **** 
 166:quantum/matrix.c ****     // initialize matrix state: all keys off
 167:quantum/matrix.c ****     for (uint8_t i=0; i < MATRIX_ROWS; i++) {
 168:quantum/matrix.c ****         matrix[i] = 0;
 169:quantum/matrix.c ****         matrix_raw[i] = 0;
 170:quantum/matrix.c ****         matrix_debouncing[i] = 0;
 171:quantum/matrix.c ****     }
 172:quantum/matrix.c **** 
 173:quantum/matrix.c ****     matrix_init_quantum();
 174:quantum/matrix.c **** }
 175:quantum/matrix.c **** 
 176:quantum/matrix.c **** uint8_t matrix_scan(void)
 177:quantum/matrix.c **** {
 178:quantum/matrix.c **** 
 179:quantum/matrix.c **** #if (DIODE_DIRECTION == COL2ROW)
 180:quantum/matrix.c **** 
 181:quantum/matrix.c ****     // Set row, read cols
 182:quantum/matrix.c ****     for (uint8_t current_row = 0; current_row < MATRIX_ROWS; current_row++) {
 183:quantum/matrix.c **** #       if (DEBOUNCING_DELAY > 0)
 184:quantum/matrix.c ****             bool matrix_changed = read_cols_on_row(matrix_debouncing, current_row);
 185:quantum/matrix.c **** 
 186:quantum/matrix.c ****             if (matrix_changed) {
 187:quantum/matrix.c ****                 debouncing = true;
 188:quantum/matrix.c ****                 debouncing_time = timer_read();
 189:quantum/matrix.c ****             }
 190:quantum/matrix.c **** 
 191:quantum/matrix.c **** #       else
 192:quantum/matrix.c ****             read_cols_on_row(matrix, current_row);
 193:quantum/matrix.c **** #       endif
 194:quantum/matrix.c **** 
 195:quantum/matrix.c ****     }
 196:quantum/matrix.c **** 
 197:quantum/matrix.c **** #else // ROW2COL
 198:quantum/matrix.c **** 
 199:quantum/matrix.c ****     // Set col, read rows
 200:quantum/matrix.c ****     for (uint8_t current_col = 0; current_col < MATRIX_COLS; current_col++) {
 201:quantum/matrix.c **** #       if (DEBOUNCING_DELAY > 0)
 202:quantum/matrix.c ****             bool matrix_changed = read_rows_on_col(matrix_debouncing, current_col);
 203:quantum/matrix.c ****             if (matrix_changed) {
 204:quantum/matrix.c ****                 debouncing = true;
 205:quantum/matrix.c ****                 debouncing_time = timer_read();
 206:quantum/matrix.c ****             }
 207:quantum/matrix.c **** #       else
 208:quantum/matrix.c ****              read_rows_on_col(matrix, current_col);
 209:quantum/matrix.c **** #       endif
 210:quantum/matrix.c **** 
 211:quantum/matrix.c ****     }
 212:quantum/matrix.c **** 
 213:quantum/matrix.c **** #endif
 214:quantum/matrix.c **** 
 215:quantum/matrix.c **** #   if (DEBOUNCING_DELAY > 0)
 216:quantum/matrix.c ****         if (debouncing && (timer_elapsed(debouncing_time) > DEBOUNCING_DELAY)) {
 217:quantum/matrix.c ****             for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
 218:quantum/matrix.c ****                 matrix[i] = matrix_debouncing[i];
 219:quantum/matrix.c ****             }
 220:quantum/matrix.c ****             debouncing = false;
 221:quantum/matrix.c ****         }
 222:quantum/matrix.c **** #   endif
 223:quantum/matrix.c **** 
 224:quantum/matrix.c ****     matrix_scan_quantum();
 225:quantum/matrix.c ****     return 1;
 226:quantum/matrix.c **** }
 227:quantum/matrix.c **** 
 228:quantum/matrix.c **** bool matrix_is_modified(void)
 229:quantum/matrix.c **** {
 230:quantum/matrix.c **** #if (DEBOUNCING_DELAY > 0)
 231:quantum/matrix.c ****     if (debouncing) return false;
 232:quantum/matrix.c **** #endif
 233:quantum/matrix.c ****     return true;
 234:quantum/matrix.c **** }
 235:quantum/matrix.c **** 
 236:quantum/matrix.c **** inline
 237:quantum/matrix.c **** bool matrix_is_on(uint8_t row, uint8_t col)
 238:quantum/matrix.c **** {
 239:quantum/matrix.c ****     return (matrix[row] & ((matrix_row_t)1<col));
 240:quantum/matrix.c **** }
 241:quantum/matrix.c **** 
 242:quantum/matrix.c **** inline
 243:quantum/matrix.c **** matrix_row_t matrix_get_row(uint8_t row)
 244:quantum/matrix.c **** {
 245:quantum/matrix.c ****     // Matrix mask lets you disable switches in the returned matrix data. For example, if you have 
 246:quantum/matrix.c ****     // switch blocker installed and the switch is always pressed.
 247:quantum/matrix.c **** #ifdef MATRIX_MASKED
 248:quantum/matrix.c ****     return matrix[row] & matrix_mask[row];
 249:quantum/matrix.c **** #else
 250:quantum/matrix.c ****     return matrix[row];
 251:quantum/matrix.c **** #endif
 252:quantum/matrix.c **** }
 253:quantum/matrix.c **** 
 254:quantum/matrix.c **** void matrix_print(void)
 255:quantum/matrix.c **** {
 256:quantum/matrix.c ****     print_matrix_header();
 257:quantum/matrix.c **** 
 258:quantum/matrix.c ****     for (uint8_t row = 0; row < MATRIX_ROWS; row++) {
 259:quantum/matrix.c ****         phex(row); print(": ");
 260:quantum/matrix.c ****         print_matrix_row(row);
 261:quantum/matrix.c ****         print("\n");
 262:quantum/matrix.c ****     }
 263:quantum/matrix.c **** }
 264:quantum/matrix.c **** 
 265:quantum/matrix.c **** uint8_t matrix_key_count(void)
 266:quantum/matrix.c **** {
 267:quantum/matrix.c ****     uint8_t count = 0;
 268:quantum/matrix.c ****     for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
 269:quantum/matrix.c ****         count += matrix_bitpop(i);
 270:quantum/matrix.c ****     }
 271:quantum/matrix.c ****     return count;
 272:quantum/matrix.c **** }
 273:quantum/matrix.c **** 
 274:quantum/matrix.c **** 
 275:quantum/matrix.c **** 
 276:quantum/matrix.c **** #if (DIODE_DIRECTION == COL2ROW)
 277:quantum/matrix.c **** 
 278:quantum/matrix.c **** static void init_cols(void)
 279:quantum/matrix.c **** {
 280:quantum/matrix.c ****     for(uint8_t x = 0; x < MATRIX_COLS; x++) {
 281:quantum/matrix.c ****         uint8_t pin = col_pins[x];
 282:quantum/matrix.c ****         _SFR_IO8((pin >> 4) + 1) &= ~_BV(pin & 0xF); // IN
 283:quantum/matrix.c ****         _SFR_IO8((pin >> 4) + 2) |=  _BV(pin & 0xF); // HI
 284:quantum/matrix.c ****     }
 285:quantum/matrix.c **** }
 286:quantum/matrix.c **** 
 287:quantum/matrix.c **** static bool read_cols_on_row(matrix_row_t current_matrix[], uint8_t current_row)
 288:quantum/matrix.c **** {
 289:quantum/matrix.c ****     // Store last value of row prior to reading
 290:quantum/matrix.c ****     matrix_row_t last_row_value = current_matrix[current_row];
 291:quantum/matrix.c **** 
 292:quantum/matrix.c ****     // Clear data in matrix row
 293:quantum/matrix.c ****     current_matrix[current_row] = 0;
 294:quantum/matrix.c **** 
 295:quantum/matrix.c ****     // Select row and wait for row selecton to stabilize
 296:quantum/matrix.c ****     select_row(current_row);
 297:quantum/matrix.c ****     wait_us(30);
 298:quantum/matrix.c **** 
 299:quantum/matrix.c ****     // For each col...
 300:quantum/matrix.c ****     for(uint8_t col_index = 0; col_index < MATRIX_COLS; col_index++) {
 301:quantum/matrix.c **** 
 302:quantum/matrix.c ****         // Select the col pin to read (active low)
 303:quantum/matrix.c ****         uint8_t pin = col_pins[col_index];
 304:quantum/matrix.c ****         uint8_t pin_state = (_SFR_IO8(pin >> 4) & _BV(pin & 0xF));
 305:quantum/matrix.c **** 
 306:quantum/matrix.c ****         // Populate the matrix row with the state of the col pin
 307:quantum/matrix.c ****         current_matrix[current_row] |=  pin_state ? 0 : (ROW_SHIFTER << col_index);
 308:quantum/matrix.c ****     }
 309:quantum/matrix.c **** 
 310:quantum/matrix.c ****     // Unselect row
 311:quantum/matrix.c ****     unselect_row(current_row);
 312:quantum/matrix.c **** 
 313:quantum/matrix.c ****     return (last_row_value != current_matrix[current_row]);
 314:quantum/matrix.c **** }
 315:quantum/matrix.c **** 
 316:quantum/matrix.c **** static void select_row(uint8_t row)
 317:quantum/matrix.c **** {
 318:quantum/matrix.c ****     uint8_t pin = row_pins[row];
 319:quantum/matrix.c ****     _SFR_IO8((pin >> 4) + 1) |=  _BV(pin & 0xF); // OUT
 320:quantum/matrix.c ****     _SFR_IO8((pin >> 4) + 2) &= ~_BV(pin & 0xF); // LOW
 321:quantum/matrix.c **** }
 322:quantum/matrix.c **** 
 323:quantum/matrix.c **** static void unselect_row(uint8_t row)
 324:quantum/matrix.c **** {
 325:quantum/matrix.c ****     uint8_t pin = row_pins[row];
 326:quantum/matrix.c ****     _SFR_IO8((pin >> 4) + 1) &= ~_BV(pin & 0xF); // IN
 327:quantum/matrix.c ****     _SFR_IO8((pin >> 4) + 2) |=  _BV(pin & 0xF); // HI
 328:quantum/matrix.c **** }
 329:quantum/matrix.c **** 
 330:quantum/matrix.c **** static void unselect_rows(void)
 331:quantum/matrix.c **** {
 332:quantum/matrix.c ****     for(uint8_t x = 0; x < MATRIX_ROWS; x++) {
 333:quantum/matrix.c ****         uint8_t pin = row_pins[x];
 334:quantum/matrix.c ****         _SFR_IO8((pin >> 4) + 1) &= ~_BV(pin & 0xF); // IN
 176               		.loc 1 334 0
 177 0014 21E0      		ldi r18,lo8(1)
 178 0016 30E0      		ldi r19,0
 179               	.LVL5:
 180               	.L11:
 333:quantum/matrix.c ****         _SFR_IO8((pin >> 4) + 1) &= ~_BV(pin & 0xF); // IN
 181               		.loc 1 333 0
 182 0018 8D91      		ld r24,X+
 183               	.LVL6:
 184               		.loc 1 334 0
 185 001a E82F      		mov r30,r24
 186 001c E295      		swap r30
 187 001e EF70      		andi r30,lo8(15)
 188 0020 F0E0      		ldi r31,0
 189 0022 41A1      		ldd r20,Z+33
 190 0024 8F70      		andi r24,lo8(15)
 191               	.LVL7:
 192 0026 B901      		movw r22,r18
 193 0028 00C0      		rjmp 2f
 194               		1:
 195 002a 660F      		lsl r22
 196 002c 771F      		rol r23
 197               		2:
 198 002e 8A95      		dec r24
 199 0030 02F4      		brpl 1b
 200 0032 CB01      		movw r24,r22
 201 0034 962F      		mov r25,r22
 202 0036 9095      		com r25
 203 0038 4923      		and r20,r25
 204 003a 41A3      		std Z+33,r20
 205               	.LVL8:
 335:quantum/matrix.c ****         _SFR_IO8((pin >> 4) + 2) |=  _BV(pin & 0xF); // HI
 206               		.loc 1 335 0
 207 003c 92A1      		ldd r25,Z+34
 208 003e 982B      		or r25,r24
 209 0040 92A3      		std Z+34,r25
 210               	.LVL9:
 211               	.LBE21:
 332:quantum/matrix.c ****         uint8_t pin = row_pins[x];
 212               		.loc 1 332 0
 213 0042 70E0      		ldi r23,hi8(row_pins+7)
 214 0044 A030      		cpi r26,lo8(row_pins+7)
 215 0046 B707      		cpc r27,r23
 216 0048 01F4      		brne .L11
 217 004a A0E0      		ldi r26,lo8(col_pins)
 218 004c B0E0      		ldi r27,hi8(col_pins)
 219               	.LVL10:
 220               	.LBE20:
 221               	.LBE19:
 222               	.LBB22:
 223               	.LBB23:
 224               	.LBB24:
 282:quantum/matrix.c ****         _SFR_IO8((pin >> 4) + 2) |=  _BV(pin & 0xF); // HI
 225               		.loc 1 282 0
 226 004e 21E0      		ldi r18,lo8(1)
 227 0050 30E0      		ldi r19,0
 228               	.L13:
 229               	.LVL11:
 281:quantum/matrix.c ****         _SFR_IO8((pin >> 4) + 1) &= ~_BV(pin & 0xF); // IN
 230               		.loc 1 281 0
 231 0052 8D91      		ld r24,X+
 232               	.LVL12:
 282:quantum/matrix.c ****         _SFR_IO8((pin >> 4) + 2) |=  _BV(pin & 0xF); // HI
 233               		.loc 1 282 0
 234 0054 E82F      		mov r30,r24
 235 0056 E295      		swap r30
 236 0058 EF70      		andi r30,lo8(15)
 237 005a F0E0      		ldi r31,0
 238 005c 41A1      		ldd r20,Z+33
 239 005e 8F70      		andi r24,lo8(15)
 240               	.LVL13:
 241 0060 B901      		movw r22,r18
 242 0062 00C0      		rjmp 2f
 243               		1:
 244 0064 660F      		lsl r22
 245 0066 771F      		rol r23
 246               		2:
 247 0068 8A95      		dec r24
 248 006a 02F4      		brpl 1b
 249 006c CB01      		movw r24,r22
 250 006e 962F      		mov r25,r22
 251 0070 9095      		com r25
 252 0072 4923      		and r20,r25
 253 0074 41A3      		std Z+33,r20
 254               	.LVL14:
 283:quantum/matrix.c ****     }
 255               		.loc 1 283 0
 256 0076 92A1      		ldd r25,Z+34
 257 0078 982B      		or r25,r24
 258 007a 92A3      		std Z+34,r25
 259               	.LVL15:
 260               	.LBE24:
 280:quantum/matrix.c ****         uint8_t pin = col_pins[x];
 261               		.loc 1 280 0
 262 007c 70E0      		ldi r23,hi8(col_pins+8)
 263 007e A030      		cpi r26,lo8(col_pins+8)
 264 0080 B707      		cpc r27,r23
 265 0082 01F4      		brne .L13
 266 0084 E0E0      		ldi r30,lo8(matrix)
 267 0086 F0E0      		ldi r31,hi8(matrix)
 268 0088 C0E0      		ldi r28,lo8(matrix_raw)
 269 008a D0E0      		ldi r29,hi8(matrix_raw)
 270 008c A0E0      		ldi r26,lo8(matrix_debouncing)
 271 008e B0E0      		ldi r27,hi8(matrix_debouncing)
 272               	.LVL16:
 273               	.L15:
 274               	.LBE23:
 275               	.LBE22:
 276               	.LBB25:
 168:quantum/matrix.c ****         matrix_raw[i] = 0;
 277               		.loc 1 168 0 discriminator 2
 278 0090 1192      		st Z+,__zero_reg__
 279               	.LVL17:
 169:quantum/matrix.c ****         matrix_debouncing[i] = 0;
 280               		.loc 1 169 0 discriminator 2
 281 0092 1992      		st Y+,__zero_reg__
 170:quantum/matrix.c ****     }
 282               		.loc 1 170 0 discriminator 2
 283 0094 1D92      		st X+,__zero_reg__
 284               	.LVL18:
 167:quantum/matrix.c ****         matrix[i] = 0;
 285               		.loc 1 167 0 discriminator 2
 286 0096 80E0      		ldi r24,hi8(matrix+7)
 287 0098 E030      		cpi r30,lo8(matrix+7)
 288 009a F807      		cpc r31,r24
 289 009c 01F4      		brne .L15
 290               	/* epilogue start */
 291               	.LBE25:
 174:quantum/matrix.c **** 
 292               		.loc 1 174 0
 293 009e DF91      		pop r29
 294 00a0 CF91      		pop r28
 173:quantum/matrix.c **** }
 295               		.loc 1 173 0
 296 00a2 0C94 0000 		jmp matrix_init_quantum
 297               	.LVL19:
 298               		.cfi_endproc
 299               	.LFE14:
 301               		.section	.text.matrix_scan,"ax",@progbits
 302               	.global	matrix_scan
 304               	matrix_scan:
 305               	.LFB15:
 177:quantum/matrix.c **** 
 306               		.loc 1 177 0
 307               		.cfi_startproc
 308 0000 6F92      		push r6
 309               	.LCFI2:
 310               		.cfi_def_cfa_offset 3
 311               		.cfi_offset 6, -2
 312 0002 7F92      		push r7
 313               	.LCFI3:
 314               		.cfi_def_cfa_offset 4
 315               		.cfi_offset 7, -3
 316 0004 9F92      		push r9
 317               	.LCFI4:
 318               		.cfi_def_cfa_offset 5
 319               		.cfi_offset 9, -4
 320 0006 AF92      		push r10
 321               	.LCFI5:
 322               		.cfi_def_cfa_offset 6
 323               		.cfi_offset 10, -5
 324 0008 BF92      		push r11
 325               	.LCFI6:
 326               		.cfi_def_cfa_offset 7
 327               		.cfi_offset 11, -6
 328 000a CF92      		push r12
 329               	.LCFI7:
 330               		.cfi_def_cfa_offset 8
 331               		.cfi_offset 12, -7
 332 000c DF92      		push r13
 333               	.LCFI8:
 334               		.cfi_def_cfa_offset 9
 335               		.cfi_offset 13, -8
 336 000e EF92      		push r14
 337               	.LCFI9:
 338               		.cfi_def_cfa_offset 10
 339               		.cfi_offset 14, -9
 340 0010 FF92      		push r15
 341               	.LCFI10:
 342               		.cfi_def_cfa_offset 11
 343               		.cfi_offset 15, -10
 344 0012 0F93      		push r16
 345               	.LCFI11:
 346               		.cfi_def_cfa_offset 12
 347               		.cfi_offset 16, -11
 348 0014 1F93      		push r17
 349               	.LCFI12:
 350               		.cfi_def_cfa_offset 13
 351               		.cfi_offset 17, -12
 352 0016 CF93      		push r28
 353               	.LCFI13:
 354               		.cfi_def_cfa_offset 14
 355               		.cfi_offset 28, -13
 356 0018 DF93      		push r29
 357               	.LCFI14:
 358               		.cfi_def_cfa_offset 15
 359               		.cfi_offset 29, -14
 360               	/* prologue: function */
 361               	/* frame size = 0 */
 362               	/* stack size = 13 */
 363               	.L__stack_usage = 13
 364               	.LVL20:
 365 001a 00E0      		ldi r16,lo8(row_pins)
 366 001c 10E0      		ldi r17,hi8(row_pins)
 177:quantum/matrix.c **** 
 367               		.loc 1 177 0
 368 001e C0E0      		ldi r28,lo8(matrix_debouncing)
 369 0020 D0E0      		ldi r29,hi8(matrix_debouncing)
 370               	.LBB39:
 371               	.LBB40:
 372               	.LBB41:
 373               	.LBB42:
 374               	.LBB43:
 375               	.LBB44:
 319:quantum/matrix.c ****     _SFR_IO8((pin >> 4) + 2) &= ~_BV(pin & 0xF); // LOW
 376               		.loc 1 319 0
 377 0022 EE24      		clr r14
 378 0024 E394      		inc r14
 379 0026 F12C      		mov r15,__zero_reg__
 380               	.LBE44:
 381               	.LBE43:
 382               	.LBE42:
 383               	.LBE41:
 187:quantum/matrix.c ****                 debouncing_time = timer_read();
 384               		.loc 1 187 0
 385 0028 BB24      		clr r11
 386 002a B394      		inc r11
 387               	.LVL21:
 388               	.L23:
 389 002c AE01      		movw r20,r28
 390               	.LBB54:
 391               	.LBB53:
 290:quantum/matrix.c **** 
 392               		.loc 1 290 0
 393 002e 9880      		ld r9,Y
 394               	.LVL22:
 293:quantum/matrix.c **** 
 395               		.loc 1 293 0
 396 0030 1882      		st Y,__zero_reg__
 397               	.LVL23:
 398               	.LBB46:
 399               	.LBB45:
 318:quantum/matrix.c ****     _SFR_IO8((pin >> 4) + 1) |=  _BV(pin & 0xF); // OUT
 400               		.loc 1 318 0
 401 0032 D801      		movw r26,r16
 402 0034 2D91      		ld r18,X+
 403 0036 8D01      		movw r16,r26
 404               	.LVL24:
 319:quantum/matrix.c ****     _SFR_IO8((pin >> 4) + 2) &= ~_BV(pin & 0xF); // LOW
 405               		.loc 1 319 0
 406 0038 E22F      		mov r30,r18
 407 003a E295      		swap r30
 408 003c EF70      		andi r30,lo8(15)
 409 003e F0E0      		ldi r31,0
 410 0040 81A1      		ldd r24,Z+33
 411 0042 2F70      		andi r18,lo8(15)
 412               	.LVL25:
 413 0044 B701      		movw r22,r14
 414 0046 00C0      		rjmp 2f
 415               		1:
 416 0048 660F      		lsl r22
 417 004a 771F      		rol r23
 418               		2:
 419 004c 2A95      		dec r18
 420 004e 02F4      		brpl 1b
 421 0050 9B01      		movw r18,r22
 422 0052 862B      		or r24,r22
 423 0054 81A3      		std Z+33,r24
 424               	.LVL26:
 320:quantum/matrix.c **** }
 425               		.loc 1 320 0
 426 0056 82A1      		ldd r24,Z+34
 427 0058 A62E      		mov r10,r22
 428 005a A094      		com r10
 429 005c 8A21      		and r24,r10
 430 005e 82A3      		std Z+34,r24
 431               	.LVL27:
 432               	.LBE45:
 433               	.LBE46:
 434               	.LBB47:
 435               	.LBB48:
 436               		.file 2 "c:\\users\\james\\mhv_avr\\avr\\include\\util\\delay.h"
   1:c:\users\james\mhv_avr\avr\include\util\delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:c:\users\james\mhv_avr\avr\include\util\delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:c:\users\james\mhv_avr\avr\include\util\delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:c:\users\james\mhv_avr\avr\include\util\delay.h ****    All rights reserved.
   5:c:\users\james\mhv_avr\avr\include\util\delay.h **** 
   6:c:\users\james\mhv_avr\avr\include\util\delay.h ****    Redistribution and use in source and binary forms, with or without
   7:c:\users\james\mhv_avr\avr\include\util\delay.h ****    modification, are permitted provided that the following conditions are met:
   8:c:\users\james\mhv_avr\avr\include\util\delay.h **** 
   9:c:\users\james\mhv_avr\avr\include\util\delay.h ****    * Redistributions of source code must retain the above copyright
  10:c:\users\james\mhv_avr\avr\include\util\delay.h ****      notice, this list of conditions and the following disclaimer.
  11:c:\users\james\mhv_avr\avr\include\util\delay.h **** 
  12:c:\users\james\mhv_avr\avr\include\util\delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:c:\users\james\mhv_avr\avr\include\util\delay.h ****      notice, this list of conditions and the following disclaimer in
  14:c:\users\james\mhv_avr\avr\include\util\delay.h ****      the documentation and/or other materials provided with the
  15:c:\users\james\mhv_avr\avr\include\util\delay.h ****      distribution.
  16:c:\users\james\mhv_avr\avr\include\util\delay.h **** 
  17:c:\users\james\mhv_avr\avr\include\util\delay.h ****    * Neither the name of the copyright holders nor the names of
  18:c:\users\james\mhv_avr\avr\include\util\delay.h ****      contributors may be used to endorse or promote products derived
  19:c:\users\james\mhv_avr\avr\include\util\delay.h ****      from this software without specific prior written permission.
  20:c:\users\james\mhv_avr\avr\include\util\delay.h **** 
  21:c:\users\james\mhv_avr\avr\include\util\delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:c:\users\james\mhv_avr\avr\include\util\delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:c:\users\james\mhv_avr\avr\include\util\delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:c:\users\james\mhv_avr\avr\include\util\delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:c:\users\james\mhv_avr\avr\include\util\delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:c:\users\james\mhv_avr\avr\include\util\delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:c:\users\james\mhv_avr\avr\include\util\delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:c:\users\james\mhv_avr\avr\include\util\delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:c:\users\james\mhv_avr\avr\include\util\delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:c:\users\james\mhv_avr\avr\include\util\delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:c:\users\james\mhv_avr\avr\include\util\delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:c:\users\james\mhv_avr\avr\include\util\delay.h **** 
  33:c:\users\james\mhv_avr\avr\include\util\delay.h **** /* $Id: delay.h.in 2385 2013-05-03 13:14:20Z joerg_wunsch $ */
  34:c:\users\james\mhv_avr\avr\include\util\delay.h **** 
  35:c:\users\james\mhv_avr\avr\include\util\delay.h **** #ifndef _UTIL_DELAY_H_
  36:c:\users\james\mhv_avr\avr\include\util\delay.h **** #define _UTIL_DELAY_H_ 1
  37:c:\users\james\mhv_avr\avr\include\util\delay.h **** 
  38:c:\users\james\mhv_avr\avr\include\util\delay.h **** #ifndef __HAS_DELAY_CYCLES
  39:c:\users\james\mhv_avr\avr\include\util\delay.h **** #define __HAS_DELAY_CYCLES 1
  40:c:\users\james\mhv_avr\avr\include\util\delay.h **** #endif
  41:c:\users\james\mhv_avr\avr\include\util\delay.h **** 
  42:c:\users\james\mhv_avr\avr\include\util\delay.h **** #include <inttypes.h>
  43:c:\users\james\mhv_avr\avr\include\util\delay.h **** #include <util/delay_basic.h>
  44:c:\users\james\mhv_avr\avr\include\util\delay.h **** #include <math.h>
  45:c:\users\james\mhv_avr\avr\include\util\delay.h **** 
  46:c:\users\james\mhv_avr\avr\include\util\delay.h **** /** \file */
  47:c:\users\james\mhv_avr\avr\include\util\delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  48:c:\users\james\mhv_avr\avr\include\util\delay.h ****     \code
  49:c:\users\james\mhv_avr\avr\include\util\delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  50:c:\users\james\mhv_avr\avr\include\util\delay.h ****     //#define F_CPU 14.7456E6
  51:c:\users\james\mhv_avr\avr\include\util\delay.h ****     #include <util/delay.h>
  52:c:\users\james\mhv_avr\avr\include\util\delay.h ****     \endcode
  53:c:\users\james\mhv_avr\avr\include\util\delay.h **** 
  54:c:\users\james\mhv_avr\avr\include\util\delay.h ****     \note As an alternative method, it is possible to pass the
  55:c:\users\james\mhv_avr\avr\include\util\delay.h ****     F_CPU macro down to the compiler from the Makefile.
  56:c:\users\james\mhv_avr\avr\include\util\delay.h ****     Obviously, in that case, no \c \#define statement should be
  57:c:\users\james\mhv_avr\avr\include\util\delay.h ****     used.
  58:c:\users\james\mhv_avr\avr\include\util\delay.h **** 
  59:c:\users\james\mhv_avr\avr\include\util\delay.h ****     The functions in this header file are wrappers around the basic
  60:c:\users\james\mhv_avr\avr\include\util\delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  61:c:\users\james\mhv_avr\avr\include\util\delay.h ****     convenience functions where actual time values can be specified
  62:c:\users\james\mhv_avr\avr\include\util\delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  63:c:\users\james\mhv_avr\avr\include\util\delay.h ****     that compile-time constant expressions will be eliminated by
  64:c:\users\james\mhv_avr\avr\include\util\delay.h ****     compiler optimization so floating-point expressions can be used
  65:c:\users\james\mhv_avr\avr\include\util\delay.h ****     to calculate the number of delay cycles needed based on the CPU
  66:c:\users\james\mhv_avr\avr\include\util\delay.h ****     frequency passed by the macro F_CPU.
  67:c:\users\james\mhv_avr\avr\include\util\delay.h **** 
  68:c:\users\james\mhv_avr\avr\include\util\delay.h ****     \note In order for these functions to work as intended, compiler
  69:c:\users\james\mhv_avr\avr\include\util\delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  70:c:\users\james\mhv_avr\avr\include\util\delay.h ****     <em>must</em> be an expression that is a known constant at
  71:c:\users\james\mhv_avr\avr\include\util\delay.h ****     compile-time.  If these requirements are not met, the resulting
  72:c:\users\james\mhv_avr\avr\include\util\delay.h ****     delay will be much longer (and basically unpredictable), and
  73:c:\users\james\mhv_avr\avr\include\util\delay.h ****     applications that otherwise do not use floating-point calculations
  74:c:\users\james\mhv_avr\avr\include\util\delay.h ****     will experience severe code bloat by the floating-point library
  75:c:\users\james\mhv_avr\avr\include\util\delay.h ****     routines linked into the application.
  76:c:\users\james\mhv_avr\avr\include\util\delay.h **** 
  77:c:\users\james\mhv_avr\avr\include\util\delay.h ****     The functions available allow the specification of microsecond, and
  78:c:\users\james\mhv_avr\avr\include\util\delay.h ****     millisecond delays directly, using the application-supplied macro
  79:c:\users\james\mhv_avr\avr\include\util\delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  80:c:\users\james\mhv_avr\avr\include\util\delay.h **** 
  81:c:\users\james\mhv_avr\avr\include\util\delay.h **** */
  82:c:\users\james\mhv_avr\avr\include\util\delay.h **** 
  83:c:\users\james\mhv_avr\avr\include\util\delay.h **** #if !defined(__DOXYGEN__)
  84:c:\users\james\mhv_avr\avr\include\util\delay.h **** static inline void _delay_us(double __us) __attribute__((always_inline));
  85:c:\users\james\mhv_avr\avr\include\util\delay.h **** static inline void _delay_ms(double __ms) __attribute__((always_inline));
  86:c:\users\james\mhv_avr\avr\include\util\delay.h **** #endif
  87:c:\users\james\mhv_avr\avr\include\util\delay.h **** 
  88:c:\users\james\mhv_avr\avr\include\util\delay.h **** #ifndef F_CPU
  89:c:\users\james\mhv_avr\avr\include\util\delay.h **** /* prevent compiler error by supplying a default */
  90:c:\users\james\mhv_avr\avr\include\util\delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  91:c:\users\james\mhv_avr\avr\include\util\delay.h **** # define F_CPU 1000000UL
  92:c:\users\james\mhv_avr\avr\include\util\delay.h **** #endif
  93:c:\users\james\mhv_avr\avr\include\util\delay.h **** 
  94:c:\users\james\mhv_avr\avr\include\util\delay.h **** #ifndef __OPTIMIZE__
  95:c:\users\james\mhv_avr\avr\include\util\delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
  96:c:\users\james\mhv_avr\avr\include\util\delay.h **** #endif
  97:c:\users\james\mhv_avr\avr\include\util\delay.h **** 
  98:c:\users\james\mhv_avr\avr\include\util\delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
  99:c:\users\james\mhv_avr\avr\include\util\delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 100:c:\users\james\mhv_avr\avr\include\util\delay.h ****   __STDC_HOSTED__
 101:c:\users\james\mhv_avr\avr\include\util\delay.h **** #  include <math.h>
 102:c:\users\james\mhv_avr\avr\include\util\delay.h **** #endif
 103:c:\users\james\mhv_avr\avr\include\util\delay.h **** 
 104:c:\users\james\mhv_avr\avr\include\util\delay.h **** /**
 105:c:\users\james\mhv_avr\avr\include\util\delay.h ****    \ingroup util_delay
 106:c:\users\james\mhv_avr\avr\include\util\delay.h **** 
 107:c:\users\james\mhv_avr\avr\include\util\delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 108:c:\users\james\mhv_avr\avr\include\util\delay.h **** 
 109:c:\users\james\mhv_avr\avr\include\util\delay.h ****    The macro F_CPU is supposed to be defined to a
 110:c:\users\james\mhv_avr\avr\include\util\delay.h ****    constant defining the CPU clock frequency (in Hertz).
 111:c:\users\james\mhv_avr\avr\include\util\delay.h **** 
 112:c:\users\james\mhv_avr\avr\include\util\delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 113:c:\users\james\mhv_avr\avr\include\util\delay.h **** 
 114:c:\users\james\mhv_avr\avr\include\util\delay.h ****    When the user request delay which exceed the maximum possible one,
 115:c:\users\james\mhv_avr\avr\include\util\delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 116:c:\users\james\mhv_avr\avr\include\util\delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 117:c:\users\james\mhv_avr\avr\include\util\delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 118:c:\users\james\mhv_avr\avr\include\util\delay.h ****    user will not be informed about decreased resolution.
 119:c:\users\james\mhv_avr\avr\include\util\delay.h **** 
 120:c:\users\james\mhv_avr\avr\include\util\delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles(unsigned long)
 121:c:\users\james\mhv_avr\avr\include\util\delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 122:c:\users\james\mhv_avr\avr\include\util\delay.h ****    values greater than the maximal possible delay, overflows results in
 123:c:\users\james\mhv_avr\avr\include\util\delay.h ****    no delay i.e., 0ms.
 124:c:\users\james\mhv_avr\avr\include\util\delay.h **** 
 125:c:\users\james\mhv_avr\avr\include\util\delay.h ****    Conversion of __us into clock cycles may not always result in integer.
 126:c:\users\james\mhv_avr\avr\include\util\delay.h ****    By default, the clock cycles rounded up to next integer. This ensures that
 127:c:\users\james\mhv_avr\avr\include\util\delay.h ****    the user gets atleast __us microseconds of delay.
 128:c:\users\james\mhv_avr\avr\include\util\delay.h **** 
 129:c:\users\james\mhv_avr\avr\include\util\delay.h ****    Alternatively, user can define __DELAY_ROUND_DOWN__ and __DELAY_ROUND_CLOSEST__
 130:c:\users\james\mhv_avr\avr\include\util\delay.h ****    to round down and round to closest integer.
 131:c:\users\james\mhv_avr\avr\include\util\delay.h **** 
 132:c:\users\james\mhv_avr\avr\include\util\delay.h ****    Note: The new implementation of _delay_ms(double __ms) with 
 133:c:\users\james\mhv_avr\avr\include\util\delay.h ****     __builtin_avr_delay_cycles(unsigned long) support is not backward compatible. 
 134:c:\users\james\mhv_avr\avr\include\util\delay.h ****    User can define __DELAY_BACKWARD_COMPATIBLE__ to get a backward compatible delay.
 135:c:\users\james\mhv_avr\avr\include\util\delay.h ****    Also, the backward compatible
 136:c:\users\james\mhv_avr\avr\include\util\delay.h ****    algorithm will be chosen if the code is compiled in a <em>freestanding
 137:c:\users\james\mhv_avr\avr\include\util\delay.h ****    environment</em> (GCC option \c -ffreestanding), as the math functions
 138:c:\users\james\mhv_avr\avr\include\util\delay.h ****    required for rounding are not available to the compiler then.
 139:c:\users\james\mhv_avr\avr\include\util\delay.h **** 
 140:c:\users\james\mhv_avr\avr\include\util\delay.h ****  */
 141:c:\users\james\mhv_avr\avr\include\util\delay.h **** void
 142:c:\users\james\mhv_avr\avr\include\util\delay.h **** _delay_ms(double __ms)
 143:c:\users\james\mhv_avr\avr\include\util\delay.h **** {
 144:c:\users\james\mhv_avr\avr\include\util\delay.h **** 	double __tmp ; 
 145:c:\users\james\mhv_avr\avr\include\util\delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 146:c:\users\james\mhv_avr\avr\include\util\delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 147:c:\users\james\mhv_avr\avr\include\util\delay.h ****   __STDC_HOSTED__
 148:c:\users\james\mhv_avr\avr\include\util\delay.h **** 	uint32_t __ticks_dc;
 149:c:\users\james\mhv_avr\avr\include\util\delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 150:c:\users\james\mhv_avr\avr\include\util\delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 151:c:\users\james\mhv_avr\avr\include\util\delay.h **** 
 152:c:\users\james\mhv_avr\avr\include\util\delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 153:c:\users\james\mhv_avr\avr\include\util\delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 154:c:\users\james\mhv_avr\avr\include\util\delay.h **** 
 155:c:\users\james\mhv_avr\avr\include\util\delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 156:c:\users\james\mhv_avr\avr\include\util\delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 157:c:\users\james\mhv_avr\avr\include\util\delay.h **** 
 158:c:\users\james\mhv_avr\avr\include\util\delay.h **** 	#else
 159:c:\users\james\mhv_avr\avr\include\util\delay.h **** 		//round up by default
 160:c:\users\james\mhv_avr\avr\include\util\delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 161:c:\users\james\mhv_avr\avr\include\util\delay.h **** 	#endif
 162:c:\users\james\mhv_avr\avr\include\util\delay.h **** 
 163:c:\users\james\mhv_avr\avr\include\util\delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 164:c:\users\james\mhv_avr\avr\include\util\delay.h **** 
 165:c:\users\james\mhv_avr\avr\include\util\delay.h **** #else
 166:c:\users\james\mhv_avr\avr\include\util\delay.h **** 	uint16_t __ticks;
 167:c:\users\james\mhv_avr\avr\include\util\delay.h **** 	__tmp = ((F_CPU) / 4e3) * __ms;
 168:c:\users\james\mhv_avr\avr\include\util\delay.h **** 	if (__tmp < 1.0)
 169:c:\users\james\mhv_avr\avr\include\util\delay.h **** 		__ticks = 1;
 170:c:\users\james\mhv_avr\avr\include\util\delay.h **** 	else if (__tmp > 65535)
 171:c:\users\james\mhv_avr\avr\include\util\delay.h **** 	{
 172:c:\users\james\mhv_avr\avr\include\util\delay.h **** 		//	__ticks = requested delay in 1/10 ms
 173:c:\users\james\mhv_avr\avr\include\util\delay.h **** 		__ticks = (uint16_t) (__ms * 10.0);
 174:c:\users\james\mhv_avr\avr\include\util\delay.h **** 		while(__ticks)
 175:c:\users\james\mhv_avr\avr\include\util\delay.h **** 		{
 176:c:\users\james\mhv_avr\avr\include\util\delay.h **** 			// wait 1/10 ms
 177:c:\users\james\mhv_avr\avr\include\util\delay.h **** 			_delay_loop_2(((F_CPU) / 4e3) / 10);
 178:c:\users\james\mhv_avr\avr\include\util\delay.h **** 			__ticks --;
 179:c:\users\james\mhv_avr\avr\include\util\delay.h **** 		}
 180:c:\users\james\mhv_avr\avr\include\util\delay.h **** 		return;
 181:c:\users\james\mhv_avr\avr\include\util\delay.h **** 	}
 182:c:\users\james\mhv_avr\avr\include\util\delay.h **** 	else
 183:c:\users\james\mhv_avr\avr\include\util\delay.h **** 		__ticks = (uint16_t)__tmp;
 184:c:\users\james\mhv_avr\avr\include\util\delay.h **** 	_delay_loop_2(__ticks);
 185:c:\users\james\mhv_avr\avr\include\util\delay.h **** #endif
 186:c:\users\james\mhv_avr\avr\include\util\delay.h **** }
 187:c:\users\james\mhv_avr\avr\include\util\delay.h **** 
 188:c:\users\james\mhv_avr\avr\include\util\delay.h **** /**
 189:c:\users\james\mhv_avr\avr\include\util\delay.h ****    \ingroup util_delay
 190:c:\users\james\mhv_avr\avr\include\util\delay.h **** 
 191:c:\users\james\mhv_avr\avr\include\util\delay.h ****    Perform a delay of \c __us microseconds, using _delay_loop_1().
 192:c:\users\james\mhv_avr\avr\include\util\delay.h **** 
 193:c:\users\james\mhv_avr\avr\include\util\delay.h ****    The macro F_CPU is supposed to be defined to a
 194:c:\users\james\mhv_avr\avr\include\util\delay.h ****    constant defining the CPU clock frequency (in Hertz).
 195:c:\users\james\mhv_avr\avr\include\util\delay.h **** 
 196:c:\users\james\mhv_avr\avr\include\util\delay.h ****    The maximal possible delay is 768 us / F_CPU in MHz.
 197:c:\users\james\mhv_avr\avr\include\util\delay.h **** 
 198:c:\users\james\mhv_avr\avr\include\util\delay.h ****    If the user requests a delay greater than the maximal possible one,
 199:c:\users\james\mhv_avr\avr\include\util\delay.h ****    _delay_us() will automatically call _delay_ms() instead.  The user
 200:c:\users\james\mhv_avr\avr\include\util\delay.h ****    will not be informed about this case.
 201:c:\users\james\mhv_avr\avr\include\util\delay.h **** 
 202:c:\users\james\mhv_avr\avr\include\util\delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles(unsigned long)
 203:c:\users\james\mhv_avr\avr\include\util\delay.h ****    support, maximal possible delay is 4294967.295 us/ F_CPU in MHz. For
 204:c:\users\james\mhv_avr\avr\include\util\delay.h ****    values greater than the maximal possible delay, overflow results in
 205:c:\users\james\mhv_avr\avr\include\util\delay.h ****    no delay i.e., 0us.
 206:c:\users\james\mhv_avr\avr\include\util\delay.h ****   
 207:c:\users\james\mhv_avr\avr\include\util\delay.h ****    Conversion of __us into clock cycles may not always result in integer.
 208:c:\users\james\mhv_avr\avr\include\util\delay.h ****    By default, the clock cycles rounded up to next integer. This ensures that
 209:c:\users\james\mhv_avr\avr\include\util\delay.h ****    the user gets atleast __us microseconds of delay.
 210:c:\users\james\mhv_avr\avr\include\util\delay.h **** 
 211:c:\users\james\mhv_avr\avr\include\util\delay.h ****    Alternatively, user can define __DELAY_ROUND_DOWN__ and __DELAY_ROUND_CLOSEST__
 212:c:\users\james\mhv_avr\avr\include\util\delay.h ****    to round down and round to closest integer.
 213:c:\users\james\mhv_avr\avr\include\util\delay.h ****  
 214:c:\users\james\mhv_avr\avr\include\util\delay.h ****    Note: The new implementation of _delay_us(double __us) with 
 215:c:\users\james\mhv_avr\avr\include\util\delay.h ****     __builtin_avr_delay_cycles(unsigned long) support is not backward compatible.
 216:c:\users\james\mhv_avr\avr\include\util\delay.h ****    User can define __DELAY_BACKWARD_COMPATIBLE__ to get a backward compatible delay.
 217:c:\users\james\mhv_avr\avr\include\util\delay.h ****    Also, the backward compatible
 218:c:\users\james\mhv_avr\avr\include\util\delay.h ****    algorithm will be chosen if the code is compiled in a <em>freestanding
 219:c:\users\james\mhv_avr\avr\include\util\delay.h ****    environment</em> (GCC option \c -ffreestanding), as the math functions
 220:c:\users\james\mhv_avr\avr\include\util\delay.h ****    required for rounding are not available to the compiler then.
 221:c:\users\james\mhv_avr\avr\include\util\delay.h **** 
 222:c:\users\james\mhv_avr\avr\include\util\delay.h ****  */
 223:c:\users\james\mhv_avr\avr\include\util\delay.h **** void
 224:c:\users\james\mhv_avr\avr\include\util\delay.h **** _delay_us(double __us)
 225:c:\users\james\mhv_avr\avr\include\util\delay.h **** {
 226:c:\users\james\mhv_avr\avr\include\util\delay.h **** 	double __tmp ; 
 227:c:\users\james\mhv_avr\avr\include\util\delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 228:c:\users\james\mhv_avr\avr\include\util\delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 229:c:\users\james\mhv_avr\avr\include\util\delay.h ****   __STDC_HOSTED__
 230:c:\users\james\mhv_avr\avr\include\util\delay.h **** 	uint32_t __ticks_dc;
 231:c:\users\james\mhv_avr\avr\include\util\delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 232:c:\users\james\mhv_avr\avr\include\util\delay.h **** 	__tmp = ((F_CPU) / 1e6) * __us;
 233:c:\users\james\mhv_avr\avr\include\util\delay.h **** 
 234:c:\users\james\mhv_avr\avr\include\util\delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 235:c:\users\james\mhv_avr\avr\include\util\delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 236:c:\users\james\mhv_avr\avr\include\util\delay.h **** 
 237:c:\users\james\mhv_avr\avr\include\util\delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 238:c:\users\james\mhv_avr\avr\include\util\delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 239:c:\users\james\mhv_avr\avr\include\util\delay.h **** 
 240:c:\users\james\mhv_avr\avr\include\util\delay.h **** 	#else
 241:c:\users\james\mhv_avr\avr\include\util\delay.h **** 		//round up by default
 242:c:\users\james\mhv_avr\avr\include\util\delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 243:c:\users\james\mhv_avr\avr\include\util\delay.h **** 	#endif
 244:c:\users\james\mhv_avr\avr\include\util\delay.h **** 
 245:c:\users\james\mhv_avr\avr\include\util\delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 437               		.loc 2 245 0
 438 0060 70EA      		ldi r23,lo8(-96)
 439 0062 7A95      		1: dec r23
 440 0064 01F4      		brne 1b
 441               	.LVL28:
 442 0066 60E0      		ldi r22,lo8(col_pins)
 443 0068 662E      		mov r6,r22
 444 006a 60E0      		ldi r22,hi8(col_pins)
 445 006c 762E      		mov r7,r22
 446 006e 80E0      		ldi r24,0
 447 0070 90E0      		ldi r25,0
 448               	.LVL29:
 449               	.L20:
 450               	.LBE48:
 451               	.LBE47:
 452               	.LBB49:
 453               	.LBB50:
 303:quantum/matrix.c ****         uint8_t pin_state = (_SFR_IO8(pin >> 4) & _BV(pin & 0xF));
 454               		.loc 1 303 0
 455 0072 D301      		movw r26,r6
 456 0074 7D91      		ld r23,X+
 457 0076 3D01      		movw r6,r26
 458               	.LVL30:
 304:quantum/matrix.c **** 
 459               		.loc 1 304 0
 460 0078 C72E      		mov r12,r23
 461 007a C294      		swap r12
 462 007c 3FE0      		ldi r19,lo8(15)
 463 007e C322      		and r12,r19
 464 0080 D12C      		mov r13,__zero_reg__
 465 0082 D601      		movw r26,r12
 466 0084 9096      		adiw r26,32
 467 0086 DC90      		ld r13,X
 468               	.LVL31:
 307:quantum/matrix.c ****     }
 469               		.loc 1 307 0
 470 0088 C880      		ld r12,Y
 304:quantum/matrix.c **** 
 471               		.loc 1 304 0
 472 008a 7F70      		andi r23,lo8(15)
 473               	.LVL32:
 474 008c D701      		movw r26,r14
 475 008e 00C0      		rjmp 2f
 476               		1:
 477 0090 AA0F      		lsl r26
 478 0092 BB1F      		rol r27
 479               		2:
 480 0094 7A95      		dec r23
 481 0096 02F4      		brpl 1b
 482 0098 DA22      		and r13,r26
 483               	.LVL33:
 307:quantum/matrix.c ****     }
 484               		.loc 1 307 0
 485 009a 01F4      		brne .L29
 486 009c 6E2D      		mov r22,r14
 487 009e 082E      		mov r0,r24
 488 00a0 00C0      		rjmp 2f
 489               		1:
 490 00a2 660F      		lsl r22
 491               		2:
 492 00a4 0A94      		dec r0
 493 00a6 02F4      		brpl 1b
 494 00a8 00C0      		rjmp .L18
 495               	.L29:
 496 00aa 60E0      		ldi r22,0
 497               	.L18:
 498 00ac 6C29      		or r22,r12
 499 00ae 6883      		st Y,r22
 500               	.LVL34:
 501 00b0 0196      		adiw r24,1
 502               	.LVL35:
 503               	.LBE50:
 300:quantum/matrix.c **** 
 504               		.loc 1 300 0
 505 00b2 8830      		cpi r24,8
 506 00b4 9105      		cpc r25,__zero_reg__
 507 00b6 01F4      		brne .L20
 508               	.LVL36:
 509               	.LBE49:
 510               	.LBB51:
 511               	.LBB52:
 326:quantum/matrix.c ****     _SFR_IO8((pin >> 4) + 2) |=  _BV(pin & 0xF); // HI
 512               		.loc 1 326 0
 513 00b8 81A1      		ldd r24,Z+33
 514               	.LVL37:
 515 00ba 8A21      		and r24,r10
 516 00bc 81A3      		std Z+33,r24
 517               	.LVL38:
 327:quantum/matrix.c **** }
 518               		.loc 1 327 0
 519 00be 82A1      		ldd r24,Z+34
 520 00c0 822B      		or r24,r18
 521 00c2 82A3      		std Z+34,r24
 522 00c4 2196      		adiw r28,1
 523               	.LVL39:
 524               	.LBE52:
 525               	.LBE51:
 526               	.LBE53:
 527               	.LBE54:
 186:quantum/matrix.c ****                 debouncing = true;
 528               		.loc 1 186 0
 529 00c6 FA01      		movw r30,r20
 530 00c8 8081      		ld r24,Z
 531 00ca 9816      		cp r9,r24
 532 00cc 01F0      		breq .L21
 187:quantum/matrix.c ****                 debouncing_time = timer_read();
 533               		.loc 1 187 0
 534 00ce B092 0000 		sts debouncing,r11
 188:quantum/matrix.c ****             }
 535               		.loc 1 188 0
 536 00d2 0E94 0000 		call timer_read
 537               	.LVL40:
 538 00d6 9093 0000 		sts debouncing_time+1,r25
 539 00da 8093 0000 		sts debouncing_time,r24
 540               	.L21:
 541               	.LVL41:
 542               	.LBE40:
 182:quantum/matrix.c **** #       if (DEBOUNCING_DELAY > 0)
 543               		.loc 1 182 0
 544 00de F0E0      		ldi r31,hi8(row_pins+7)
 545 00e0 0030      		cpi r16,lo8(row_pins+7)
 546 00e2 1F07      		cpc r17,r31
 547 00e4 01F0      		breq .+2
 548 00e6 00C0      		rjmp .L23
 549               	.LBE39:
 216:quantum/matrix.c ****             for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
 550               		.loc 1 216 0
 551 00e8 8091 0000 		lds r24,debouncing
 552 00ec 8823      		tst r24
 553 00ee 01F0      		breq .L25
 216:quantum/matrix.c ****             for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
 554               		.loc 1 216 0 is_stmt 0 discriminator 1
 555 00f0 8091 0000 		lds r24,debouncing_time
 556 00f4 9091 0000 		lds r25,debouncing_time+1
 557 00f8 0E94 0000 		call timer_elapsed
 558               	.LVL42:
 559 00fc 0697      		sbiw r24,6
 560 00fe 00F0      		brlo .L25
 561 0100 E0E0      		ldi r30,lo8(matrix_debouncing)
 562 0102 F0E0      		ldi r31,hi8(matrix_debouncing)
 563 0104 A0E0      		ldi r26,lo8(matrix)
 564 0106 B0E0      		ldi r27,hi8(matrix)
 565               	.L28:
 566               	.LVL43:
 567               	.LBB55:
 218:quantum/matrix.c ****             }
 568               		.loc 1 218 0 is_stmt 1 discriminator 2
 569 0108 8191      		ld r24,Z+
 570               	.LVL44:
 571 010a 8D93      		st X+,r24
 572               	.LVL45:
 217:quantum/matrix.c ****                 matrix[i] = matrix_debouncing[i];
 573               		.loc 1 217 0 discriminator 2
 574 010c 60E0      		ldi r22,hi8(matrix_debouncing+7)
 575 010e E030      		cpi r30,lo8(matrix_debouncing+7)
 576 0110 F607      		cpc r31,r22
 577 0112 01F4      		brne .L28
 578               	.LBE55:
 220:quantum/matrix.c ****         }
 579               		.loc 1 220 0
 580 0114 1092 0000 		sts debouncing,__zero_reg__
 581               	.LVL46:
 582               	.L25:
 224:quantum/matrix.c ****     return 1;
 583               		.loc 1 224 0
 584 0118 0E94 0000 		call matrix_scan_quantum
 585               	.LVL47:
 226:quantum/matrix.c **** 
 586               		.loc 1 226 0
 587 011c 81E0      		ldi r24,lo8(1)
 588               	/* epilogue start */
 589 011e DF91      		pop r29
 590 0120 CF91      		pop r28
 591               	.LVL48:
 592 0122 1F91      		pop r17
 593 0124 0F91      		pop r16
 594 0126 FF90      		pop r15
 595 0128 EF90      		pop r14
 596 012a DF90      		pop r13
 597 012c CF90      		pop r12
 598 012e BF90      		pop r11
 599 0130 AF90      		pop r10
 600 0132 9F90      		pop r9
 601               	.LVL49:
 602 0134 7F90      		pop r7
 603 0136 6F90      		pop r6
 604 0138 0895      		ret
 605               		.cfi_endproc
 606               	.LFE15:
 608               		.section	.text.matrix_is_modified,"ax",@progbits
 609               	.global	matrix_is_modified
 611               	matrix_is_modified:
 612               	.LFB16:
 229:quantum/matrix.c **** #if (DEBOUNCING_DELAY > 0)
 613               		.loc 1 229 0
 614               		.cfi_startproc
 615               	/* prologue: function */
 616               	/* frame size = 0 */
 617               	/* stack size = 0 */
 618               	.L__stack_usage = 0
 231:quantum/matrix.c **** #endif
 619               		.loc 1 231 0
 620 0000 9091 0000 		lds r25,debouncing
 234:quantum/matrix.c **** 
 621               		.loc 1 234 0
 622 0004 81E0      		ldi r24,lo8(1)
 623 0006 8927      		eor r24,r25
 624 0008 0895      		ret
 625               		.cfi_endproc
 626               	.LFE16:
 628               		.section	.text.matrix_is_on,"ax",@progbits
 629               	.global	matrix_is_on
 631               	matrix_is_on:
 632               	.LFB17:
 238:quantum/matrix.c ****     return (matrix[row] & ((matrix_row_t)1<col));
 633               		.loc 1 238 0
 634               		.cfi_startproc
 635               	.LVL50:
 636               	/* prologue: function */
 637               	/* frame size = 0 */
 638               	/* stack size = 0 */
 639               	.L__stack_usage = 0
 239:quantum/matrix.c **** }
 640               		.loc 1 239 0
 641 0000 E82F      		mov r30,r24
 642 0002 F0E0      		ldi r31,0
 643 0004 E050      		subi r30,lo8(-(matrix))
 644 0006 F040      		sbci r31,hi8(-(matrix))
 645 0008 2081      		ld r18,Z
 646 000a 30E0      		ldi r19,0
 647 000c 81E0      		ldi r24,lo8(1)
 648 000e 90E0      		ldi r25,0
 649               	.LVL51:
 650 0010 6230      		cpi r22,lo8(2)
 651 0012 00F4      		brsh .L32
 652 0014 80E0      		ldi r24,0
 653 0016 90E0      		ldi r25,0
 654               	.L32:
 655 0018 8223      		and r24,r18
 656 001a 9323      		and r25,r19
 240:quantum/matrix.c **** 
 657               		.loc 1 240 0
 658 001c 8170      		andi r24,lo8(1)
 659 001e 0895      		ret
 660               		.cfi_endproc
 661               	.LFE17:
 663               		.section	.text.matrix_get_row,"ax",@progbits
 664               	.global	matrix_get_row
 666               	matrix_get_row:
 667               	.LFB18:
 244:quantum/matrix.c ****     // Matrix mask lets you disable switches in the returned matrix data. For example, if you have 
 668               		.loc 1 244 0
 669               		.cfi_startproc
 670               	.LVL52:
 671               	/* prologue: function */
 672               	/* frame size = 0 */
 673               	/* stack size = 0 */
 674               	.L__stack_usage = 0
 250:quantum/matrix.c **** #endif
 675               		.loc 1 250 0
 676 0000 E82F      		mov r30,r24
 677 0002 F0E0      		ldi r31,0
 678 0004 E050      		subi r30,lo8(-(matrix))
 679 0006 F040      		sbci r31,hi8(-(matrix))
 252:quantum/matrix.c **** 
 680               		.loc 1 252 0
 681 0008 8081      		ld r24,Z
 682               	.LVL53:
 683 000a 0895      		ret
 684               		.cfi_endproc
 685               	.LFE18:
 687               		.section	.text.matrix_print,"ax",@progbits
 688               	.global	matrix_print
 690               	matrix_print:
 691               	.LFB19:
 255:quantum/matrix.c ****     print_matrix_header();
 692               		.loc 1 255 0
 693               		.cfi_startproc
 694               	/* prologue: function */
 695               	/* frame size = 0 */
 696               	/* stack size = 0 */
 697               	.L__stack_usage = 0
 698               	.LVL54:
 699 0000 0895      		ret
 700               		.cfi_endproc
 701               	.LFE19:
 703               		.section	.text.matrix_key_count,"ax",@progbits
 704               	.global	matrix_key_count
 706               	matrix_key_count:
 707               	.LFB20:
 266:quantum/matrix.c ****     uint8_t count = 0;
 708               		.loc 1 266 0
 709               		.cfi_startproc
 266:quantum/matrix.c ****     uint8_t count = 0;
 710               		.loc 1 266 0
 711 0000 1F93      		push r17
 712               	.LCFI15:
 713               		.cfi_def_cfa_offset 3
 714               		.cfi_offset 17, -2
 715 0002 CF93      		push r28
 716               	.LCFI16:
 717               		.cfi_def_cfa_offset 4
 718               		.cfi_offset 28, -3
 719 0004 DF93      		push r29
 720               	.LCFI17:
 721               		.cfi_def_cfa_offset 5
 722               		.cfi_offset 29, -4
 723               	/* prologue: function */
 724               	/* frame size = 0 */
 725               	/* stack size = 3 */
 726               	.L__stack_usage = 3
 727               	.LVL55:
 728 0006 C0E0      		ldi r28,lo8(matrix)
 729 0008 D0E0      		ldi r29,hi8(matrix)
 267:quantum/matrix.c ****     for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
 730               		.loc 1 267 0
 731 000a 10E0      		ldi r17,0
 732               	.LVL56:
 733               	.L37:
 734               	.LBB56:
 269:quantum/matrix.c ****     }
 735               		.loc 1 269 0 discriminator 2
 736 000c 8991      		ld r24,Y+
 737               	.LVL57:
 738 000e 0E94 0000 		call bitpop
 739               	.LVL58:
 740 0012 180F      		add r17,r24
 741               	.LVL59:
 268:quantum/matrix.c ****         count += matrix_bitpop(i);
 742               		.loc 1 268 0 discriminator 2
 743 0014 80E0      		ldi r24,hi8(matrix+7)
 744 0016 C030      		cpi r28,lo8(matrix+7)
 745 0018 D807      		cpc r29,r24
 746 001a 01F4      		brne .L37
 747               	.LBE56:
 272:quantum/matrix.c **** 
 748               		.loc 1 272 0
 749 001c 812F      		mov r24,r17
 750               	/* epilogue start */
 751 001e DF91      		pop r29
 752 0020 CF91      		pop r28
 753               	.LVL60:
 754 0022 1F91      		pop r17
 755               	.LVL61:
 756 0024 0895      		ret
 757               		.cfi_endproc
 758               	.LFE20:
 760               		.section	.bss.matrix_debouncing,"aw",@nobits
 763               	matrix_debouncing:
 764 0000 0000 0000 		.zero	7
 764      0000 00
 765               		.section	.bss.matrix_raw,"aw",@nobits
 768               	matrix_raw:
 769 0000 0000 0000 		.zero	7
 769      0000 00
 770               		.section	.bss.matrix,"aw",@nobits
 773               	matrix:
 774 0000 0000 0000 		.zero	7
 774      0000 00
 775               		.section	.rodata.col_pins,"a",@progbits
 778               	col_pins:
 779 0000 35        		.byte	53
 780 0001 36        		.byte	54
 781 0002 F7        		.byte	-9
 782 0003 F6        		.byte	-10
 783 0004 F5        		.byte	-11
 784 0005 F4        		.byte	-12
 785 0006 F1        		.byte	-15
 786 0007 F0        		.byte	-16
 787               		.section	.rodata.row_pins,"a",@progbits
 790               	row_pins:
 791 0000 91        		.byte	-111
 792 0001 90        		.byte	-112
 793 0002 37        		.byte	55
 794 0003 33        		.byte	51
 795 0004 32        		.byte	50
 796 0005 31        		.byte	49
 797 0006 30        		.byte	48
 798               		.section	.bss.debouncing,"aw",@nobits
 801               	debouncing:
 802 0000 00        		.zero	1
 803               		.section	.bss.debouncing_time,"aw",@nobits
 806               	debouncing_time:
 807 0000 0000      		.zero	2
 808               		.text
 809               	.Letext0:
 810               		.file 3 "c:\\users\\james\\mhv_avr\\avr\\include\\stdint.h"
 811               		.file 4 "./tmk_core/common/matrix.h"
 812               		.file 5 "./tmk_core/common/timer.h"
 813               		.file 6 "./tmk_core/common/util.h"
DEFINED SYMBOLS
                            *ABS*:00000000 matrix.c
C:\Users\James\AppData\Local\Temp\cckJTdcV.s:2      *ABS*:0000003e __SP_H__
C:\Users\James\AppData\Local\Temp\cckJTdcV.s:3      *ABS*:0000003d __SP_L__
C:\Users\James\AppData\Local\Temp\cckJTdcV.s:4      *ABS*:0000003f __SREG__
C:\Users\James\AppData\Local\Temp\cckJTdcV.s:5      *ABS*:00000000 __tmp_reg__
C:\Users\James\AppData\Local\Temp\cckJTdcV.s:6      *ABS*:00000001 __zero_reg__
C:\Users\James\AppData\Local\Temp\cckJTdcV.s:13     .text.matrix_init_user:00000000 matrix_init_user
C:\Users\James\AppData\Local\Temp\cckJTdcV.s:29     .text.matrix_init_kb:00000000 matrix_init_kb
C:\Users\James\AppData\Local\Temp\cckJTdcV.s:46     .text.matrix_init_quantum:00000000 matrix_init_quantum
C:\Users\James\AppData\Local\Temp\cckJTdcV.s:63     .text.matrix_scan_user:00000000 matrix_scan_user
C:\Users\James\AppData\Local\Temp\cckJTdcV.s:78     .text.matrix_scan_kb:00000000 matrix_scan_kb
C:\Users\James\AppData\Local\Temp\cckJTdcV.s:95     .text.matrix_scan_quantum:00000000 matrix_scan_quantum
C:\Users\James\AppData\Local\Temp\cckJTdcV.s:112    .text.matrix_rows:00000000 matrix_rows
C:\Users\James\AppData\Local\Temp\cckJTdcV.s:129    .text.matrix_cols:00000000 matrix_cols
C:\Users\James\AppData\Local\Temp\cckJTdcV.s:146    .text.matrix_init:00000000 matrix_init
C:\Users\James\AppData\Local\Temp\cckJTdcV.s:790    .rodata.row_pins:00000000 row_pins
C:\Users\James\AppData\Local\Temp\cckJTdcV.s:778    .rodata.col_pins:00000000 col_pins
C:\Users\James\AppData\Local\Temp\cckJTdcV.s:773    .bss.matrix:00000000 matrix
C:\Users\James\AppData\Local\Temp\cckJTdcV.s:768    .bss.matrix_raw:00000000 matrix_raw
C:\Users\James\AppData\Local\Temp\cckJTdcV.s:763    .bss.matrix_debouncing:00000000 matrix_debouncing
C:\Users\James\AppData\Local\Temp\cckJTdcV.s:304    .text.matrix_scan:00000000 matrix_scan
C:\Users\James\AppData\Local\Temp\cckJTdcV.s:801    .bss.debouncing:00000000 debouncing
C:\Users\James\AppData\Local\Temp\cckJTdcV.s:806    .bss.debouncing_time:00000000 debouncing_time
C:\Users\James\AppData\Local\Temp\cckJTdcV.s:611    .text.matrix_is_modified:00000000 matrix_is_modified
C:\Users\James\AppData\Local\Temp\cckJTdcV.s:631    .text.matrix_is_on:00000000 matrix_is_on
C:\Users\James\AppData\Local\Temp\cckJTdcV.s:666    .text.matrix_get_row:00000000 matrix_get_row
C:\Users\James\AppData\Local\Temp\cckJTdcV.s:690    .text.matrix_print:00000000 matrix_print
C:\Users\James\AppData\Local\Temp\cckJTdcV.s:706    .text.matrix_key_count:00000000 matrix_key_count

UNDEFINED SYMBOLS
timer_read
timer_elapsed
bitpop
__do_copy_data
__do_clear_bss
