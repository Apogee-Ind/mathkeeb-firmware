   1               		.file	"action_util.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.get_oneshot_locked_mods,"ax",@progbits
  11               	.global	get_oneshot_locked_mods
  13               	get_oneshot_locked_mods:
  14               	.LFB103:
  15               		.file 1 "./tmk_core/common/action_util.c"
   1:./tmk_core/common/action_util.c **** /*
   2:./tmk_core/common/action_util.c **** Copyright 2013 Jun Wako <wakojun@gmail.com>
   3:./tmk_core/common/action_util.c **** 
   4:./tmk_core/common/action_util.c **** This program is free software: you can redistribute it and/or modify
   5:./tmk_core/common/action_util.c **** it under the terms of the GNU General Public License as published by
   6:./tmk_core/common/action_util.c **** the Free Software Foundation, either version 2 of the License, or
   7:./tmk_core/common/action_util.c **** (at your option) any later version.
   8:./tmk_core/common/action_util.c **** 
   9:./tmk_core/common/action_util.c **** This program is distributed in the hope that it will be useful,
  10:./tmk_core/common/action_util.c **** but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:./tmk_core/common/action_util.c **** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:./tmk_core/common/action_util.c **** GNU General Public License for more details.
  13:./tmk_core/common/action_util.c **** 
  14:./tmk_core/common/action_util.c **** You should have received a copy of the GNU General Public License
  15:./tmk_core/common/action_util.c **** along with this program.  If not, see <http://www.gnu.org/licenses/>.
  16:./tmk_core/common/action_util.c **** */
  17:./tmk_core/common/action_util.c **** #include "host.h"
  18:./tmk_core/common/action_util.c **** #include "report.h"
  19:./tmk_core/common/action_util.c **** #include "debug.h"
  20:./tmk_core/common/action_util.c **** #include "action_util.h"
  21:./tmk_core/common/action_util.c **** #include "action_layer.h"
  22:./tmk_core/common/action_util.c **** #include "timer.h"
  23:./tmk_core/common/action_util.c **** #include "keycode_config.h"
  24:./tmk_core/common/action_util.c **** 
  25:./tmk_core/common/action_util.c **** extern keymap_config_t keymap_config;
  26:./tmk_core/common/action_util.c **** 
  27:./tmk_core/common/action_util.c **** 
  28:./tmk_core/common/action_util.c **** static inline void add_key_byte(uint8_t code);
  29:./tmk_core/common/action_util.c **** static inline void del_key_byte(uint8_t code);
  30:./tmk_core/common/action_util.c **** #ifdef NKRO_ENABLE
  31:./tmk_core/common/action_util.c **** static inline void add_key_bit(uint8_t code);
  32:./tmk_core/common/action_util.c **** static inline void del_key_bit(uint8_t code);
  33:./tmk_core/common/action_util.c **** #endif
  34:./tmk_core/common/action_util.c **** 
  35:./tmk_core/common/action_util.c **** static uint8_t real_mods = 0;
  36:./tmk_core/common/action_util.c **** static uint8_t weak_mods = 0;
  37:./tmk_core/common/action_util.c **** static uint8_t macro_mods = 0;
  38:./tmk_core/common/action_util.c **** 
  39:./tmk_core/common/action_util.c **** #ifdef USB_6KRO_ENABLE
  40:./tmk_core/common/action_util.c **** #define RO_ADD(a, b) ((a + b) % KEYBOARD_REPORT_KEYS)
  41:./tmk_core/common/action_util.c **** #define RO_SUB(a, b) ((a - b + KEYBOARD_REPORT_KEYS) % KEYBOARD_REPORT_KEYS)
  42:./tmk_core/common/action_util.c **** #define RO_INC(a) RO_ADD(a, 1)
  43:./tmk_core/common/action_util.c **** #define RO_DEC(a) RO_SUB(a, 1)
  44:./tmk_core/common/action_util.c **** static int8_t cb_head = 0;
  45:./tmk_core/common/action_util.c **** static int8_t cb_tail = 0;
  46:./tmk_core/common/action_util.c **** static int8_t cb_count = 0;
  47:./tmk_core/common/action_util.c **** #endif
  48:./tmk_core/common/action_util.c **** 
  49:./tmk_core/common/action_util.c **** // TODO: pointer variable is not needed
  50:./tmk_core/common/action_util.c **** //report_keyboard_t keyboard_report = {};
  51:./tmk_core/common/action_util.c **** report_keyboard_t *keyboard_report = &(report_keyboard_t){};
  52:./tmk_core/common/action_util.c **** 
  53:./tmk_core/common/action_util.c **** #ifndef NO_ACTION_ONESHOT
  54:./tmk_core/common/action_util.c **** static int8_t oneshot_mods = 0;
  55:./tmk_core/common/action_util.c **** static int8_t oneshot_locked_mods = 0;
  56:./tmk_core/common/action_util.c **** int8_t get_oneshot_locked_mods(void) { return oneshot_locked_mods; }
  16               		.loc 1 56 0
  17               		.cfi_startproc
  18               	/* prologue: function */
  19               	/* frame size = 0 */
  20               	/* stack size = 0 */
  21               	.L__stack_usage = 0
  22               		.loc 1 56 0
  23 0000 8091 0000 		lds r24,oneshot_locked_mods
  24 0004 0895      		ret
  25               		.cfi_endproc
  26               	.LFE103:
  28               		.section	.text.set_oneshot_locked_mods,"ax",@progbits
  29               	.global	set_oneshot_locked_mods
  31               	set_oneshot_locked_mods:
  32               	.LFB104:
  57:./tmk_core/common/action_util.c **** void set_oneshot_locked_mods(int8_t mods) { oneshot_locked_mods = mods; }
  33               		.loc 1 57 0
  34               		.cfi_startproc
  35               	.LVL0:
  36               	/* prologue: function */
  37               	/* frame size = 0 */
  38               	/* stack size = 0 */
  39               	.L__stack_usage = 0
  40               		.loc 1 57 0
  41 0000 8093 0000 		sts oneshot_locked_mods,r24
  42 0004 0895      		ret
  43               		.cfi_endproc
  44               	.LFE104:
  46               		.section	.text.clear_oneshot_locked_mods,"ax",@progbits
  47               	.global	clear_oneshot_locked_mods
  49               	clear_oneshot_locked_mods:
  50               	.LFB105:
  58:./tmk_core/common/action_util.c **** void clear_oneshot_locked_mods(void) { oneshot_locked_mods = 0; }
  51               		.loc 1 58 0
  52               		.cfi_startproc
  53               	/* prologue: function */
  54               	/* frame size = 0 */
  55               	/* stack size = 0 */
  56               	.L__stack_usage = 0
  57               		.loc 1 58 0
  58 0000 1092 0000 		sts oneshot_locked_mods,__zero_reg__
  59 0004 0895      		ret
  60               		.cfi_endproc
  61               	.LFE105:
  63               		.section	.text.get_oneshot_layer,"ax",@progbits
  64               	.global	get_oneshot_layer
  66               	get_oneshot_layer:
  67               	.LFB106:
  59:./tmk_core/common/action_util.c **** #if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
  60:./tmk_core/common/action_util.c **** static int16_t oneshot_time = 0;
  61:./tmk_core/common/action_util.c **** inline bool has_oneshot_mods_timed_out() {
  62:./tmk_core/common/action_util.c ****   return TIMER_DIFF_16(timer_read(), oneshot_time) >= ONESHOT_TIMEOUT;
  63:./tmk_core/common/action_util.c **** }
  64:./tmk_core/common/action_util.c **** #endif
  65:./tmk_core/common/action_util.c **** #endif
  66:./tmk_core/common/action_util.c **** 
  67:./tmk_core/common/action_util.c **** /* oneshot layer */
  68:./tmk_core/common/action_util.c **** #ifndef NO_ACTION_ONESHOT
  69:./tmk_core/common/action_util.c **** /* oneshot_layer_data bits
  70:./tmk_core/common/action_util.c **** * LLLL LSSS
  71:./tmk_core/common/action_util.c **** * where:
  72:./tmk_core/common/action_util.c **** *   L => are layer bits
  73:./tmk_core/common/action_util.c **** *   S => oneshot state bits
  74:./tmk_core/common/action_util.c **** */
  75:./tmk_core/common/action_util.c **** static int8_t oneshot_layer_data = 0;
  76:./tmk_core/common/action_util.c **** 
  77:./tmk_core/common/action_util.c **** inline uint8_t get_oneshot_layer(void) { return oneshot_layer_data >> 3; }
  68               		.loc 1 77 0
  69               		.cfi_startproc
  70               	/* prologue: function */
  71               	/* frame size = 0 */
  72               	/* stack size = 0 */
  73               	.L__stack_usage = 0
  74               		.loc 1 77 0
  75 0000 8091 0000 		lds r24,oneshot_layer_data
  76 0004 8595      		asr r24
  77 0006 8595      		asr r24
  78 0008 8595      		asr r24
  79 000a 0895      		ret
  80               		.cfi_endproc
  81               	.LFE106:
  83               		.section	.text.get_oneshot_layer_state,"ax",@progbits
  84               	.global	get_oneshot_layer_state
  86               	get_oneshot_layer_state:
  87               	.LFB107:
  78:./tmk_core/common/action_util.c **** inline uint8_t get_oneshot_layer_state(void) { return oneshot_layer_data & 0b111; }
  88               		.loc 1 78 0
  89               		.cfi_startproc
  90               	/* prologue: function */
  91               	/* frame size = 0 */
  92               	/* stack size = 0 */
  93               	.L__stack_usage = 0
  94               		.loc 1 78 0
  95 0000 8091 0000 		lds r24,oneshot_layer_data
  96 0004 8770      		andi r24,lo8(7)
  97 0006 0895      		ret
  98               		.cfi_endproc
  99               	.LFE107:
 101               		.section	.text.set_oneshot_layer,"ax",@progbits
 102               	.global	set_oneshot_layer
 104               	set_oneshot_layer:
 105               	.LFB108:
  79:./tmk_core/common/action_util.c **** 
  80:./tmk_core/common/action_util.c **** #if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
  81:./tmk_core/common/action_util.c **** static int16_t oneshot_layer_time = 0;
  82:./tmk_core/common/action_util.c **** inline bool has_oneshot_layer_timed_out() {
  83:./tmk_core/common/action_util.c ****     return TIMER_DIFF_16(timer_read(), oneshot_layer_time) >= ONESHOT_TIMEOUT &&
  84:./tmk_core/common/action_util.c ****         !(get_oneshot_layer_state() & ONESHOT_TOGGLED);
  85:./tmk_core/common/action_util.c **** }
  86:./tmk_core/common/action_util.c **** #endif
  87:./tmk_core/common/action_util.c **** 
  88:./tmk_core/common/action_util.c **** /* Oneshot layer */
  89:./tmk_core/common/action_util.c **** void set_oneshot_layer(uint8_t layer, uint8_t state)
  90:./tmk_core/common/action_util.c **** {
 106               		.loc 1 90 0
 107               		.cfi_startproc
 108               	.LVL1:
 109               	/* prologue: function */
 110               	/* frame size = 0 */
 111               	/* stack size = 0 */
 112               	.L__stack_usage = 0
  91:./tmk_core/common/action_util.c ****     oneshot_layer_data = layer << 3 | state;
 113               		.loc 1 91 0
 114 0000 98E0      		ldi r25,lo8(8)
 115 0002 899F      		mul r24,r25
 116 0004 9001      		movw r18,r0
 117 0006 1124      		clr __zero_reg__
 118 0008 622B      		or r22,r18
 119               	.LVL2:
 120 000a 6093 0000 		sts oneshot_layer_data,r22
  92:./tmk_core/common/action_util.c ****     layer_on(layer);
 121               		.loc 1 92 0
 122 000e 0C94 0000 		jmp layer_on
 123               	.LVL3:
 124               		.cfi_endproc
 125               	.LFE108:
 127               		.section	.text.reset_oneshot_layer,"ax",@progbits
 128               	.global	reset_oneshot_layer
 130               	reset_oneshot_layer:
 131               	.LFB109:
  93:./tmk_core/common/action_util.c **** #if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
  94:./tmk_core/common/action_util.c ****     oneshot_layer_time = timer_read();
  95:./tmk_core/common/action_util.c **** #endif
  96:./tmk_core/common/action_util.c **** }
  97:./tmk_core/common/action_util.c **** void reset_oneshot_layer(void) {
 132               		.loc 1 97 0
 133               		.cfi_startproc
 134               	/* prologue: function */
 135               	/* frame size = 0 */
 136               	/* stack size = 0 */
 137               	.L__stack_usage = 0
  98:./tmk_core/common/action_util.c ****     oneshot_layer_data = 0;
 138               		.loc 1 98 0
 139 0000 1092 0000 		sts oneshot_layer_data,__zero_reg__
 140 0004 0895      		ret
 141               		.cfi_endproc
 142               	.LFE109:
 144               		.section	.text.clear_oneshot_layer_state,"ax",@progbits
 145               	.global	clear_oneshot_layer_state
 147               	clear_oneshot_layer_state:
 148               	.LFB110:
  99:./tmk_core/common/action_util.c **** #if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
 100:./tmk_core/common/action_util.c ****     oneshot_layer_time = 0;
 101:./tmk_core/common/action_util.c **** #endif
 102:./tmk_core/common/action_util.c **** }
 103:./tmk_core/common/action_util.c **** void clear_oneshot_layer_state(oneshot_fullfillment_t state)
 104:./tmk_core/common/action_util.c **** {
 149               		.loc 1 104 0
 150               		.cfi_startproc
 151               	.LVL4:
 152               	/* prologue: function */
 153               	/* frame size = 0 */
 154               	/* stack size = 0 */
 155               	.L__stack_usage = 0
 105:./tmk_core/common/action_util.c ****     uint8_t start_state = oneshot_layer_data;
 156               		.loc 1 105 0
 157 0000 4091 0000 		lds r20,oneshot_layer_data
 158               	.LVL5:
 106:./tmk_core/common/action_util.c ****     oneshot_layer_data &= ~state;
 159               		.loc 1 106 0
 160 0004 8095      		com r24
 161               	.LVL6:
 162 0006 8423      		and r24,r20
 163               	.LVL7:
 164 0008 8093 0000 		sts oneshot_layer_data,r24
 165               	.LBB8:
 166               	.LBB9:
  78:./tmk_core/common/action_util.c **** 
 167               		.loc 1 78 0
 168 000c 982F      		mov r25,r24
 169 000e 9770      		andi r25,lo8(7)
 170               	.LBE9:
 171               	.LBE8:
 107:./tmk_core/common/action_util.c ****     if (!get_oneshot_layer_state() && start_state != oneshot_layer_data) {
 172               		.loc 1 107 0
 173 0010 01F4      		brne .L8
 174               		.loc 1 107 0 is_stmt 0 discriminator 1
 175 0012 50E0      		ldi r21,0
 176 0014 282F      		mov r18,r24
 177 0016 3327      		clr r19
 178 0018 27FD      		sbrc r18,7
 179 001a 3095      		com r19
 180 001c 4217      		cp r20,r18
 181 001e 5307      		cpc r21,r19
 182 0020 01F0      		breq .L8
 108:./tmk_core/common/action_util.c ****         layer_off(get_oneshot_layer());
 183               		.loc 1 108 0 is_stmt 1
 184 0022 8595      		asr r24
 185 0024 8595      		asr r24
 186 0026 8595      		asr r24
 187 0028 0C94 0000 		jmp layer_off
 188               	.LVL8:
 189               	.L8:
 190 002c 0895      		ret
 191               		.cfi_endproc
 192               	.LFE110:
 194               		.section	.text.is_oneshot_layer_active,"ax",@progbits
 195               	.global	is_oneshot_layer_active
 197               	is_oneshot_layer_active:
 198               	.LFB111:
 109:./tmk_core/common/action_util.c **** #if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
 110:./tmk_core/common/action_util.c ****     oneshot_layer_time = 0;
 111:./tmk_core/common/action_util.c **** #endif
 112:./tmk_core/common/action_util.c ****     }
 113:./tmk_core/common/action_util.c **** }
 114:./tmk_core/common/action_util.c **** bool is_oneshot_layer_active(void)
 115:./tmk_core/common/action_util.c **** {
 199               		.loc 1 115 0
 200               		.cfi_startproc
 201               	/* prologue: function */
 202               	/* frame size = 0 */
 203               	/* stack size = 0 */
 204               	.L__stack_usage = 0
 205               	.LBB10:
 206               	.LBB11:
  78:./tmk_core/common/action_util.c **** 
 207               		.loc 1 78 0
 208 0000 9091 0000 		lds r25,oneshot_layer_data
 209 0004 9770      		andi r25,lo8(7)
 210               	.LBE11:
 211               	.LBE10:
 116:./tmk_core/common/action_util.c ****     return get_oneshot_layer_state();
 212               		.loc 1 116 0
 213 0006 81E0      		ldi r24,lo8(1)
 214 0008 01F4      		brne .L12
 215 000a 80E0      		ldi r24,0
 216               	.L12:
 117:./tmk_core/common/action_util.c **** }
 217               		.loc 1 117 0
 218 000c 0895      		ret
 219               		.cfi_endproc
 220               	.LFE111:
 222               		.section	.text.add_key,"ax",@progbits
 223               	.global	add_key
 225               	add_key:
 226               	.LFB113:
 118:./tmk_core/common/action_util.c **** #endif
 119:./tmk_core/common/action_util.c **** 
 120:./tmk_core/common/action_util.c **** void send_keyboard_report(void) {
 121:./tmk_core/common/action_util.c ****     keyboard_report->mods  = real_mods;
 122:./tmk_core/common/action_util.c ****     keyboard_report->mods |= weak_mods;
 123:./tmk_core/common/action_util.c ****     keyboard_report->mods |= macro_mods;
 124:./tmk_core/common/action_util.c **** #ifndef NO_ACTION_ONESHOT
 125:./tmk_core/common/action_util.c ****     if (oneshot_mods) {
 126:./tmk_core/common/action_util.c **** #if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
 127:./tmk_core/common/action_util.c ****         if (has_oneshot_mods_timed_out()) {
 128:./tmk_core/common/action_util.c ****             dprintf("Oneshot: timeout\n");
 129:./tmk_core/common/action_util.c ****             clear_oneshot_mods();
 130:./tmk_core/common/action_util.c ****         }
 131:./tmk_core/common/action_util.c **** #endif
 132:./tmk_core/common/action_util.c ****         keyboard_report->mods |= oneshot_mods;
 133:./tmk_core/common/action_util.c ****         if (has_anykey()) {
 134:./tmk_core/common/action_util.c ****             clear_oneshot_mods();
 135:./tmk_core/common/action_util.c ****         }
 136:./tmk_core/common/action_util.c ****     }
 137:./tmk_core/common/action_util.c **** 
 138:./tmk_core/common/action_util.c **** #endif
 139:./tmk_core/common/action_util.c ****     host_keyboard_send(keyboard_report);
 140:./tmk_core/common/action_util.c **** }
 141:./tmk_core/common/action_util.c **** 
 142:./tmk_core/common/action_util.c **** /* key */
 143:./tmk_core/common/action_util.c **** void add_key(uint8_t key)
 144:./tmk_core/common/action_util.c **** {
 227               		.loc 1 144 0
 228               		.cfi_startproc
 229               	.LVL9:
 230               	/* prologue: function */
 231               	/* frame size = 0 */
 232               	/* stack size = 0 */
 233               	.L__stack_usage = 0
 145:./tmk_core/common/action_util.c **** #ifdef NKRO_ENABLE
 146:./tmk_core/common/action_util.c ****     if (keyboard_protocol && keymap_config.nkro) {
 234               		.loc 1 146 0
 235 0000 9091 0000 		lds r25,keyboard_protocol
 236 0004 9923      		tst r25
 237 0006 01F0      		breq .L14
 238               		.loc 1 146 0 is_stmt 0 discriminator 1
 239 0008 9091 0000 		lds r25,keymap_config
 240 000c 97FF      		sbrs r25,7
 241 000e 00C0      		rjmp .L14
 242               	.LVL10:
 243               	.LBB16:
 244               	.LBB17:
 147:./tmk_core/common/action_util.c ****         add_key_bit(key);
 148:./tmk_core/common/action_util.c ****         return;
 149:./tmk_core/common/action_util.c ****     }
 150:./tmk_core/common/action_util.c **** #endif
 151:./tmk_core/common/action_util.c ****     add_key_byte(key);
 152:./tmk_core/common/action_util.c **** }
 153:./tmk_core/common/action_util.c **** 
 154:./tmk_core/common/action_util.c **** void del_key(uint8_t key)
 155:./tmk_core/common/action_util.c **** {
 156:./tmk_core/common/action_util.c **** #ifdef NKRO_ENABLE
 157:./tmk_core/common/action_util.c ****     if (keyboard_protocol && keymap_config.nkro) {
 158:./tmk_core/common/action_util.c ****         del_key_bit(key);
 159:./tmk_core/common/action_util.c ****         return;
 160:./tmk_core/common/action_util.c ****     }
 161:./tmk_core/common/action_util.c **** #endif
 162:./tmk_core/common/action_util.c ****     del_key_byte(key);
 163:./tmk_core/common/action_util.c **** }
 164:./tmk_core/common/action_util.c **** 
 165:./tmk_core/common/action_util.c **** void clear_keys(void)
 166:./tmk_core/common/action_util.c **** {
 167:./tmk_core/common/action_util.c ****     // not clear mods
 168:./tmk_core/common/action_util.c ****     for (int8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
 169:./tmk_core/common/action_util.c ****         keyboard_report->raw[i] = 0;
 170:./tmk_core/common/action_util.c ****     }
 171:./tmk_core/common/action_util.c **** }
 172:./tmk_core/common/action_util.c **** 
 173:./tmk_core/common/action_util.c **** 
 174:./tmk_core/common/action_util.c **** /* modifier */
 175:./tmk_core/common/action_util.c **** uint8_t get_mods(void) { return real_mods; }
 176:./tmk_core/common/action_util.c **** void add_mods(uint8_t mods) { real_mods |= mods; }
 177:./tmk_core/common/action_util.c **** void del_mods(uint8_t mods) { real_mods &= ~mods; }
 178:./tmk_core/common/action_util.c **** void set_mods(uint8_t mods) { real_mods = mods; }
 179:./tmk_core/common/action_util.c **** void clear_mods(void) { real_mods = 0; }
 180:./tmk_core/common/action_util.c **** 
 181:./tmk_core/common/action_util.c **** /* weak modifier */
 182:./tmk_core/common/action_util.c **** uint8_t get_weak_mods(void) { return weak_mods; }
 183:./tmk_core/common/action_util.c **** void add_weak_mods(uint8_t mods) { weak_mods |= mods; }
 184:./tmk_core/common/action_util.c **** void del_weak_mods(uint8_t mods) { weak_mods &= ~mods; }
 185:./tmk_core/common/action_util.c **** void set_weak_mods(uint8_t mods) { weak_mods = mods; }
 186:./tmk_core/common/action_util.c **** void clear_weak_mods(void) { weak_mods = 0; }
 187:./tmk_core/common/action_util.c **** 
 188:./tmk_core/common/action_util.c **** /* macro modifier */
 189:./tmk_core/common/action_util.c **** uint8_t get_macro_mods(void) { return macro_mods; }
 190:./tmk_core/common/action_util.c **** void add_macro_mods(uint8_t mods) { macro_mods |= mods; }
 191:./tmk_core/common/action_util.c **** void del_macro_mods(uint8_t mods) { macro_mods &= ~mods; }
 192:./tmk_core/common/action_util.c **** void set_macro_mods(uint8_t mods) { macro_mods = mods; }
 193:./tmk_core/common/action_util.c **** void clear_macro_mods(void) { macro_mods = 0; }
 194:./tmk_core/common/action_util.c **** 
 195:./tmk_core/common/action_util.c **** /* Oneshot modifier */
 196:./tmk_core/common/action_util.c **** #ifndef NO_ACTION_ONESHOT
 197:./tmk_core/common/action_util.c **** void set_oneshot_mods(uint8_t mods)
 198:./tmk_core/common/action_util.c **** {
 199:./tmk_core/common/action_util.c ****     oneshot_mods = mods;
 200:./tmk_core/common/action_util.c **** #if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
 201:./tmk_core/common/action_util.c ****     oneshot_time = timer_read();
 202:./tmk_core/common/action_util.c **** #endif
 203:./tmk_core/common/action_util.c **** }
 204:./tmk_core/common/action_util.c **** void clear_oneshot_mods(void)
 205:./tmk_core/common/action_util.c **** {
 206:./tmk_core/common/action_util.c ****     oneshot_mods = 0;
 207:./tmk_core/common/action_util.c **** #if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
 208:./tmk_core/common/action_util.c ****     oneshot_time = 0;
 209:./tmk_core/common/action_util.c **** #endif
 210:./tmk_core/common/action_util.c **** }
 211:./tmk_core/common/action_util.c **** uint8_t get_oneshot_mods(void)
 212:./tmk_core/common/action_util.c **** {
 213:./tmk_core/common/action_util.c ****     return oneshot_mods;
 214:./tmk_core/common/action_util.c **** }
 215:./tmk_core/common/action_util.c **** #endif
 216:./tmk_core/common/action_util.c **** 
 217:./tmk_core/common/action_util.c **** /*
 218:./tmk_core/common/action_util.c ****  * inspect keyboard state
 219:./tmk_core/common/action_util.c ****  */
 220:./tmk_core/common/action_util.c **** uint8_t has_anykey(void)
 221:./tmk_core/common/action_util.c **** {
 222:./tmk_core/common/action_util.c ****     uint8_t cnt = 0;
 223:./tmk_core/common/action_util.c ****     for (uint8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
 224:./tmk_core/common/action_util.c ****         if (keyboard_report->raw[i])
 225:./tmk_core/common/action_util.c ****             cnt++;
 226:./tmk_core/common/action_util.c ****     }
 227:./tmk_core/common/action_util.c ****     return cnt;
 228:./tmk_core/common/action_util.c **** }
 229:./tmk_core/common/action_util.c **** 
 230:./tmk_core/common/action_util.c **** uint8_t has_anymod(void)
 231:./tmk_core/common/action_util.c **** {
 232:./tmk_core/common/action_util.c ****     return bitpop(real_mods);
 233:./tmk_core/common/action_util.c **** }
 234:./tmk_core/common/action_util.c **** 
 235:./tmk_core/common/action_util.c **** uint8_t get_first_key(void)
 236:./tmk_core/common/action_util.c **** {
 237:./tmk_core/common/action_util.c **** #ifdef NKRO_ENABLE
 238:./tmk_core/common/action_util.c ****     if (keyboard_protocol && keymap_config.nkro) {
 239:./tmk_core/common/action_util.c ****         uint8_t i = 0;
 240:./tmk_core/common/action_util.c ****         for (; i < KEYBOARD_REPORT_BITS && !keyboard_report->nkro.bits[i]; i++)
 241:./tmk_core/common/action_util.c ****             ;
 242:./tmk_core/common/action_util.c ****         return i<<3 | biton(keyboard_report->nkro.bits[i]);
 243:./tmk_core/common/action_util.c ****     }
 244:./tmk_core/common/action_util.c **** #endif
 245:./tmk_core/common/action_util.c **** #ifdef USB_6KRO_ENABLE
 246:./tmk_core/common/action_util.c ****     uint8_t i = cb_head;
 247:./tmk_core/common/action_util.c ****     do {
 248:./tmk_core/common/action_util.c ****         if (keyboard_report->keys[i] != 0) {
 249:./tmk_core/common/action_util.c ****             break;
 250:./tmk_core/common/action_util.c ****         }
 251:./tmk_core/common/action_util.c ****         i = RO_INC(i);
 252:./tmk_core/common/action_util.c ****     } while (i != cb_tail);
 253:./tmk_core/common/action_util.c ****     return keyboard_report->keys[i];
 254:./tmk_core/common/action_util.c **** #else
 255:./tmk_core/common/action_util.c ****     return keyboard_report->keys[0];
 256:./tmk_core/common/action_util.c **** #endif
 257:./tmk_core/common/action_util.c **** }
 258:./tmk_core/common/action_util.c **** 
 259:./tmk_core/common/action_util.c **** 
 260:./tmk_core/common/action_util.c **** 
 261:./tmk_core/common/action_util.c **** /* local functions */
 262:./tmk_core/common/action_util.c **** static inline void add_key_byte(uint8_t code)
 263:./tmk_core/common/action_util.c **** {
 264:./tmk_core/common/action_util.c **** #ifdef USB_6KRO_ENABLE
 265:./tmk_core/common/action_util.c ****     int8_t i = cb_head;
 266:./tmk_core/common/action_util.c ****     int8_t empty = -1;
 267:./tmk_core/common/action_util.c ****     if (cb_count) {
 268:./tmk_core/common/action_util.c ****         do {
 269:./tmk_core/common/action_util.c ****             if (keyboard_report->keys[i] == code) {
 270:./tmk_core/common/action_util.c ****                 return;
 271:./tmk_core/common/action_util.c ****             }
 272:./tmk_core/common/action_util.c ****             if (empty == -1 && keyboard_report->keys[i] == 0) {
 273:./tmk_core/common/action_util.c ****                 empty = i;
 274:./tmk_core/common/action_util.c ****             }
 275:./tmk_core/common/action_util.c ****             i = RO_INC(i);
 276:./tmk_core/common/action_util.c ****         } while (i != cb_tail);
 277:./tmk_core/common/action_util.c ****         if (i == cb_tail) {
 278:./tmk_core/common/action_util.c ****             if (cb_tail == cb_head) {
 279:./tmk_core/common/action_util.c ****                 // buffer is full
 280:./tmk_core/common/action_util.c ****                 if (empty == -1) {
 281:./tmk_core/common/action_util.c ****                     // pop head when has no empty space
 282:./tmk_core/common/action_util.c ****                     cb_head = RO_INC(cb_head);
 283:./tmk_core/common/action_util.c ****                     cb_count--;
 284:./tmk_core/common/action_util.c ****                 }
 285:./tmk_core/common/action_util.c ****                 else {
 286:./tmk_core/common/action_util.c ****                     // left shift when has empty space
 287:./tmk_core/common/action_util.c ****                     uint8_t offset = 1;
 288:./tmk_core/common/action_util.c ****                     i = RO_INC(empty);
 289:./tmk_core/common/action_util.c ****                     do {
 290:./tmk_core/common/action_util.c ****                         if (keyboard_report->keys[i] != 0) {
 291:./tmk_core/common/action_util.c ****                             keyboard_report->keys[empty] = keyboard_report->keys[i];
 292:./tmk_core/common/action_util.c ****                             keyboard_report->keys[i] = 0;
 293:./tmk_core/common/action_util.c ****                             empty = RO_INC(empty);
 294:./tmk_core/common/action_util.c ****                         }
 295:./tmk_core/common/action_util.c ****                         else {
 296:./tmk_core/common/action_util.c ****                             offset++;
 297:./tmk_core/common/action_util.c ****                         }
 298:./tmk_core/common/action_util.c ****                         i = RO_INC(i);
 299:./tmk_core/common/action_util.c ****                     } while (i != cb_tail);
 300:./tmk_core/common/action_util.c ****                     cb_tail = RO_SUB(cb_tail, offset);
 301:./tmk_core/common/action_util.c ****                 }
 302:./tmk_core/common/action_util.c ****             }
 303:./tmk_core/common/action_util.c ****         }
 304:./tmk_core/common/action_util.c ****     }
 305:./tmk_core/common/action_util.c ****     // add to tail
 306:./tmk_core/common/action_util.c ****     keyboard_report->keys[cb_tail] = code;
 307:./tmk_core/common/action_util.c ****     cb_tail = RO_INC(cb_tail);
 308:./tmk_core/common/action_util.c ****     cb_count++;
 309:./tmk_core/common/action_util.c **** #else
 310:./tmk_core/common/action_util.c ****     int8_t i = 0;
 311:./tmk_core/common/action_util.c ****     int8_t empty = -1;
 312:./tmk_core/common/action_util.c ****     for (; i < KEYBOARD_REPORT_KEYS; i++) {
 313:./tmk_core/common/action_util.c ****         if (keyboard_report->keys[i] == code) {
 314:./tmk_core/common/action_util.c ****             break;
 315:./tmk_core/common/action_util.c ****         }
 316:./tmk_core/common/action_util.c ****         if (empty == -1 && keyboard_report->keys[i] == 0) {
 317:./tmk_core/common/action_util.c ****             empty = i;
 318:./tmk_core/common/action_util.c ****         }
 319:./tmk_core/common/action_util.c ****     }
 320:./tmk_core/common/action_util.c ****     if (i == KEYBOARD_REPORT_KEYS) {
 321:./tmk_core/common/action_util.c ****         if (empty != -1) {
 322:./tmk_core/common/action_util.c ****             keyboard_report->keys[empty] = code;
 323:./tmk_core/common/action_util.c ****         }
 324:./tmk_core/common/action_util.c ****     }
 325:./tmk_core/common/action_util.c **** #endif
 326:./tmk_core/common/action_util.c **** }
 327:./tmk_core/common/action_util.c **** 
 328:./tmk_core/common/action_util.c **** static inline void del_key_byte(uint8_t code)
 329:./tmk_core/common/action_util.c **** {
 330:./tmk_core/common/action_util.c **** #ifdef USB_6KRO_ENABLE
 331:./tmk_core/common/action_util.c ****     uint8_t i = cb_head;
 332:./tmk_core/common/action_util.c ****     if (cb_count) {
 333:./tmk_core/common/action_util.c ****         do {
 334:./tmk_core/common/action_util.c ****             if (keyboard_report->keys[i] == code) {
 335:./tmk_core/common/action_util.c ****                 keyboard_report->keys[i] = 0;
 336:./tmk_core/common/action_util.c ****                 cb_count--;
 337:./tmk_core/common/action_util.c ****                 if (cb_count == 0) {
 338:./tmk_core/common/action_util.c ****                     // reset head and tail
 339:./tmk_core/common/action_util.c ****                     cb_tail = cb_head = 0;
 340:./tmk_core/common/action_util.c ****                 }
 341:./tmk_core/common/action_util.c ****                 if (i == RO_DEC(cb_tail)) {
 342:./tmk_core/common/action_util.c ****                     // left shift when next to tail
 343:./tmk_core/common/action_util.c ****                     do {
 344:./tmk_core/common/action_util.c ****                         cb_tail = RO_DEC(cb_tail);
 345:./tmk_core/common/action_util.c ****                         if (keyboard_report->keys[RO_DEC(cb_tail)] != 0) {
 346:./tmk_core/common/action_util.c ****                             break;
 347:./tmk_core/common/action_util.c ****                         }
 348:./tmk_core/common/action_util.c ****                     } while (cb_tail != cb_head);
 349:./tmk_core/common/action_util.c ****                 }
 350:./tmk_core/common/action_util.c ****                 break;
 351:./tmk_core/common/action_util.c ****             }
 352:./tmk_core/common/action_util.c ****             i = RO_INC(i);
 353:./tmk_core/common/action_util.c ****         } while (i != cb_tail);
 354:./tmk_core/common/action_util.c ****     }
 355:./tmk_core/common/action_util.c **** #else
 356:./tmk_core/common/action_util.c ****     for (uint8_t i = 0; i < KEYBOARD_REPORT_KEYS; i++) {
 357:./tmk_core/common/action_util.c ****         if (keyboard_report->keys[i] == code) {
 358:./tmk_core/common/action_util.c ****             keyboard_report->keys[i] = 0;
 359:./tmk_core/common/action_util.c ****         }
 360:./tmk_core/common/action_util.c ****     }
 361:./tmk_core/common/action_util.c **** #endif
 362:./tmk_core/common/action_util.c **** }
 363:./tmk_core/common/action_util.c **** 
 364:./tmk_core/common/action_util.c **** #ifdef NKRO_ENABLE
 365:./tmk_core/common/action_util.c **** static inline void add_key_bit(uint8_t code)
 366:./tmk_core/common/action_util.c **** {
 367:./tmk_core/common/action_util.c ****     if ((code>>3) < KEYBOARD_REPORT_BITS) {
 245               		.loc 1 367 0 is_stmt 1
 246 0010 982F      		mov r25,r24
 247 0012 9695      		lsr r25
 248 0014 9695      		lsr r25
 249 0016 9695      		lsr r25
 250 0018 9F31      		cpi r25,lo8(31)
 251 001a 00F4      		brsh .L13
 368:./tmk_core/common/action_util.c ****         keyboard_report->nkro.bits[code>>3] |= 1<<(code&7);
 252               		.loc 1 368 0
 253 001c E091 0000 		lds r30,keyboard_report
 254 0020 F091 0000 		lds r31,keyboard_report+1
 255 0024 E90F      		add r30,r25
 256 0026 F11D      		adc r31,__zero_reg__
 257 0028 8770      		andi r24,lo8(7)
 258               	.LVL11:
 259 002a 21E0      		ldi r18,lo8(1)
 260 002c 30E0      		ldi r19,0
 261 002e 00C0      		rjmp 2f
 262               		1:
 263 0030 220F      		lsl r18
 264               		2:
 265 0032 8A95      		dec r24
 266 0034 02F4      		brpl 1b
 267 0036 8181      		ldd r24,Z+1
 268 0038 822B      		or r24,r18
 269 003a 8183      		std Z+1,r24
 270 003c 0895      		ret
 271               	.LVL12:
 272               	.L14:
 273               	.LBE17:
 274               	.LBE16:
 275               	.LBB18:
 276               	.LBB19:
 313:./tmk_core/common/action_util.c ****             break;
 277               		.loc 1 313 0
 278 003e 4091 0000 		lds r20,keyboard_report
 279 0042 5091 0000 		lds r21,keyboard_report+1
 280 0046 20E0      		ldi r18,0
 281 0048 30E0      		ldi r19,0
 282 004a 9FEF      		ldi r25,lo8(-1)
 283               	.L18:
 284               	.LVL13:
 285 004c FA01      		movw r30,r20
 286 004e E20F      		add r30,r18
 287 0050 F31F      		adc r31,r19
 288 0052 6281      		ldd r22,Z+2
 289 0054 6817      		cp r22,r24
 290 0056 01F0      		breq .L13
 316:./tmk_core/common/action_util.c ****             empty = i;
 291               		.loc 1 316 0
 292 0058 9F3F      		cpi r25,lo8(-1)
 293 005a 01F4      		brne .L16
 294 005c 6111      		cpse r22,__zero_reg__
 295 005e 00C0      		rjmp .L16
 296 0060 922F      		mov r25,r18
 297               	.LVL14:
 298               	.L16:
 299 0062 2F5F      		subi r18,-1
 300 0064 3F4F      		sbci r19,-1
 301               	.LVL15:
 312:./tmk_core/common/action_util.c ****         if (keyboard_report->keys[i] == code) {
 302               		.loc 1 312 0
 303 0066 2E31      		cpi r18,30
 304 0068 3105      		cpc r19,__zero_reg__
 305 006a 01F4      		brne .L18
 321:./tmk_core/common/action_util.c ****             keyboard_report->keys[empty] = code;
 306               		.loc 1 321 0
 307 006c 9F3F      		cpi r25,lo8(-1)
 308 006e 01F0      		breq .L13
 322:./tmk_core/common/action_util.c ****         }
 309               		.loc 1 322 0
 310 0070 FA01      		movw r30,r20
 311 0072 E90F      		add r30,r25
 312 0074 F11D      		adc r31,__zero_reg__
 313 0076 97FD      		sbrc r25,7
 314 0078 FA95      		dec r31
 315 007a 8283      		std Z+2,r24
 316 007c 0895      		ret
 317               	.LVL16:
 318               	.L13:
 319 007e 0895      		ret
 320               	.LBE19:
 321               	.LBE18:
 322               		.cfi_endproc
 323               	.LFE113:
 325               		.section	.text.del_key,"ax",@progbits
 326               	.global	del_key
 328               	del_key:
 329               	.LFB114:
 155:./tmk_core/common/action_util.c **** #ifdef NKRO_ENABLE
 330               		.loc 1 155 0
 331               		.cfi_startproc
 332               	.LVL17:
 333               	/* prologue: function */
 334               	/* frame size = 0 */
 335               	/* stack size = 0 */
 336               	.L__stack_usage = 0
 157:./tmk_core/common/action_util.c ****         del_key_bit(key);
 337               		.loc 1 157 0
 338 0000 9091 0000 		lds r25,keyboard_protocol
 339 0004 9923      		tst r25
 340 0006 01F0      		breq .L28
 157:./tmk_core/common/action_util.c ****         del_key_bit(key);
 341               		.loc 1 157 0 is_stmt 0 discriminator 1
 342 0008 9091 0000 		lds r25,keymap_config
 343 000c 97FF      		sbrs r25,7
 344 000e 00C0      		rjmp .L28
 345               	.LVL18:
 346               	.LBB25:
 347               	.LBB26:
 369:./tmk_core/common/action_util.c ****     } else {
 370:./tmk_core/common/action_util.c ****         dprintf("add_key_bit: can't add: %02X\n", code);
 371:./tmk_core/common/action_util.c ****     }
 372:./tmk_core/common/action_util.c **** }
 373:./tmk_core/common/action_util.c **** 
 374:./tmk_core/common/action_util.c **** static inline void del_key_bit(uint8_t code)
 375:./tmk_core/common/action_util.c **** {
 376:./tmk_core/common/action_util.c ****     if ((code>>3) < KEYBOARD_REPORT_BITS) {
 348               		.loc 1 376 0 is_stmt 1
 349 0010 982F      		mov r25,r24
 350 0012 9695      		lsr r25
 351 0014 9695      		lsr r25
 352 0016 9695      		lsr r25
 353 0018 9F31      		cpi r25,lo8(31)
 354 001a 00F4      		brsh .L27
 377:./tmk_core/common/action_util.c ****         keyboard_report->nkro.bits[code>>3] &= ~(1<<(code&7));
 355               		.loc 1 377 0
 356 001c E091 0000 		lds r30,keyboard_report
 357 0020 F091 0000 		lds r31,keyboard_report+1
 358 0024 E90F      		add r30,r25
 359 0026 F11D      		adc r31,__zero_reg__
 360 0028 8770      		andi r24,lo8(7)
 361               	.LVL19:
 362 002a 21E0      		ldi r18,lo8(1)
 363 002c 30E0      		ldi r19,0
 364 002e 00C0      		rjmp 2f
 365               		1:
 366 0030 220F      		lsl r18
 367               		2:
 368 0032 8A95      		dec r24
 369 0034 02F4      		brpl 1b
 370 0036 2095      		com r18
 371 0038 8181      		ldd r24,Z+1
 372 003a 2823      		and r18,r24
 373 003c 2183      		std Z+1,r18
 374 003e 0895      		ret
 375               	.LVL20:
 376               	.L28:
 377               	.LBE26:
 378               	.LBE25:
 379               	.LBB27:
 380               	.LBB28:
 357:./tmk_core/common/action_util.c ****             keyboard_report->keys[i] = 0;
 381               		.loc 1 357 0
 382 0040 4091 0000 		lds r20,keyboard_report
 383 0044 5091 0000 		lds r21,keyboard_report+1
 384 0048 20E0      		ldi r18,0
 385 004a 30E0      		ldi r19,0
 386               	.L33:
 387               	.LVL21:
 388 004c FA01      		movw r30,r20
 389 004e E20F      		add r30,r18
 390 0050 F31F      		adc r31,r19
 391 0052 9281      		ldd r25,Z+2
 392 0054 9813      		cpse r25,r24
 393 0056 00C0      		rjmp .L31
 358:./tmk_core/common/action_util.c ****         }
 394               		.loc 1 358 0
 395 0058 1282      		std Z+2,__zero_reg__
 396               	.L31:
 397               	.LVL22:
 398 005a 2F5F      		subi r18,-1
 399 005c 3F4F      		sbci r19,-1
 400               	.LVL23:
 356:./tmk_core/common/action_util.c ****         if (keyboard_report->keys[i] == code) {
 401               		.loc 1 356 0
 402 005e 2E31      		cpi r18,30
 403 0060 3105      		cpc r19,__zero_reg__
 404 0062 01F4      		brne .L33
 405               	.LVL24:
 406               	.L27:
 407 0064 0895      		ret
 408               	.LBE28:
 409               	.LBE27:
 410               		.cfi_endproc
 411               	.LFE114:
 413               		.section	.text.clear_keys,"ax",@progbits
 414               	.global	clear_keys
 416               	clear_keys:
 417               	.LFB115:
 166:./tmk_core/common/action_util.c ****     // not clear mods
 418               		.loc 1 166 0
 419               		.cfi_startproc
 420               	/* prologue: function */
 421               	/* frame size = 0 */
 422               	/* stack size = 0 */
 423               	.L__stack_usage = 0
 424               	.LVL25:
 166:./tmk_core/common/action_util.c ****     // not clear mods
 425               		.loc 1 166 0
 426 0000 81E0      		ldi r24,lo8(1)
 427 0002 90E0      		ldi r25,0
 428               	.LVL26:
 429               	.L45:
 430               	.LBB29:
 169:./tmk_core/common/action_util.c ****     }
 431               		.loc 1 169 0 discriminator 2
 432 0004 E091 0000 		lds r30,keyboard_report
 433 0008 F091 0000 		lds r31,keyboard_report+1
 434 000c E80F      		add r30,r24
 435 000e F91F      		adc r31,r25
 436 0010 1082      		st Z,__zero_reg__
 437               	.LVL27:
 438 0012 0196      		adiw r24,1
 439               	.LVL28:
 168:./tmk_core/common/action_util.c ****         keyboard_report->raw[i] = 0;
 440               		.loc 1 168 0 discriminator 2
 441 0014 8032      		cpi r24,32
 442 0016 9105      		cpc r25,__zero_reg__
 443 0018 01F4      		brne .L45
 444               	/* epilogue start */
 445               	.LBE29:
 171:./tmk_core/common/action_util.c **** 
 446               		.loc 1 171 0
 447 001a 0895      		ret
 448               		.cfi_endproc
 449               	.LFE115:
 451               		.section	.text.get_mods,"ax",@progbits
 452               	.global	get_mods
 454               	get_mods:
 455               	.LFB116:
 175:./tmk_core/common/action_util.c **** void add_mods(uint8_t mods) { real_mods |= mods; }
 456               		.loc 1 175 0
 457               		.cfi_startproc
 458               	/* prologue: function */
 459               	/* frame size = 0 */
 460               	/* stack size = 0 */
 461               	.L__stack_usage = 0
 175:./tmk_core/common/action_util.c **** void add_mods(uint8_t mods) { real_mods |= mods; }
 462               		.loc 1 175 0
 463 0000 8091 0000 		lds r24,real_mods
 464 0004 0895      		ret
 465               		.cfi_endproc
 466               	.LFE116:
 468               		.section	.text.add_mods,"ax",@progbits
 469               	.global	add_mods
 471               	add_mods:
 472               	.LFB117:
 176:./tmk_core/common/action_util.c **** void del_mods(uint8_t mods) { real_mods &= ~mods; }
 473               		.loc 1 176 0
 474               		.cfi_startproc
 475               	.LVL29:
 476               	/* prologue: function */
 477               	/* frame size = 0 */
 478               	/* stack size = 0 */
 479               	.L__stack_usage = 0
 176:./tmk_core/common/action_util.c **** void del_mods(uint8_t mods) { real_mods &= ~mods; }
 480               		.loc 1 176 0
 481 0000 9091 0000 		lds r25,real_mods
 482 0004 982B      		or r25,r24
 483 0006 9093 0000 		sts real_mods,r25
 484 000a 0895      		ret
 485               		.cfi_endproc
 486               	.LFE117:
 488               		.section	.text.del_mods,"ax",@progbits
 489               	.global	del_mods
 491               	del_mods:
 492               	.LFB118:
 177:./tmk_core/common/action_util.c **** void set_mods(uint8_t mods) { real_mods = mods; }
 493               		.loc 1 177 0
 494               		.cfi_startproc
 495               	.LVL30:
 496               	/* prologue: function */
 497               	/* frame size = 0 */
 498               	/* stack size = 0 */
 499               	.L__stack_usage = 0
 177:./tmk_core/common/action_util.c **** void set_mods(uint8_t mods) { real_mods = mods; }
 500               		.loc 1 177 0
 501 0000 8095      		com r24
 502               	.LVL31:
 503 0002 9091 0000 		lds r25,real_mods
 504 0006 9823      		and r25,r24
 505 0008 9093 0000 		sts real_mods,r25
 506 000c 0895      		ret
 507               		.cfi_endproc
 508               	.LFE118:
 510               		.section	.text.set_mods,"ax",@progbits
 511               	.global	set_mods
 513               	set_mods:
 514               	.LFB119:
 178:./tmk_core/common/action_util.c **** void clear_mods(void) { real_mods = 0; }
 515               		.loc 1 178 0
 516               		.cfi_startproc
 517               	.LVL32:
 518               	/* prologue: function */
 519               	/* frame size = 0 */
 520               	/* stack size = 0 */
 521               	.L__stack_usage = 0
 178:./tmk_core/common/action_util.c **** void clear_mods(void) { real_mods = 0; }
 522               		.loc 1 178 0
 523 0000 8093 0000 		sts real_mods,r24
 524 0004 0895      		ret
 525               		.cfi_endproc
 526               	.LFE119:
 528               		.section	.text.clear_mods,"ax",@progbits
 529               	.global	clear_mods
 531               	clear_mods:
 532               	.LFB120:
 179:./tmk_core/common/action_util.c **** 
 533               		.loc 1 179 0
 534               		.cfi_startproc
 535               	/* prologue: function */
 536               	/* frame size = 0 */
 537               	/* stack size = 0 */
 538               	.L__stack_usage = 0
 179:./tmk_core/common/action_util.c **** 
 539               		.loc 1 179 0
 540 0000 1092 0000 		sts real_mods,__zero_reg__
 541 0004 0895      		ret
 542               		.cfi_endproc
 543               	.LFE120:
 545               		.section	.text.get_weak_mods,"ax",@progbits
 546               	.global	get_weak_mods
 548               	get_weak_mods:
 549               	.LFB121:
 182:./tmk_core/common/action_util.c **** void add_weak_mods(uint8_t mods) { weak_mods |= mods; }
 550               		.loc 1 182 0
 551               		.cfi_startproc
 552               	/* prologue: function */
 553               	/* frame size = 0 */
 554               	/* stack size = 0 */
 555               	.L__stack_usage = 0
 182:./tmk_core/common/action_util.c **** void add_weak_mods(uint8_t mods) { weak_mods |= mods; }
 556               		.loc 1 182 0
 557 0000 8091 0000 		lds r24,weak_mods
 558 0004 0895      		ret
 559               		.cfi_endproc
 560               	.LFE121:
 562               		.section	.text.add_weak_mods,"ax",@progbits
 563               	.global	add_weak_mods
 565               	add_weak_mods:
 566               	.LFB122:
 183:./tmk_core/common/action_util.c **** void del_weak_mods(uint8_t mods) { weak_mods &= ~mods; }
 567               		.loc 1 183 0
 568               		.cfi_startproc
 569               	.LVL33:
 570               	/* prologue: function */
 571               	/* frame size = 0 */
 572               	/* stack size = 0 */
 573               	.L__stack_usage = 0
 183:./tmk_core/common/action_util.c **** void del_weak_mods(uint8_t mods) { weak_mods &= ~mods; }
 574               		.loc 1 183 0
 575 0000 9091 0000 		lds r25,weak_mods
 576 0004 982B      		or r25,r24
 577 0006 9093 0000 		sts weak_mods,r25
 578 000a 0895      		ret
 579               		.cfi_endproc
 580               	.LFE122:
 582               		.section	.text.del_weak_mods,"ax",@progbits
 583               	.global	del_weak_mods
 585               	del_weak_mods:
 586               	.LFB123:
 184:./tmk_core/common/action_util.c **** void set_weak_mods(uint8_t mods) { weak_mods = mods; }
 587               		.loc 1 184 0
 588               		.cfi_startproc
 589               	.LVL34:
 590               	/* prologue: function */
 591               	/* frame size = 0 */
 592               	/* stack size = 0 */
 593               	.L__stack_usage = 0
 184:./tmk_core/common/action_util.c **** void set_weak_mods(uint8_t mods) { weak_mods = mods; }
 594               		.loc 1 184 0
 595 0000 8095      		com r24
 596               	.LVL35:
 597 0002 9091 0000 		lds r25,weak_mods
 598 0006 9823      		and r25,r24
 599 0008 9093 0000 		sts weak_mods,r25
 600 000c 0895      		ret
 601               		.cfi_endproc
 602               	.LFE123:
 604               		.section	.text.set_weak_mods,"ax",@progbits
 605               	.global	set_weak_mods
 607               	set_weak_mods:
 608               	.LFB124:
 185:./tmk_core/common/action_util.c **** void clear_weak_mods(void) { weak_mods = 0; }
 609               		.loc 1 185 0
 610               		.cfi_startproc
 611               	.LVL36:
 612               	/* prologue: function */
 613               	/* frame size = 0 */
 614               	/* stack size = 0 */
 615               	.L__stack_usage = 0
 185:./tmk_core/common/action_util.c **** void clear_weak_mods(void) { weak_mods = 0; }
 616               		.loc 1 185 0
 617 0000 8093 0000 		sts weak_mods,r24
 618 0004 0895      		ret
 619               		.cfi_endproc
 620               	.LFE124:
 622               		.section	.text.clear_weak_mods,"ax",@progbits
 623               	.global	clear_weak_mods
 625               	clear_weak_mods:
 626               	.LFB125:
 186:./tmk_core/common/action_util.c **** 
 627               		.loc 1 186 0
 628               		.cfi_startproc
 629               	/* prologue: function */
 630               	/* frame size = 0 */
 631               	/* stack size = 0 */
 632               	.L__stack_usage = 0
 186:./tmk_core/common/action_util.c **** 
 633               		.loc 1 186 0
 634 0000 1092 0000 		sts weak_mods,__zero_reg__
 635 0004 0895      		ret
 636               		.cfi_endproc
 637               	.LFE125:
 639               		.section	.text.get_macro_mods,"ax",@progbits
 640               	.global	get_macro_mods
 642               	get_macro_mods:
 643               	.LFB126:
 189:./tmk_core/common/action_util.c **** void add_macro_mods(uint8_t mods) { macro_mods |= mods; }
 644               		.loc 1 189 0
 645               		.cfi_startproc
 646               	/* prologue: function */
 647               	/* frame size = 0 */
 648               	/* stack size = 0 */
 649               	.L__stack_usage = 0
 189:./tmk_core/common/action_util.c **** void add_macro_mods(uint8_t mods) { macro_mods |= mods; }
 650               		.loc 1 189 0
 651 0000 8091 0000 		lds r24,macro_mods
 652 0004 0895      		ret
 653               		.cfi_endproc
 654               	.LFE126:
 656               		.section	.text.add_macro_mods,"ax",@progbits
 657               	.global	add_macro_mods
 659               	add_macro_mods:
 660               	.LFB127:
 190:./tmk_core/common/action_util.c **** void del_macro_mods(uint8_t mods) { macro_mods &= ~mods; }
 661               		.loc 1 190 0
 662               		.cfi_startproc
 663               	.LVL37:
 664               	/* prologue: function */
 665               	/* frame size = 0 */
 666               	/* stack size = 0 */
 667               	.L__stack_usage = 0
 190:./tmk_core/common/action_util.c **** void del_macro_mods(uint8_t mods) { macro_mods &= ~mods; }
 668               		.loc 1 190 0
 669 0000 9091 0000 		lds r25,macro_mods
 670 0004 982B      		or r25,r24
 671 0006 9093 0000 		sts macro_mods,r25
 672 000a 0895      		ret
 673               		.cfi_endproc
 674               	.LFE127:
 676               		.section	.text.del_macro_mods,"ax",@progbits
 677               	.global	del_macro_mods
 679               	del_macro_mods:
 680               	.LFB128:
 191:./tmk_core/common/action_util.c **** void set_macro_mods(uint8_t mods) { macro_mods = mods; }
 681               		.loc 1 191 0
 682               		.cfi_startproc
 683               	.LVL38:
 684               	/* prologue: function */
 685               	/* frame size = 0 */
 686               	/* stack size = 0 */
 687               	.L__stack_usage = 0
 191:./tmk_core/common/action_util.c **** void set_macro_mods(uint8_t mods) { macro_mods = mods; }
 688               		.loc 1 191 0
 689 0000 8095      		com r24
 690               	.LVL39:
 691 0002 9091 0000 		lds r25,macro_mods
 692 0006 9823      		and r25,r24
 693 0008 9093 0000 		sts macro_mods,r25
 694 000c 0895      		ret
 695               		.cfi_endproc
 696               	.LFE128:
 698               		.section	.text.set_macro_mods,"ax",@progbits
 699               	.global	set_macro_mods
 701               	set_macro_mods:
 702               	.LFB129:
 192:./tmk_core/common/action_util.c **** void clear_macro_mods(void) { macro_mods = 0; }
 703               		.loc 1 192 0
 704               		.cfi_startproc
 705               	.LVL40:
 706               	/* prologue: function */
 707               	/* frame size = 0 */
 708               	/* stack size = 0 */
 709               	.L__stack_usage = 0
 192:./tmk_core/common/action_util.c **** void clear_macro_mods(void) { macro_mods = 0; }
 710               		.loc 1 192 0
 711 0000 8093 0000 		sts macro_mods,r24
 712 0004 0895      		ret
 713               		.cfi_endproc
 714               	.LFE129:
 716               		.section	.text.clear_macro_mods,"ax",@progbits
 717               	.global	clear_macro_mods
 719               	clear_macro_mods:
 720               	.LFB130:
 193:./tmk_core/common/action_util.c **** 
 721               		.loc 1 193 0
 722               		.cfi_startproc
 723               	/* prologue: function */
 724               	/* frame size = 0 */
 725               	/* stack size = 0 */
 726               	.L__stack_usage = 0
 193:./tmk_core/common/action_util.c **** 
 727               		.loc 1 193 0
 728 0000 1092 0000 		sts macro_mods,__zero_reg__
 729 0004 0895      		ret
 730               		.cfi_endproc
 731               	.LFE130:
 733               		.section	.text.set_oneshot_mods,"ax",@progbits
 734               	.global	set_oneshot_mods
 736               	set_oneshot_mods:
 737               	.LFB131:
 198:./tmk_core/common/action_util.c ****     oneshot_mods = mods;
 738               		.loc 1 198 0
 739               		.cfi_startproc
 740               	.LVL41:
 741               	/* prologue: function */
 742               	/* frame size = 0 */
 743               	/* stack size = 0 */
 744               	.L__stack_usage = 0
 199:./tmk_core/common/action_util.c **** #if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
 745               		.loc 1 199 0
 746 0000 8093 0000 		sts oneshot_mods,r24
 747 0004 0895      		ret
 748               		.cfi_endproc
 749               	.LFE131:
 751               		.section	.text.clear_oneshot_mods,"ax",@progbits
 752               	.global	clear_oneshot_mods
 754               	clear_oneshot_mods:
 755               	.LFB132:
 205:./tmk_core/common/action_util.c ****     oneshot_mods = 0;
 756               		.loc 1 205 0
 757               		.cfi_startproc
 758               	/* prologue: function */
 759               	/* frame size = 0 */
 760               	/* stack size = 0 */
 761               	.L__stack_usage = 0
 206:./tmk_core/common/action_util.c **** #if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
 762               		.loc 1 206 0
 763 0000 1092 0000 		sts oneshot_mods,__zero_reg__
 764 0004 0895      		ret
 765               		.cfi_endproc
 766               	.LFE132:
 768               		.section	.text.get_oneshot_mods,"ax",@progbits
 769               	.global	get_oneshot_mods
 771               	get_oneshot_mods:
 772               	.LFB133:
 212:./tmk_core/common/action_util.c ****     return oneshot_mods;
 773               		.loc 1 212 0
 774               		.cfi_startproc
 775               	/* prologue: function */
 776               	/* frame size = 0 */
 777               	/* stack size = 0 */
 778               	.L__stack_usage = 0
 214:./tmk_core/common/action_util.c **** #endif
 779               		.loc 1 214 0
 780 0000 8091 0000 		lds r24,oneshot_mods
 781 0004 0895      		ret
 782               		.cfi_endproc
 783               	.LFE133:
 785               		.section	.text.has_anykey,"ax",@progbits
 786               	.global	has_anykey
 788               	has_anykey:
 789               	.LFB134:
 221:./tmk_core/common/action_util.c ****     uint8_t cnt = 0;
 790               		.loc 1 221 0
 791               		.cfi_startproc
 792               	/* prologue: function */
 793               	/* frame size = 0 */
 794               	/* stack size = 0 */
 795               	.L__stack_usage = 0
 796               	.LVL42:
 797               	.LBB30:
 224:./tmk_core/common/action_util.c ****             cnt++;
 798               		.loc 1 224 0
 799 0000 4091 0000 		lds r20,keyboard_report
 800 0004 5091 0000 		lds r21,keyboard_report+1
 801 0008 20E0      		ldi r18,0
 802 000a 30E0      		ldi r19,0
 803               	.LBE30:
 222:./tmk_core/common/action_util.c ****     for (uint8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
 804               		.loc 1 222 0
 805 000c 80E0      		ldi r24,0
 806               	.LVL43:
 807               	.L67:
 808 000e FA01      		movw r30,r20
 809 0010 E20F      		add r30,r18
 810 0012 F31F      		adc r31,r19
 811               	.LBB31:
 224:./tmk_core/common/action_util.c ****             cnt++;
 812               		.loc 1 224 0
 813 0014 9181      		ldd r25,Z+1
 814 0016 9111      		cpse r25,__zero_reg__
 225:./tmk_core/common/action_util.c ****     }
 815               		.loc 1 225 0
 816 0018 8F5F      		subi r24,lo8(-(1))
 817               	.LVL44:
 818               	.L65:
 819 001a 2F5F      		subi r18,-1
 820 001c 3F4F      		sbci r19,-1
 821               	.LVL45:
 223:./tmk_core/common/action_util.c ****         if (keyboard_report->raw[i])
 822               		.loc 1 223 0
 823 001e 2F31      		cpi r18,31
 824 0020 3105      		cpc r19,__zero_reg__
 825 0022 01F4      		brne .L67
 826               	/* epilogue start */
 827               	.LBE31:
 228:./tmk_core/common/action_util.c **** 
 828               		.loc 1 228 0
 829 0024 0895      		ret
 830               		.cfi_endproc
 831               	.LFE134:
 833               		.section	.text.send_keyboard_report,"ax",@progbits
 834               	.global	send_keyboard_report
 836               	send_keyboard_report:
 837               	.LFB112:
 120:./tmk_core/common/action_util.c ****     keyboard_report->mods  = real_mods;
 838               		.loc 1 120 0
 839               		.cfi_startproc
 840               	/* prologue: function */
 841               	/* frame size = 0 */
 842               	/* stack size = 0 */
 843               	.L__stack_usage = 0
 121:./tmk_core/common/action_util.c ****     keyboard_report->mods |= weak_mods;
 844               		.loc 1 121 0
 845 0000 E091 0000 		lds r30,keyboard_report
 846 0004 F091 0000 		lds r31,keyboard_report+1
 847 0008 8091 0000 		lds r24,real_mods
 848 000c 8083      		st Z,r24
 122:./tmk_core/common/action_util.c ****     keyboard_report->mods |= macro_mods;
 849               		.loc 1 122 0
 850 000e E091 0000 		lds r30,keyboard_report
 851 0012 F091 0000 		lds r31,keyboard_report+1
 852 0016 8081      		ld r24,Z
 853 0018 9091 0000 		lds r25,weak_mods
 854 001c 892B      		or r24,r25
 855 001e 8083      		st Z,r24
 123:./tmk_core/common/action_util.c **** #ifndef NO_ACTION_ONESHOT
 856               		.loc 1 123 0
 857 0020 E091 0000 		lds r30,keyboard_report
 858 0024 F091 0000 		lds r31,keyboard_report+1
 859 0028 8081      		ld r24,Z
 860 002a 9091 0000 		lds r25,macro_mods
 861 002e 892B      		or r24,r25
 862 0030 8083      		st Z,r24
 125:./tmk_core/common/action_util.c **** #if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
 863               		.loc 1 125 0
 864 0032 9091 0000 		lds r25,oneshot_mods
 865 0036 9923      		tst r25
 866 0038 01F0      		breq .L73
 132:./tmk_core/common/action_util.c ****         if (has_anykey()) {
 867               		.loc 1 132 0
 868 003a E091 0000 		lds r30,keyboard_report
 869 003e F091 0000 		lds r31,keyboard_report+1
 870 0042 8081      		ld r24,Z
 871 0044 892B      		or r24,r25
 872 0046 8083      		st Z,r24
 133:./tmk_core/common/action_util.c ****             clear_oneshot_mods();
 873               		.loc 1 133 0
 874 0048 0E94 0000 		call has_anykey
 875               	.LVL46:
 876 004c 8111      		cpse r24,__zero_reg__
 877               	.LBB34:
 878               	.LBB35:
 206:./tmk_core/common/action_util.c **** #if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
 879               		.loc 1 206 0
 880 004e 1092 0000 		sts oneshot_mods,__zero_reg__
 881               	.L73:
 882               	.LBE35:
 883               	.LBE34:
 139:./tmk_core/common/action_util.c **** }
 884               		.loc 1 139 0
 885 0052 8091 0000 		lds r24,keyboard_report
 886 0056 9091 0000 		lds r25,keyboard_report+1
 887 005a 0C94 0000 		jmp host_keyboard_send
 888               	.LVL47:
 889               		.cfi_endproc
 890               	.LFE112:
 892               		.section	.text.has_anymod,"ax",@progbits
 893               	.global	has_anymod
 895               	has_anymod:
 896               	.LFB135:
 231:./tmk_core/common/action_util.c ****     return bitpop(real_mods);
 897               		.loc 1 231 0
 898               		.cfi_startproc
 899               	/* prologue: function */
 900               	/* frame size = 0 */
 901               	/* stack size = 0 */
 902               	.L__stack_usage = 0
 232:./tmk_core/common/action_util.c **** }
 903               		.loc 1 232 0
 904 0000 8091 0000 		lds r24,real_mods
 905 0004 0C94 0000 		jmp bitpop
 906               	.LVL48:
 907               		.cfi_endproc
 908               	.LFE135:
 910               		.section	.text.get_first_key,"ax",@progbits
 911               	.global	get_first_key
 913               	get_first_key:
 914               	.LFB136:
 236:./tmk_core/common/action_util.c **** #ifdef NKRO_ENABLE
 915               		.loc 1 236 0
 916               		.cfi_startproc
 917 0000 CF93      		push r28
 918               	.LCFI0:
 919               		.cfi_def_cfa_offset 3
 920               		.cfi_offset 28, -2
 921 0002 DF93      		push r29
 922               	.LCFI1:
 923               		.cfi_def_cfa_offset 4
 924               		.cfi_offset 29, -3
 925               	/* prologue: function */
 926               	/* frame size = 0 */
 927               	/* stack size = 2 */
 928               	.L__stack_usage = 2
 238:./tmk_core/common/action_util.c ****         uint8_t i = 0;
 929               		.loc 1 238 0
 930 0004 8091 0000 		lds r24,keyboard_protocol
 931 0008 E091 0000 		lds r30,keyboard_report
 932 000c F091 0000 		lds r31,keyboard_report+1
 933 0010 8823      		tst r24
 934 0012 01F0      		breq .L80
 238:./tmk_core/common/action_util.c ****         uint8_t i = 0;
 935               		.loc 1 238 0 is_stmt 0 discriminator 1
 936 0014 8091 0000 		lds r24,keymap_config
 937 0018 87FF      		sbrs r24,7
 938 001a 00C0      		rjmp .L80
 939               	.LBB36:
 240:./tmk_core/common/action_util.c ****             ;
 940               		.loc 1 240 0 is_stmt 1
 941 001c 20E0      		ldi r18,0
 942 001e 30E0      		ldi r19,0
 943               	.L81:
 944 0020 C22F      		mov r28,r18
 945               	.LVL49:
 946 0022 DF01      		movw r26,r30
 947 0024 A20F      		add r26,r18
 948 0026 B31F      		adc r27,r19
 240:./tmk_core/common/action_util.c ****             ;
 949               		.loc 1 240 0 is_stmt 0 discriminator 2
 950 0028 1196      		adiw r26,1
 951 002a 8C91      		ld r24,X
 952 002c 8111      		cpse r24,__zero_reg__
 953 002e 00C0      		rjmp .L82
 954               	.LVL50:
 955 0030 2F5F      		subi r18,-1
 956 0032 3F4F      		sbci r19,-1
 957               	.LVL51:
 240:./tmk_core/common/action_util.c ****             ;
 958               		.loc 1 240 0 discriminator 1
 959 0034 2F31      		cpi r18,31
 960 0036 3105      		cpc r19,__zero_reg__
 961 0038 01F4      		brne .L81
 962 003a CFE1      		ldi r28,lo8(31)
 963               	.LVL52:
 964               	.L82:
 242:./tmk_core/common/action_util.c ****     }
 965               		.loc 1 242 0 is_stmt 1
 966 003c D0E0      		ldi r29,0
 967 003e EC0F      		add r30,r28
 968 0040 FD1F      		adc r31,r29
 969 0042 8181      		ldd r24,Z+1
 970 0044 0E94 0000 		call biton
 971               	.LVL53:
 972 0048 93E0      		ldi r25,3
 973               		1:
 974 004a CC0F      		lsl r28
 975 004c DD1F      		rol r29
 976 004e 9A95      		dec r25
 977 0050 01F4      		brne 1b
 978 0052 8C2B      		or r24,r28
 979 0054 00C0      		rjmp .L84
 980               	.L80:
 981               	.LBE36:
 255:./tmk_core/common/action_util.c **** #endif
 982               		.loc 1 255 0
 983 0056 8281      		ldd r24,Z+2
 984               	.L84:
 985               	/* epilogue start */
 257:./tmk_core/common/action_util.c **** 
 986               		.loc 1 257 0
 987 0058 DF91      		pop r29
 988 005a CF91      		pop r28
 989 005c 0895      		ret
 990               		.cfi_endproc
 991               	.LFE136:
 993               		.section	.bss.oneshot_layer_data,"aw",@nobits
 996               	oneshot_layer_data:
 997 0000 00        		.zero	1
 998               		.section	.bss.oneshot_locked_mods,"aw",@nobits
 1001               	oneshot_locked_mods:
 1002 0000 00        		.zero	1
 1003               		.section	.bss.oneshot_mods,"aw",@nobits
 1006               	oneshot_mods:
 1007 0000 00        		.zero	1
 1008               	.global	keyboard_report
 1009               		.section	.data.keyboard_report,"aw",@progbits
 1012               	keyboard_report:
 1013 0000 0000      		.word	__compound_literal.0
 1014               		.section	.bss.__compound_literal.0,"aw",@nobits
 1017               	__compound_literal.0:
 1018 0000 0000 0000 		.zero	32
 1018      0000 0000 
 1018      0000 0000 
 1018      0000 0000 
 1018      0000 0000 
 1019               		.section	.bss.macro_mods,"aw",@nobits
 1022               	macro_mods:
 1023 0000 00        		.zero	1
 1024               		.section	.bss.weak_mods,"aw",@nobits
 1027               	weak_mods:
 1028 0000 00        		.zero	1
 1029               		.section	.bss.real_mods,"aw",@nobits
 1032               	real_mods:
 1033 0000 00        		.zero	1
 1034               		.text
 1035               	.Letext0:
 1036               		.file 2 "c:\\users\\james\\mhv_avr\\avr\\include\\stdint.h"
 1037               		.file 3 "./tmk_core/common/report.h"
 1038               		.file 4 "./tmk_core/common/action_util.h"
 1039               		.file 5 "./quantum/keycode_config.h"
 1040               		.file 6 "./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/USBTask.h"
 1041               		.file 7 "./tmk_core/common/host.h"
 1042               		.file 8 "./tmk_core/common/action_layer.h"
 1043               		.file 9 "./tmk_core/common/util.h"
DEFINED SYMBOLS
                            *ABS*:00000000 action_util.c
C:\Users\James\AppData\Local\Temp\cc5Y2r4Y.s:2      *ABS*:0000003e __SP_H__
C:\Users\James\AppData\Local\Temp\cc5Y2r4Y.s:3      *ABS*:0000003d __SP_L__
C:\Users\James\AppData\Local\Temp\cc5Y2r4Y.s:4      *ABS*:0000003f __SREG__
C:\Users\James\AppData\Local\Temp\cc5Y2r4Y.s:5      *ABS*:00000000 __tmp_reg__
C:\Users\James\AppData\Local\Temp\cc5Y2r4Y.s:6      *ABS*:00000001 __zero_reg__
C:\Users\James\AppData\Local\Temp\cc5Y2r4Y.s:13     .text.get_oneshot_locked_mods:00000000 get_oneshot_locked_mods
C:\Users\James\AppData\Local\Temp\cc5Y2r4Y.s:1001   .bss.oneshot_locked_mods:00000000 oneshot_locked_mods
C:\Users\James\AppData\Local\Temp\cc5Y2r4Y.s:31     .text.set_oneshot_locked_mods:00000000 set_oneshot_locked_mods
C:\Users\James\AppData\Local\Temp\cc5Y2r4Y.s:49     .text.clear_oneshot_locked_mods:00000000 clear_oneshot_locked_mods
C:\Users\James\AppData\Local\Temp\cc5Y2r4Y.s:66     .text.get_oneshot_layer:00000000 get_oneshot_layer
C:\Users\James\AppData\Local\Temp\cc5Y2r4Y.s:996    .bss.oneshot_layer_data:00000000 oneshot_layer_data
C:\Users\James\AppData\Local\Temp\cc5Y2r4Y.s:86     .text.get_oneshot_layer_state:00000000 get_oneshot_layer_state
C:\Users\James\AppData\Local\Temp\cc5Y2r4Y.s:104    .text.set_oneshot_layer:00000000 set_oneshot_layer
C:\Users\James\AppData\Local\Temp\cc5Y2r4Y.s:130    .text.reset_oneshot_layer:00000000 reset_oneshot_layer
C:\Users\James\AppData\Local\Temp\cc5Y2r4Y.s:147    .text.clear_oneshot_layer_state:00000000 clear_oneshot_layer_state
C:\Users\James\AppData\Local\Temp\cc5Y2r4Y.s:197    .text.is_oneshot_layer_active:00000000 is_oneshot_layer_active
C:\Users\James\AppData\Local\Temp\cc5Y2r4Y.s:225    .text.add_key:00000000 add_key
C:\Users\James\AppData\Local\Temp\cc5Y2r4Y.s:1012   .data.keyboard_report:00000000 keyboard_report
C:\Users\James\AppData\Local\Temp\cc5Y2r4Y.s:328    .text.del_key:00000000 del_key
C:\Users\James\AppData\Local\Temp\cc5Y2r4Y.s:416    .text.clear_keys:00000000 clear_keys
C:\Users\James\AppData\Local\Temp\cc5Y2r4Y.s:454    .text.get_mods:00000000 get_mods
C:\Users\James\AppData\Local\Temp\cc5Y2r4Y.s:1032   .bss.real_mods:00000000 real_mods
C:\Users\James\AppData\Local\Temp\cc5Y2r4Y.s:471    .text.add_mods:00000000 add_mods
C:\Users\James\AppData\Local\Temp\cc5Y2r4Y.s:491    .text.del_mods:00000000 del_mods
C:\Users\James\AppData\Local\Temp\cc5Y2r4Y.s:513    .text.set_mods:00000000 set_mods
C:\Users\James\AppData\Local\Temp\cc5Y2r4Y.s:531    .text.clear_mods:00000000 clear_mods
C:\Users\James\AppData\Local\Temp\cc5Y2r4Y.s:548    .text.get_weak_mods:00000000 get_weak_mods
C:\Users\James\AppData\Local\Temp\cc5Y2r4Y.s:1027   .bss.weak_mods:00000000 weak_mods
C:\Users\James\AppData\Local\Temp\cc5Y2r4Y.s:565    .text.add_weak_mods:00000000 add_weak_mods
C:\Users\James\AppData\Local\Temp\cc5Y2r4Y.s:585    .text.del_weak_mods:00000000 del_weak_mods
C:\Users\James\AppData\Local\Temp\cc5Y2r4Y.s:607    .text.set_weak_mods:00000000 set_weak_mods
C:\Users\James\AppData\Local\Temp\cc5Y2r4Y.s:625    .text.clear_weak_mods:00000000 clear_weak_mods
C:\Users\James\AppData\Local\Temp\cc5Y2r4Y.s:642    .text.get_macro_mods:00000000 get_macro_mods
C:\Users\James\AppData\Local\Temp\cc5Y2r4Y.s:1022   .bss.macro_mods:00000000 macro_mods
C:\Users\James\AppData\Local\Temp\cc5Y2r4Y.s:659    .text.add_macro_mods:00000000 add_macro_mods
C:\Users\James\AppData\Local\Temp\cc5Y2r4Y.s:679    .text.del_macro_mods:00000000 del_macro_mods
C:\Users\James\AppData\Local\Temp\cc5Y2r4Y.s:701    .text.set_macro_mods:00000000 set_macro_mods
C:\Users\James\AppData\Local\Temp\cc5Y2r4Y.s:719    .text.clear_macro_mods:00000000 clear_macro_mods
C:\Users\James\AppData\Local\Temp\cc5Y2r4Y.s:736    .text.set_oneshot_mods:00000000 set_oneshot_mods
C:\Users\James\AppData\Local\Temp\cc5Y2r4Y.s:1006   .bss.oneshot_mods:00000000 oneshot_mods
C:\Users\James\AppData\Local\Temp\cc5Y2r4Y.s:754    .text.clear_oneshot_mods:00000000 clear_oneshot_mods
C:\Users\James\AppData\Local\Temp\cc5Y2r4Y.s:771    .text.get_oneshot_mods:00000000 get_oneshot_mods
C:\Users\James\AppData\Local\Temp\cc5Y2r4Y.s:788    .text.has_anykey:00000000 has_anykey
C:\Users\James\AppData\Local\Temp\cc5Y2r4Y.s:836    .text.send_keyboard_report:00000000 send_keyboard_report
C:\Users\James\AppData\Local\Temp\cc5Y2r4Y.s:895    .text.has_anymod:00000000 has_anymod
C:\Users\James\AppData\Local\Temp\cc5Y2r4Y.s:913    .text.get_first_key:00000000 get_first_key
C:\Users\James\AppData\Local\Temp\cc5Y2r4Y.s:1017   .bss.__compound_literal.0:00000000 __compound_literal.0

UNDEFINED SYMBOLS
layer_on
layer_off
keyboard_protocol
keymap_config
host_keyboard_send
bitpop
biton
__do_copy_data
__do_clear_bss
