   1               		.file	"timer.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.timer_init,"ax",@progbits
  11               	.global	timer_init
  13               	timer_init:
  14               	.LFB5:
  15               		.file 1 "./tmk_core/common/avr/timer.c"
   1:./tmk_core/common/avr/timer.c **** /*
   2:./tmk_core/common/avr/timer.c **** Copyright 2011 Jun Wako <wakojun@gmail.com>
   3:./tmk_core/common/avr/timer.c **** 
   4:./tmk_core/common/avr/timer.c **** This program is free software: you can redistribute it and/or modify
   5:./tmk_core/common/avr/timer.c **** it under the terms of the GNU General Public License as published by
   6:./tmk_core/common/avr/timer.c **** the Free Software Foundation, either version 2 of the License, or
   7:./tmk_core/common/avr/timer.c **** (at your option) any later version.
   8:./tmk_core/common/avr/timer.c **** 
   9:./tmk_core/common/avr/timer.c **** This program is distributed in the hope that it will be useful,
  10:./tmk_core/common/avr/timer.c **** but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:./tmk_core/common/avr/timer.c **** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:./tmk_core/common/avr/timer.c **** GNU General Public License for more details.
  13:./tmk_core/common/avr/timer.c **** 
  14:./tmk_core/common/avr/timer.c **** You should have received a copy of the GNU General Public License
  15:./tmk_core/common/avr/timer.c **** along with this program.  If not, see <http://www.gnu.org/licenses/>.
  16:./tmk_core/common/avr/timer.c **** */
  17:./tmk_core/common/avr/timer.c **** 
  18:./tmk_core/common/avr/timer.c **** #include <avr/io.h>
  19:./tmk_core/common/avr/timer.c **** #include <avr/interrupt.h>
  20:./tmk_core/common/avr/timer.c **** #include <util/atomic.h>
  21:./tmk_core/common/avr/timer.c **** #include <stdint.h>
  22:./tmk_core/common/avr/timer.c **** #include "timer_avr.h"
  23:./tmk_core/common/avr/timer.c **** #include "timer.h"
  24:./tmk_core/common/avr/timer.c **** 
  25:./tmk_core/common/avr/timer.c **** 
  26:./tmk_core/common/avr/timer.c **** // counter resolution 1ms
  27:./tmk_core/common/avr/timer.c **** // NOTE: union { uint32_t timer32; struct { uint16_t dummy; uint16_t timer16; }}
  28:./tmk_core/common/avr/timer.c **** volatile uint32_t timer_count;
  29:./tmk_core/common/avr/timer.c **** 
  30:./tmk_core/common/avr/timer.c **** void timer_init(void)
  31:./tmk_core/common/avr/timer.c **** {
  16               		.loc 1 31 0
  17               		.cfi_startproc
  18               	/* prologue: function */
  19               	/* frame size = 0 */
  20               	/* stack size = 0 */
  21               	.L__stack_usage = 0
  32:./tmk_core/common/avr/timer.c ****     // Timer0 CTC mode
  33:./tmk_core/common/avr/timer.c ****     TCCR0A = 0x02;
  22               		.loc 1 33 0
  23 0000 82E0      		ldi r24,lo8(2)
  24 0002 84BD      		out 0x24,r24
  34:./tmk_core/common/avr/timer.c **** 
  35:./tmk_core/common/avr/timer.c **** #if TIMER_PRESCALER == 1
  36:./tmk_core/common/avr/timer.c ****     TCCR0B = 0x01;
  37:./tmk_core/common/avr/timer.c **** #elif TIMER_PRESCALER == 8
  38:./tmk_core/common/avr/timer.c ****     TCCR0B = 0x02;
  39:./tmk_core/common/avr/timer.c **** #elif TIMER_PRESCALER == 64
  40:./tmk_core/common/avr/timer.c ****     TCCR0B = 0x03;
  25               		.loc 1 40 0
  26 0004 93E0      		ldi r25,lo8(3)
  27 0006 95BD      		out 0x25,r25
  41:./tmk_core/common/avr/timer.c **** #elif TIMER_PRESCALER == 256
  42:./tmk_core/common/avr/timer.c ****     TCCR0B = 0x04;
  43:./tmk_core/common/avr/timer.c **** #elif TIMER_PRESCALER == 1024
  44:./tmk_core/common/avr/timer.c ****     TCCR0B = 0x05;
  45:./tmk_core/common/avr/timer.c **** #else
  46:./tmk_core/common/avr/timer.c **** #   error "Timer prescaler value is NOT vaild."
  47:./tmk_core/common/avr/timer.c **** #endif
  48:./tmk_core/common/avr/timer.c **** 
  49:./tmk_core/common/avr/timer.c ****     OCR0A = TIMER_RAW_TOP;
  28               		.loc 1 49 0
  29 0008 9AEF      		ldi r25,lo8(-6)
  30 000a 97BD      		out 0x27,r25
  50:./tmk_core/common/avr/timer.c ****     TIMSK0 = (1<<OCIE0A);
  31               		.loc 1 50 0
  32 000c 8093 6E00 		sts 110,r24
  33 0010 0895      		ret
  34               		.cfi_endproc
  35               	.LFE5:
  37               		.section	.text.timer_clear,"ax",@progbits
  38               	.global	timer_clear
  40               	timer_clear:
  41               	.LFB6:
  51:./tmk_core/common/avr/timer.c **** }
  52:./tmk_core/common/avr/timer.c **** 
  53:./tmk_core/common/avr/timer.c **** inline
  54:./tmk_core/common/avr/timer.c **** void timer_clear(void)
  55:./tmk_core/common/avr/timer.c **** {
  42               		.loc 1 55 0
  43               		.cfi_startproc
  44               	/* prologue: function */
  45               	/* frame size = 0 */
  46               	/* stack size = 0 */
  47               	.L__stack_usage = 0
  48               	.LBB27:
  56:./tmk_core/common/avr/timer.c ****   ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
  49               		.loc 1 56 0
  50 0000 8FB7      		in r24,__SREG__
  51               	.LVL0:
  52               	.LBB28:
  53               	.LBB29:
  54               		.file 2 "c:\\users\\james\\mhv_avr\\avr\\include\\util\\atomic.h"
   1:c:\users\james\mhv_avr\avr\include\util\atomic.h **** /* Copyright (c) 2007 Dean Camera
   2:c:\users\james\mhv_avr\avr\include\util\atomic.h ****    All rights reserved.
   3:c:\users\james\mhv_avr\avr\include\util\atomic.h **** 
   4:c:\users\james\mhv_avr\avr\include\util\atomic.h ****    Redistribution and use in source and binary forms, with or without
   5:c:\users\james\mhv_avr\avr\include\util\atomic.h ****    modification, are permitted provided that the following conditions are met:
   6:c:\users\james\mhv_avr\avr\include\util\atomic.h **** 
   7:c:\users\james\mhv_avr\avr\include\util\atomic.h ****    * Redistributions of source code must retain the above copyright
   8:c:\users\james\mhv_avr\avr\include\util\atomic.h ****      notice, this list of conditions and the following disclaimer.
   9:c:\users\james\mhv_avr\avr\include\util\atomic.h **** 
  10:c:\users\james\mhv_avr\avr\include\util\atomic.h ****    * Redistributions in binary form must reproduce the above copyright
  11:c:\users\james\mhv_avr\avr\include\util\atomic.h ****      notice, this list of conditions and the following disclaimer in
  12:c:\users\james\mhv_avr\avr\include\util\atomic.h ****      the documentation and/or other materials provided with the
  13:c:\users\james\mhv_avr\avr\include\util\atomic.h ****      distribution.
  14:c:\users\james\mhv_avr\avr\include\util\atomic.h **** 
  15:c:\users\james\mhv_avr\avr\include\util\atomic.h ****    * Neither the name of the copyright holders nor the names of
  16:c:\users\james\mhv_avr\avr\include\util\atomic.h ****      contributors may be used to endorse or promote products derived
  17:c:\users\james\mhv_avr\avr\include\util\atomic.h ****      from this software without specific prior written permission.
  18:c:\users\james\mhv_avr\avr\include\util\atomic.h **** 
  19:c:\users\james\mhv_avr\avr\include\util\atomic.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  20:c:\users\james\mhv_avr\avr\include\util\atomic.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  21:c:\users\james\mhv_avr\avr\include\util\atomic.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  22:c:\users\james\mhv_avr\avr\include\util\atomic.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  23:c:\users\james\mhv_avr\avr\include\util\atomic.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  24:c:\users\james\mhv_avr\avr\include\util\atomic.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  25:c:\users\james\mhv_avr\avr\include\util\atomic.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  26:c:\users\james\mhv_avr\avr\include\util\atomic.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  27:c:\users\james\mhv_avr\avr\include\util\atomic.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  28:c:\users\james\mhv_avr\avr\include\util\atomic.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  29:c:\users\james\mhv_avr\avr\include\util\atomic.h ****   POSSIBILITY OF SUCH DAMAGE.
  30:c:\users\james\mhv_avr\avr\include\util\atomic.h **** */
  31:c:\users\james\mhv_avr\avr\include\util\atomic.h **** 
  32:c:\users\james\mhv_avr\avr\include\util\atomic.h **** /* $Id: atomic.h 2158 2010-06-10 15:48:28Z joerg_wunsch $ */
  33:c:\users\james\mhv_avr\avr\include\util\atomic.h **** 
  34:c:\users\james\mhv_avr\avr\include\util\atomic.h **** #ifndef _UTIL_ATOMIC_H_
  35:c:\users\james\mhv_avr\avr\include\util\atomic.h **** #define _UTIL_ATOMIC_H_ 1
  36:c:\users\james\mhv_avr\avr\include\util\atomic.h **** 
  37:c:\users\james\mhv_avr\avr\include\util\atomic.h **** #include <avr/io.h>
  38:c:\users\james\mhv_avr\avr\include\util\atomic.h **** #include <avr/interrupt.h>
  39:c:\users\james\mhv_avr\avr\include\util\atomic.h **** 
  40:c:\users\james\mhv_avr\avr\include\util\atomic.h **** #if !defined(__DOXYGEN__)
  41:c:\users\james\mhv_avr\avr\include\util\atomic.h **** /* Internal helper functions. */
  42:c:\users\james\mhv_avr\avr\include\util\atomic.h **** static __inline__ uint8_t __iSeiRetVal(void)
  43:c:\users\james\mhv_avr\avr\include\util\atomic.h **** {
  44:c:\users\james\mhv_avr\avr\include\util\atomic.h ****     sei();
  45:c:\users\james\mhv_avr\avr\include\util\atomic.h ****     return 1;
  46:c:\users\james\mhv_avr\avr\include\util\atomic.h **** }
  47:c:\users\james\mhv_avr\avr\include\util\atomic.h **** 
  48:c:\users\james\mhv_avr\avr\include\util\atomic.h **** static __inline__ uint8_t __iCliRetVal(void)
  49:c:\users\james\mhv_avr\avr\include\util\atomic.h **** {
  50:c:\users\james\mhv_avr\avr\include\util\atomic.h ****     cli();
  55               		.loc 2 50 0
  56               	/* #APP */
  57               	 ;  50 "c:\users\james\mhv_avr\avr\include\util\atomic.h" 1
  58 0002 F894      		cli
  59               	 ;  0 "" 2
  60               	.LVL1:
  61               	/* #NOAPP */
  62               	.LBE29:
  63               	.LBE28:
  57:./tmk_core/common/avr/timer.c ****     timer_count = 0;
  64               		.loc 1 57 0
  65 0004 1092 0000 		sts timer_count,__zero_reg__
  66 0008 1092 0000 		sts timer_count+1,__zero_reg__
  67 000c 1092 0000 		sts timer_count+2,__zero_reg__
  68 0010 1092 0000 		sts timer_count+3,__zero_reg__
  69               	.LVL2:
  70               	.LBB30:
  71               	.LBB31:
  51:c:\users\james\mhv_avr\avr\include\util\atomic.h ****     return 1;
  52:c:\users\james\mhv_avr\avr\include\util\atomic.h **** }
  53:c:\users\james\mhv_avr\avr\include\util\atomic.h **** 
  54:c:\users\james\mhv_avr\avr\include\util\atomic.h **** static __inline__ void __iSeiParam(const uint8_t *__s)
  55:c:\users\james\mhv_avr\avr\include\util\atomic.h **** {
  56:c:\users\james\mhv_avr\avr\include\util\atomic.h ****     sei();
  57:c:\users\james\mhv_avr\avr\include\util\atomic.h ****     __asm__ volatile ("" ::: "memory");
  58:c:\users\james\mhv_avr\avr\include\util\atomic.h ****     (void)__s;
  59:c:\users\james\mhv_avr\avr\include\util\atomic.h **** }
  60:c:\users\james\mhv_avr\avr\include\util\atomic.h **** 
  61:c:\users\james\mhv_avr\avr\include\util\atomic.h **** static __inline__ void __iCliParam(const uint8_t *__s)
  62:c:\users\james\mhv_avr\avr\include\util\atomic.h **** {
  63:c:\users\james\mhv_avr\avr\include\util\atomic.h ****     cli();
  64:c:\users\james\mhv_avr\avr\include\util\atomic.h ****     __asm__ volatile ("" ::: "memory");
  65:c:\users\james\mhv_avr\avr\include\util\atomic.h ****     (void)__s;
  66:c:\users\james\mhv_avr\avr\include\util\atomic.h **** }
  67:c:\users\james\mhv_avr\avr\include\util\atomic.h **** 
  68:c:\users\james\mhv_avr\avr\include\util\atomic.h **** static __inline__ void __iRestore(const  uint8_t *__s)
  69:c:\users\james\mhv_avr\avr\include\util\atomic.h **** {
  70:c:\users\james\mhv_avr\avr\include\util\atomic.h ****     SREG = *__s;
  72               		.loc 2 70 0
  73 0014 8FBF      		out __SREG__,r24
  71:c:\users\james\mhv_avr\avr\include\util\atomic.h ****     __asm__ volatile ("" ::: "memory");
  74               		.loc 2 71 0
  75 0016 0895      		ret
  76               	.LBE31:
  77               	.LBE30:
  78               	.LBE27:
  79               		.cfi_endproc
  80               	.LFE6:
  82               		.section	.text.timer_read,"ax",@progbits
  83               	.global	timer_read
  85               	timer_read:
  86               	.LFB7:
  58:./tmk_core/common/avr/timer.c ****   }
  59:./tmk_core/common/avr/timer.c **** }
  60:./tmk_core/common/avr/timer.c **** 
  61:./tmk_core/common/avr/timer.c **** inline
  62:./tmk_core/common/avr/timer.c **** uint16_t timer_read(void)
  63:./tmk_core/common/avr/timer.c **** {
  87               		.loc 1 63 0
  88               		.cfi_startproc
  89               	/* prologue: function */
  90               	/* frame size = 0 */
  91               	/* stack size = 0 */
  92               	.L__stack_usage = 0
  93               	.LBB32:
  64:./tmk_core/common/avr/timer.c ****     uint32_t t;
  65:./tmk_core/common/avr/timer.c **** 
  66:./tmk_core/common/avr/timer.c ****     ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
  94               		.loc 1 66 0
  95 0000 2FB7      		in r18,__SREG__
  96               	.LVL3:
  97               	.LBB33:
  98               	.LBB34:
  50:c:\users\james\mhv_avr\avr\include\util\atomic.h ****     return 1;
  99               		.loc 2 50 0
 100               	/* #APP */
 101               	 ;  50 "c:\users\james\mhv_avr\avr\include\util\atomic.h" 1
 102 0002 F894      		cli
 103               	 ;  0 "" 2
 104               	.LVL4:
 105               	/* #NOAPP */
 106               	.LBE34:
 107               	.LBE33:
  67:./tmk_core/common/avr/timer.c ****       t = timer_count;
 108               		.loc 1 67 0
 109 0004 8091 0000 		lds r24,timer_count
 110 0008 9091 0000 		lds r25,timer_count+1
 111 000c A091 0000 		lds r26,timer_count+2
 112 0010 B091 0000 		lds r27,timer_count+3
 113               	.LVL5:
 114               	.LBB35:
 115               	.LBB36:
  70:c:\users\james\mhv_avr\avr\include\util\atomic.h ****     __asm__ volatile ("" ::: "memory");
 116               		.loc 2 70 0
 117 0014 2FBF      		out __SREG__,r18
 118               		.loc 2 71 0
 119               	.LBE36:
 120               	.LBE35:
 121               	.LBE32:
  68:./tmk_core/common/avr/timer.c ****     }
  69:./tmk_core/common/avr/timer.c **** 
  70:./tmk_core/common/avr/timer.c ****     return (t & 0xFFFF);
  71:./tmk_core/common/avr/timer.c **** }
 122               		.loc 1 71 0
 123 0016 0895      		ret
 124               		.cfi_endproc
 125               	.LFE7:
 127               		.section	.text.timer_read32,"ax",@progbits
 128               	.global	timer_read32
 130               	timer_read32:
 131               	.LFB8:
  72:./tmk_core/common/avr/timer.c **** 
  73:./tmk_core/common/avr/timer.c **** inline
  74:./tmk_core/common/avr/timer.c **** uint32_t timer_read32(void)
  75:./tmk_core/common/avr/timer.c **** {
 132               		.loc 1 75 0
 133               		.cfi_startproc
 134               	/* prologue: function */
 135               	/* frame size = 0 */
 136               	/* stack size = 0 */
 137               	.L__stack_usage = 0
 138               	.LBB37:
  76:./tmk_core/common/avr/timer.c ****     uint32_t t;
  77:./tmk_core/common/avr/timer.c **** 
  78:./tmk_core/common/avr/timer.c ****     ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
 139               		.loc 1 78 0
 140 0000 2FB7      		in r18,__SREG__
 141               	.LVL6:
 142               	.LBB38:
 143               	.LBB39:
  50:c:\users\james\mhv_avr\avr\include\util\atomic.h ****     return 1;
 144               		.loc 2 50 0
 145               	/* #APP */
 146               	 ;  50 "c:\users\james\mhv_avr\avr\include\util\atomic.h" 1
 147 0002 F894      		cli
 148               	 ;  0 "" 2
 149               	.LVL7:
 150               	/* #NOAPP */
 151               	.LBE39:
 152               	.LBE38:
  79:./tmk_core/common/avr/timer.c ****       t = timer_count;
 153               		.loc 1 79 0
 154 0004 6091 0000 		lds r22,timer_count
 155 0008 7091 0000 		lds r23,timer_count+1
 156 000c 8091 0000 		lds r24,timer_count+2
 157 0010 9091 0000 		lds r25,timer_count+3
 158               	.LVL8:
 159               	.LBB40:
 160               	.LBB41:
  70:c:\users\james\mhv_avr\avr\include\util\atomic.h ****     __asm__ volatile ("" ::: "memory");
 161               		.loc 2 70 0
 162 0014 2FBF      		out __SREG__,r18
 163               		.loc 2 71 0
 164               	.LBE41:
 165               	.LBE40:
 166               	.LBE37:
  80:./tmk_core/common/avr/timer.c ****     }
  81:./tmk_core/common/avr/timer.c **** 
  82:./tmk_core/common/avr/timer.c ****     return t;
  83:./tmk_core/common/avr/timer.c **** }
 167               		.loc 1 83 0
 168 0016 0895      		ret
 169               		.cfi_endproc
 170               	.LFE8:
 172               		.section	.text.timer_elapsed,"ax",@progbits
 173               	.global	timer_elapsed
 175               	timer_elapsed:
 176               	.LFB9:
  84:./tmk_core/common/avr/timer.c **** 
  85:./tmk_core/common/avr/timer.c **** inline
  86:./tmk_core/common/avr/timer.c **** uint16_t timer_elapsed(uint16_t last)
  87:./tmk_core/common/avr/timer.c **** {
 177               		.loc 1 87 0
 178               		.cfi_startproc
 179               	.LVL9:
 180 0000 CF92      		push r12
 181               	.LCFI0:
 182               		.cfi_def_cfa_offset 3
 183               		.cfi_offset 12, -2
 184 0002 DF92      		push r13
 185               	.LCFI1:
 186               		.cfi_def_cfa_offset 4
 187               		.cfi_offset 13, -3
 188 0004 EF92      		push r14
 189               	.LCFI2:
 190               		.cfi_def_cfa_offset 5
 191               		.cfi_offset 14, -4
 192 0006 FF92      		push r15
 193               	.LCFI3:
 194               		.cfi_def_cfa_offset 6
 195               		.cfi_offset 15, -5
 196 0008 0F93      		push r16
 197               	.LCFI4:
 198               		.cfi_def_cfa_offset 7
 199               		.cfi_offset 16, -6
 200 000a 1F93      		push r17
 201               	.LCFI5:
 202               		.cfi_def_cfa_offset 8
 203               		.cfi_offset 17, -7
 204               	/* prologue: function */
 205               	/* frame size = 0 */
 206               	/* stack size = 6 */
 207               	.L__stack_usage = 6
 208               	.LBB42:
  88:./tmk_core/common/avr/timer.c ****     uint32_t t;
  89:./tmk_core/common/avr/timer.c **** 
  90:./tmk_core/common/avr/timer.c ****     ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
 209               		.loc 1 90 0
 210 000c 2FB7      		in r18,__SREG__
 211               	.LVL10:
 212               	.LBB43:
 213               	.LBB44:
  50:c:\users\james\mhv_avr\avr\include\util\atomic.h ****     return 1;
 214               		.loc 2 50 0
 215               	/* #APP */
 216               	 ;  50 "c:\users\james\mhv_avr\avr\include\util\atomic.h" 1
 217 000e F894      		cli
 218               	 ;  0 "" 2
 219               	.LVL11:
 220               	/* #NOAPP */
 221               	.LBE44:
 222               	.LBE43:
  91:./tmk_core/common/avr/timer.c ****       t = timer_count;
 223               		.loc 1 91 0
 224 0010 4091 0000 		lds r20,timer_count
 225 0014 5091 0000 		lds r21,timer_count+1
 226 0018 6091 0000 		lds r22,timer_count+2
 227 001c 7091 0000 		lds r23,timer_count+3
 228               	.LVL12:
 229               	.LBB45:
 230               	.LBB46:
  70:c:\users\james\mhv_avr\avr\include\util\atomic.h ****     __asm__ volatile ("" ::: "memory");
 231               		.loc 2 70 0
 232 0020 2FBF      		out __SREG__,r18
 233               		.loc 2 71 0
 234               	.LBE46:
 235               	.LBE45:
 236               	.LBE42:
  92:./tmk_core/common/avr/timer.c ****     }
  93:./tmk_core/common/avr/timer.c **** 
  94:./tmk_core/common/avr/timer.c ****     return TIMER_DIFF_16((t & 0xFFFF), last);
 237               		.loc 1 94 0
 238 0022 6A01      		movw r12,r20
 239 0024 7B01      		movw r14,r22
 240 0026 EE24      		clr r14
 241 0028 FF24      		clr r15
 242 002a 8C01      		movw r16,r24
 243 002c 20E0      		ldi r18,0
 244 002e 30E0      		ldi r19,0
 245               	.LVL13:
 246 0030 C016      		cp r12,r16
 247 0032 D106      		cpc r13,r17
 248 0034 E206      		cpc r14,r18
 249 0036 F306      		cpc r15,r19
 250 0038 00F4      		brsh .L8
 251               		.loc 1 94 0 is_stmt 0 discriminator 2
 252 003a 4150      		subi r20,1
 253 003c 5109      		sbc r21,__zero_reg__
 254               	.LVL14:
 255               	.L8:
 256 003e 481B      		sub r20,r24
 257 0040 590B      		sbc r21,r25
  95:./tmk_core/common/avr/timer.c **** }
 258               		.loc 1 95 0 is_stmt 1 discriminator 2
 259 0042 CA01      		movw r24,r20
 260               	.LVL15:
 261               	/* epilogue start */
 262 0044 1F91      		pop r17
 263 0046 0F91      		pop r16
 264               	.LVL16:
 265 0048 FF90      		pop r15
 266 004a EF90      		pop r14
 267 004c DF90      		pop r13
 268 004e CF90      		pop r12
 269 0050 0895      		ret
 270               		.cfi_endproc
 271               	.LFE9:
 273               		.section	.text.timer_elapsed32,"ax",@progbits
 274               	.global	timer_elapsed32
 276               	timer_elapsed32:
 277               	.LFB10:
  96:./tmk_core/common/avr/timer.c **** 
  97:./tmk_core/common/avr/timer.c **** inline
  98:./tmk_core/common/avr/timer.c **** uint32_t timer_elapsed32(uint32_t last)
  99:./tmk_core/common/avr/timer.c **** {
 278               		.loc 1 99 0
 279               		.cfi_startproc
 280               	.LVL17:
 281 0000 CF92      		push r12
 282               	.LCFI6:
 283               		.cfi_def_cfa_offset 3
 284               		.cfi_offset 12, -2
 285 0002 DF92      		push r13
 286               	.LCFI7:
 287               		.cfi_def_cfa_offset 4
 288               		.cfi_offset 13, -3
 289 0004 EF92      		push r14
 290               	.LCFI8:
 291               		.cfi_def_cfa_offset 5
 292               		.cfi_offset 14, -4
 293 0006 FF92      		push r15
 294               	.LCFI9:
 295               		.cfi_def_cfa_offset 6
 296               		.cfi_offset 15, -5
 297 0008 0F93      		push r16
 298               	.LCFI10:
 299               		.cfi_def_cfa_offset 7
 300               		.cfi_offset 16, -6
 301 000a 1F93      		push r17
 302               	.LCFI11:
 303               		.cfi_def_cfa_offset 8
 304               		.cfi_offset 17, -7
 305               	/* prologue: function */
 306               	/* frame size = 0 */
 307               	/* stack size = 6 */
 308               	.L__stack_usage = 6
 309               	.LBB47:
 100:./tmk_core/common/avr/timer.c ****     uint32_t t;
 101:./tmk_core/common/avr/timer.c **** 
 102:./tmk_core/common/avr/timer.c ****     ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
 310               		.loc 1 102 0
 311 000c 4FB7      		in r20,__SREG__
 312               	.LVL18:
 313               	.LBB48:
 314               	.LBB49:
  50:c:\users\james\mhv_avr\avr\include\util\atomic.h ****     return 1;
 315               		.loc 2 50 0
 316               	/* #APP */
 317               	 ;  50 "c:\users\james\mhv_avr\avr\include\util\atomic.h" 1
 318 000e F894      		cli
 319               	 ;  0 "" 2
 320               	.LVL19:
 321               	/* #NOAPP */
 322               	.LBE49:
 323               	.LBE48:
 103:./tmk_core/common/avr/timer.c ****       t = timer_count;
 324               		.loc 1 103 0
 325 0010 0091 0000 		lds r16,timer_count
 326 0014 1091 0000 		lds r17,timer_count+1
 327 0018 2091 0000 		lds r18,timer_count+2
 328 001c 3091 0000 		lds r19,timer_count+3
 329               	.LVL20:
 330               	.LBB50:
 331               	.LBB51:
  70:c:\users\james\mhv_avr\avr\include\util\atomic.h ****     __asm__ volatile ("" ::: "memory");
 332               		.loc 2 70 0
 333 0020 4FBF      		out __SREG__,r20
 334               		.loc 2 71 0
 335 0022 6801      		movw r12,r16
 336 0024 7901      		movw r14,r18
 337 0026 C61A      		sub r12,r22
 338 0028 D70A      		sbc r13,r23
 339 002a E80A      		sbc r14,r24
 340 002c F90A      		sbc r15,r25
 341               	.LBE51:
 342               	.LBE50:
 343               	.LBE47:
 104:./tmk_core/common/avr/timer.c ****     }
 105:./tmk_core/common/avr/timer.c **** 
 106:./tmk_core/common/avr/timer.c ****     return TIMER_DIFF_32(t, last);
 344               		.loc 1 106 0
 345 002e 0617      		cp r16,r22
 346 0030 1707      		cpc r17,r23
 347 0032 2807      		cpc r18,r24
 348 0034 3907      		cpc r19,r25
 349 0036 00F0      		brlo .L11
 350               		.loc 1 106 0 is_stmt 0 discriminator 1
 351 0038 C701      		movw r24,r14
 352 003a B601      		movw r22,r12
 353               	.LVL21:
 354 003c 00C0      		rjmp .L12
 355               	.LVL22:
 356               	.L11:
 357               		.loc 1 106 0 discriminator 2
 358 003e C701      		movw r24,r14
 359 0040 B601      		movw r22,r12
 360               	.LVL23:
 361 0042 6150      		subi r22,1
 362 0044 7109      		sbc r23,__zero_reg__
 363 0046 8109      		sbc r24,__zero_reg__
 364 0048 9109      		sbc r25,__zero_reg__
 365               	.L12:
 366               	/* epilogue start */
 107:./tmk_core/common/avr/timer.c **** }
 367               		.loc 1 107 0 is_stmt 1 discriminator 3
 368 004a 1F91      		pop r17
 369 004c 0F91      		pop r16
 370               	.LVL24:
 371 004e FF90      		pop r15
 372 0050 EF90      		pop r14
 373 0052 DF90      		pop r13
 374 0054 CF90      		pop r12
 375 0056 0895      		ret
 376               		.cfi_endproc
 377               	.LFE10:
 379               		.section	.text.__vector_21,"ax",@progbits
 380               	.global	__vector_21
 382               	__vector_21:
 383               	.LFB11:
 108:./tmk_core/common/avr/timer.c **** 
 109:./tmk_core/common/avr/timer.c **** // excecuted once per 1ms.(excess for just timer count?)
 110:./tmk_core/common/avr/timer.c **** ISR(TIMER0_COMPA_vect)
 111:./tmk_core/common/avr/timer.c **** {
 384               		.loc 1 111 0
 385               		.cfi_startproc
 386 0000 1F92      		push r1
 387               	.LCFI12:
 388               		.cfi_def_cfa_offset 3
 389               		.cfi_offset 1, -2
 390 0002 0F92      		push r0
 391               	.LCFI13:
 392               		.cfi_def_cfa_offset 4
 393               		.cfi_offset 0, -3
 394 0004 0FB6      		in r0,__SREG__
 395 0006 0F92      		push r0
 396 0008 1124      		clr __zero_reg__
 397 000a 8F93      		push r24
 398               	.LCFI14:
 399               		.cfi_def_cfa_offset 5
 400               		.cfi_offset 24, -4
 401 000c 9F93      		push r25
 402               	.LCFI15:
 403               		.cfi_def_cfa_offset 6
 404               		.cfi_offset 25, -5
 405 000e AF93      		push r26
 406               	.LCFI16:
 407               		.cfi_def_cfa_offset 7
 408               		.cfi_offset 26, -6
 409 0010 BF93      		push r27
 410               	.LCFI17:
 411               		.cfi_def_cfa_offset 8
 412               		.cfi_offset 27, -7
 413               	/* prologue: Signal */
 414               	/* frame size = 0 */
 415               	/* stack size = 7 */
 416               	.L__stack_usage = 7
 112:./tmk_core/common/avr/timer.c ****     timer_count++;
 417               		.loc 1 112 0
 418 0012 8091 0000 		lds r24,timer_count
 419 0016 9091 0000 		lds r25,timer_count+1
 420 001a A091 0000 		lds r26,timer_count+2
 421 001e B091 0000 		lds r27,timer_count+3
 422 0022 0196      		adiw r24,1
 423 0024 A11D      		adc r26,__zero_reg__
 424 0026 B11D      		adc r27,__zero_reg__
 425 0028 8093 0000 		sts timer_count,r24
 426 002c 9093 0000 		sts timer_count+1,r25
 427 0030 A093 0000 		sts timer_count+2,r26
 428 0034 B093 0000 		sts timer_count+3,r27
 429               	/* epilogue start */
 113:./tmk_core/common/avr/timer.c **** }
 430               		.loc 1 113 0
 431 0038 BF91      		pop r27
 432 003a AF91      		pop r26
 433 003c 9F91      		pop r25
 434 003e 8F91      		pop r24
 435 0040 0F90      		pop r0
 436 0042 0FBE      		out __SREG__,r0
 437 0044 0F90      		pop r0
 438 0046 1F90      		pop r1
 439 0048 1895      		reti
 440               		.cfi_endproc
 441               	.LFE11:
 443               		.comm	timer_count,4,1
 444               		.text
 445               	.Letext0:
 446               		.file 3 "c:\\users\\james\\mhv_avr\\avr\\include\\stdint.h"
DEFINED SYMBOLS
                            *ABS*:00000000 timer.c
C:\Users\James\AppData\Local\Temp\ccswrvd4.s:2      *ABS*:0000003e __SP_H__
C:\Users\James\AppData\Local\Temp\ccswrvd4.s:3      *ABS*:0000003d __SP_L__
C:\Users\James\AppData\Local\Temp\ccswrvd4.s:4      *ABS*:0000003f __SREG__
C:\Users\James\AppData\Local\Temp\ccswrvd4.s:5      *ABS*:00000000 __tmp_reg__
C:\Users\James\AppData\Local\Temp\ccswrvd4.s:6      *ABS*:00000001 __zero_reg__
C:\Users\James\AppData\Local\Temp\ccswrvd4.s:13     .text.timer_init:00000000 timer_init
C:\Users\James\AppData\Local\Temp\ccswrvd4.s:40     .text.timer_clear:00000000 timer_clear
                            *COM*:00000004 timer_count
C:\Users\James\AppData\Local\Temp\ccswrvd4.s:85     .text.timer_read:00000000 timer_read
C:\Users\James\AppData\Local\Temp\ccswrvd4.s:130    .text.timer_read32:00000000 timer_read32
C:\Users\James\AppData\Local\Temp\ccswrvd4.s:175    .text.timer_elapsed:00000000 timer_elapsed
C:\Users\James\AppData\Local\Temp\ccswrvd4.s:276    .text.timer_elapsed32:00000000 timer_elapsed32
C:\Users\James\AppData\Local\Temp\ccswrvd4.s:382    .text.__vector_21:00000000 __vector_21

UNDEFINED SYMBOLS
__do_clear_bss
