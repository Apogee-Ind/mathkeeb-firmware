   1               		.file	"action.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.action_exec,"ax",@progbits
  11               	.global	action_exec
  13               	action_exec:
  14               	.LFB103:
  15               		.file 1 "./tmk_core/common/action.c"
   1:./tmk_core/common/action.c **** /*
   2:./tmk_core/common/action.c **** Copyright 2012,2013 Jun Wako <wakojun@gmail.com>
   3:./tmk_core/common/action.c **** 
   4:./tmk_core/common/action.c **** This program is free software: you can redistribute it and/or modify
   5:./tmk_core/common/action.c **** it under the terms of the GNU General Public License as published by
   6:./tmk_core/common/action.c **** the Free Software Foundation, either version 2 of the License, or
   7:./tmk_core/common/action.c **** (at your option) any later version.
   8:./tmk_core/common/action.c **** 
   9:./tmk_core/common/action.c **** This program is distributed in the hope that it will be useful,
  10:./tmk_core/common/action.c **** but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:./tmk_core/common/action.c **** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:./tmk_core/common/action.c **** GNU General Public License for more details.
  13:./tmk_core/common/action.c **** 
  14:./tmk_core/common/action.c **** You should have received a copy of the GNU General Public License
  15:./tmk_core/common/action.c **** along with this program.  If not, see <http://www.gnu.org/licenses/>.
  16:./tmk_core/common/action.c **** */
  17:./tmk_core/common/action.c **** #include "host.h"
  18:./tmk_core/common/action.c **** #include "keycode.h"
  19:./tmk_core/common/action.c **** #include "keyboard.h"
  20:./tmk_core/common/action.c **** #include "mousekey.h"
  21:./tmk_core/common/action.c **** #include "command.h"
  22:./tmk_core/common/action.c **** #include "led.h"
  23:./tmk_core/common/action.c **** #include "backlight.h"
  24:./tmk_core/common/action.c **** #include "action_layer.h"
  25:./tmk_core/common/action.c **** #include "action_tapping.h"
  26:./tmk_core/common/action.c **** #include "action_macro.h"
  27:./tmk_core/common/action.c **** #include "action_util.h"
  28:./tmk_core/common/action.c **** #include "action.h"
  29:./tmk_core/common/action.c **** 
  30:./tmk_core/common/action.c **** #ifdef DEBUG_ACTION
  31:./tmk_core/common/action.c **** #include "debug.h"
  32:./tmk_core/common/action.c **** #else
  33:./tmk_core/common/action.c **** #include "nodebug.h"
  34:./tmk_core/common/action.c **** #endif
  35:./tmk_core/common/action.c **** 
  36:./tmk_core/common/action.c **** 
  37:./tmk_core/common/action.c **** void action_exec(keyevent_t event)
  38:./tmk_core/common/action.c **** {
  16               		.loc 1 38 0
  17               		.cfi_startproc
  18 0000 CF93      		push r28
  19               	.LCFI0:
  20               		.cfi_def_cfa_offset 3
  21               		.cfi_offset 28, -2
  22 0002 DF93      		push r29
  23               	.LCFI1:
  24               		.cfi_def_cfa_offset 4
  25               		.cfi_offset 29, -3
  26 0004 CDB7      		in r28,__SP_L__
  27 0006 DEB7      		in r29,__SP_H__
  28               	.LCFI2:
  29               		.cfi_def_cfa_register 28
  30 0008 2B97      		sbiw r28,11
  31               	.LCFI3:
  32               		.cfi_def_cfa_offset 15
  33 000a 0FB6      		in __tmp_reg__,__SREG__
  34 000c F894      		cli
  35 000e DEBF      		out __SP_H__,r29
  36 0010 0FBE      		out __SREG__,__tmp_reg__
  37 0012 CDBF      		out __SP_L__,r28
  38               	/* prologue: function */
  39               	/* frame size = 11 */
  40               	/* stack size = 13 */
  41               	.L__stack_usage = 13
  42 0014 4F83      		std Y+7,r20
  43 0016 5887      		std Y+8,r21
  44 0018 6987      		std Y+9,r22
  45 001a 7A87      		std Y+10,r23
  46 001c 8B87      		std Y+11,r24
  47               	.LVL0:
  39:./tmk_core/common/action.c ****     if (!IS_NOEVENT(event)) {
  40:./tmk_core/common/action.c ****         dprint("\n---- action_exec: start -----\n");
  41:./tmk_core/common/action.c ****         dprint("EVENT: "); debug_event(event); dprintln();
  42:./tmk_core/common/action.c ****     }
  43:./tmk_core/common/action.c **** 
  44:./tmk_core/common/action.c **** #ifdef ONEHAND_ENABLE
  45:./tmk_core/common/action.c ****     if (!IS_NOEVENT(event)) {
  46:./tmk_core/common/action.c ****         process_hand_swap(&event);
  47:./tmk_core/common/action.c ****     }
  48:./tmk_core/common/action.c **** #endif
  49:./tmk_core/common/action.c **** 
  50:./tmk_core/common/action.c ****     keyrecord_t record = { .event = event };
  48               		.loc 1 50 0
  49 001e DE01      		movw r26,r28
  50 0020 1196      		adiw r26,1
  51 0022 86E0      		ldi r24,lo8(6)
  52 0024 FD01      		movw r30,r26
  53               		0:
  54 0026 1192      		st Z+,__zero_reg__
  55 0028 8A95      		dec r24
  56 002a 01F4      		brne 0b
  57 002c 85E0      		ldi r24,lo8(5)
  58 002e FE01      		movw r30,r28
  59 0030 3796      		adiw r30,7
  60               		0:
  61 0032 0190      		ld r0,Z+
  62 0034 0D92      		st X+,r0
  63 0036 8A95      		dec r24
  64 0038 01F4      		brne 0b
  51:./tmk_core/common/action.c **** 
  52:./tmk_core/common/action.c **** #ifndef NO_ACTION_TAPPING
  53:./tmk_core/common/action.c ****     action_tapping_process(record);
  65               		.loc 1 53 0
  66 003a 4981      		ldd r20,Y+1
  67               	.LVL1:
  68 003c 5A81      		ldd r21,Y+2
  69               	.LVL2:
  70 003e 6B81      		ldd r22,Y+3
  71 0040 7C81      		ldd r23,Y+4
  72 0042 8D81      		ldd r24,Y+5
  73 0044 9E81      		ldd r25,Y+6
  74 0046 0E94 0000 		call action_tapping_process
  75               	.LVL3:
  76               	/* epilogue start */
  54:./tmk_core/common/action.c **** #else
  55:./tmk_core/common/action.c ****     process_record(&record);
  56:./tmk_core/common/action.c ****     if (!IS_NOEVENT(record.event)) {
  57:./tmk_core/common/action.c ****         dprint("processed: "); debug_record(record); dprintln();
  58:./tmk_core/common/action.c ****     }
  59:./tmk_core/common/action.c **** #endif
  60:./tmk_core/common/action.c **** }
  77               		.loc 1 60 0
  78 004a 2B96      		adiw r28,11
  79 004c 0FB6      		in __tmp_reg__,__SREG__
  80 004e F894      		cli
  81 0050 DEBF      		out __SP_H__,r29
  82 0052 0FBE      		out __SREG__,__tmp_reg__
  83 0054 CDBF      		out __SP_L__,r28
  84 0056 DF91      		pop r29
  85 0058 CF91      		pop r28
  86 005a 0895      		ret
  87               		.cfi_endproc
  88               	.LFE103:
  90               		.section	.text.process_record_quantum,"ax",@progbits
  91               		.weak	process_record_quantum
  93               	process_record_quantum:
  94               	.LFB105:
  61:./tmk_core/common/action.c **** 
  62:./tmk_core/common/action.c **** #ifdef ONEHAND_ENABLE
  63:./tmk_core/common/action.c **** bool swap_hands = false;
  64:./tmk_core/common/action.c **** 
  65:./tmk_core/common/action.c **** void process_hand_swap(keyevent_t *event) {
  66:./tmk_core/common/action.c ****     static swap_state_row_t swap_state[MATRIX_ROWS];
  67:./tmk_core/common/action.c **** 
  68:./tmk_core/common/action.c ****     keypos_t pos = event->key;
  69:./tmk_core/common/action.c ****     swap_state_row_t col_bit = (swap_state_row_t)1<<pos.col;
  70:./tmk_core/common/action.c ****     bool do_swap = event->pressed ? swap_hands :
  71:./tmk_core/common/action.c ****                                     swap_state[pos.row] & (col_bit);
  72:./tmk_core/common/action.c **** 
  73:./tmk_core/common/action.c ****     if (do_swap) {
  74:./tmk_core/common/action.c ****         event->key = hand_swap_config[pos.row][pos.col];
  75:./tmk_core/common/action.c ****         swap_state[pos.row] |= col_bit;
  76:./tmk_core/common/action.c ****     } else {
  77:./tmk_core/common/action.c ****         swap_state[pos.row] &= ~(col_bit);
  78:./tmk_core/common/action.c ****     }
  79:./tmk_core/common/action.c **** }
  80:./tmk_core/common/action.c **** #endif
  81:./tmk_core/common/action.c **** 
  82:./tmk_core/common/action.c **** #if !defined(NO_ACTION_LAYER) && defined(PREVENT_STUCK_MODIFIERS)
  83:./tmk_core/common/action.c **** bool disable_action_cache = false;
  84:./tmk_core/common/action.c **** 
  85:./tmk_core/common/action.c **** void process_record_nocache(keyrecord_t *record)
  86:./tmk_core/common/action.c **** {
  87:./tmk_core/common/action.c ****     disable_action_cache = true;
  88:./tmk_core/common/action.c ****     process_record(record);
  89:./tmk_core/common/action.c ****     disable_action_cache = false;
  90:./tmk_core/common/action.c **** }
  91:./tmk_core/common/action.c **** #else
  92:./tmk_core/common/action.c **** void process_record_nocache(keyrecord_t *record)
  93:./tmk_core/common/action.c **** {
  94:./tmk_core/common/action.c ****     process_record(record);
  95:./tmk_core/common/action.c **** }
  96:./tmk_core/common/action.c **** #endif
  97:./tmk_core/common/action.c **** 
  98:./tmk_core/common/action.c **** __attribute__ ((weak))
  99:./tmk_core/common/action.c **** bool process_record_quantum(keyrecord_t *record) {
  95               		.loc 1 99 0
  96               		.cfi_startproc
  97               	.LVL4:
  98               	/* prologue: function */
  99               	/* frame size = 0 */
 100               	/* stack size = 0 */
 101               	.L__stack_usage = 0
 100:./tmk_core/common/action.c ****     return true;
 101:./tmk_core/common/action.c **** }
 102               		.loc 1 101 0
 103 0000 81E0      		ldi r24,lo8(1)
 104               	.LVL5:
 105 0002 0895      		ret
 106               		.cfi_endproc
 107               	.LFE105:
 109               		.section	.text.register_code,"ax",@progbits
 110               	.global	register_code
 112               	register_code:
 113               	.LFB108:
 102:./tmk_core/common/action.c **** 
 103:./tmk_core/common/action.c **** void process_record(keyrecord_t *record) 
 104:./tmk_core/common/action.c **** {
 105:./tmk_core/common/action.c ****     if (IS_NOEVENT(record->event)) { return; }
 106:./tmk_core/common/action.c **** 
 107:./tmk_core/common/action.c ****     if(!process_record_quantum(record))
 108:./tmk_core/common/action.c ****         return;
 109:./tmk_core/common/action.c **** 
 110:./tmk_core/common/action.c ****     action_t action = store_or_get_action(record->event.pressed, record->event.key);
 111:./tmk_core/common/action.c ****     dprint("ACTION: "); debug_action(action);
 112:./tmk_core/common/action.c **** #ifndef NO_ACTION_LAYER
 113:./tmk_core/common/action.c ****     dprint(" layer_state: "); layer_debug();
 114:./tmk_core/common/action.c ****     dprint(" default_layer_state: "); default_layer_debug();
 115:./tmk_core/common/action.c **** #endif
 116:./tmk_core/common/action.c ****     dprintln();
 117:./tmk_core/common/action.c **** 
 118:./tmk_core/common/action.c ****     process_action(record, action);
 119:./tmk_core/common/action.c **** }
 120:./tmk_core/common/action.c **** 
 121:./tmk_core/common/action.c **** void process_action(keyrecord_t *record, action_t action)
 122:./tmk_core/common/action.c **** {
 123:./tmk_core/common/action.c ****     bool do_release_oneshot = false;
 124:./tmk_core/common/action.c ****     keyevent_t event = record->event;
 125:./tmk_core/common/action.c **** #ifndef NO_ACTION_TAPPING
 126:./tmk_core/common/action.c ****     uint8_t tap_count = record->tap.count;
 127:./tmk_core/common/action.c **** #endif
 128:./tmk_core/common/action.c **** 
 129:./tmk_core/common/action.c **** #if (defined(ONESHOT_TIMEOUT) && (ONESHOT_TIMEOUT > 0))
 130:./tmk_core/common/action.c ****     if (has_oneshot_layer_timed_out()) {
 131:./tmk_core/common/action.c ****         dprintf("Oneshot layer: timeout\n");
 132:./tmk_core/common/action.c ****         clear_oneshot_layer_state(ONESHOT_OTHER_KEY_PRESSED);
 133:./tmk_core/common/action.c ****     }
 134:./tmk_core/common/action.c **** #endif
 135:./tmk_core/common/action.c **** 
 136:./tmk_core/common/action.c ****     if (event.pressed) {
 137:./tmk_core/common/action.c ****         // clear the potential weak mods left by previously pressed keys
 138:./tmk_core/common/action.c ****         clear_weak_mods();
 139:./tmk_core/common/action.c ****     }
 140:./tmk_core/common/action.c **** 
 141:./tmk_core/common/action.c **** #ifndef NO_ACTION_ONESHOT
 142:./tmk_core/common/action.c ****     // notice we only clear the one shot layer if the pressed key is not a modifier.
 143:./tmk_core/common/action.c ****     if (is_oneshot_layer_active() && event.pressed && !IS_MOD(action.key.code)) {
 144:./tmk_core/common/action.c ****         clear_oneshot_layer_state(ONESHOT_OTHER_KEY_PRESSED);
 145:./tmk_core/common/action.c ****         do_release_oneshot = !is_oneshot_layer_active();
 146:./tmk_core/common/action.c ****     }
 147:./tmk_core/common/action.c **** #endif
 148:./tmk_core/common/action.c **** 
 149:./tmk_core/common/action.c ****     switch (action.kind.id) {
 150:./tmk_core/common/action.c ****         /* Key and Mods */
 151:./tmk_core/common/action.c ****         case ACT_LMODS:
 152:./tmk_core/common/action.c ****         case ACT_RMODS:
 153:./tmk_core/common/action.c ****             {
 154:./tmk_core/common/action.c ****                 uint8_t mods = (action.kind.id == ACT_LMODS) ?  action.key.mods :
 155:./tmk_core/common/action.c ****                                                                 action.key.mods<<4;
 156:./tmk_core/common/action.c ****                 if (event.pressed) {
 157:./tmk_core/common/action.c ****                     if (mods) {
 158:./tmk_core/common/action.c ****                         if (IS_MOD(action.key.code) || action.key.code == KC_NO) {
 159:./tmk_core/common/action.c ****                             // e.g. LSFT(KC_LGUI): we don't want the LSFT to be weak as it would ma
 160:./tmk_core/common/action.c ****                             // This also makes LSFT(KC_LGUI) behave exactly the same as LGUI(KC_LSF
 161:./tmk_core/common/action.c ****                             // Same applies for some keys like KC_MEH which are declared as MEH(KC_
 162:./tmk_core/common/action.c ****                             add_mods(mods);
 163:./tmk_core/common/action.c ****                         } else {
 164:./tmk_core/common/action.c ****                             add_weak_mods(mods);
 165:./tmk_core/common/action.c ****                         }
 166:./tmk_core/common/action.c ****                         send_keyboard_report();
 167:./tmk_core/common/action.c ****                     }
 168:./tmk_core/common/action.c ****                     register_code(action.key.code);
 169:./tmk_core/common/action.c ****                 } else {
 170:./tmk_core/common/action.c ****                     unregister_code(action.key.code);
 171:./tmk_core/common/action.c ****                     if (mods) {
 172:./tmk_core/common/action.c ****                         if (IS_MOD(action.key.code) || action.key.code == KC_NO) {
 173:./tmk_core/common/action.c ****                             del_mods(mods);
 174:./tmk_core/common/action.c ****                         } else {
 175:./tmk_core/common/action.c ****                             del_weak_mods(mods);
 176:./tmk_core/common/action.c ****                         }
 177:./tmk_core/common/action.c ****                         send_keyboard_report();
 178:./tmk_core/common/action.c ****                     }
 179:./tmk_core/common/action.c ****                 }
 180:./tmk_core/common/action.c ****             }
 181:./tmk_core/common/action.c ****             break;
 182:./tmk_core/common/action.c **** #ifndef NO_ACTION_TAPPING
 183:./tmk_core/common/action.c ****         case ACT_LMODS_TAP:
 184:./tmk_core/common/action.c ****         case ACT_RMODS_TAP:
 185:./tmk_core/common/action.c ****             {
 186:./tmk_core/common/action.c ****                 uint8_t mods = (action.kind.id == ACT_LMODS_TAP) ?  action.key.mods :
 187:./tmk_core/common/action.c ****                                                                     action.key.mods<<4;
 188:./tmk_core/common/action.c ****                 switch (action.layer_tap.code) {
 189:./tmk_core/common/action.c ****     #ifndef NO_ACTION_ONESHOT
 190:./tmk_core/common/action.c ****                     case MODS_ONESHOT:
 191:./tmk_core/common/action.c ****                         // Oneshot modifier
 192:./tmk_core/common/action.c ****                         if (event.pressed) {
 193:./tmk_core/common/action.c ****                             if (tap_count == 0) {
 194:./tmk_core/common/action.c ****                                 dprint("MODS_TAP: Oneshot: 0\n");
 195:./tmk_core/common/action.c ****                                 register_mods(mods);
 196:./tmk_core/common/action.c ****                             } else if (tap_count == 1) {
 197:./tmk_core/common/action.c ****                                 dprint("MODS_TAP: Oneshot: start\n");
 198:./tmk_core/common/action.c ****                                 set_oneshot_mods(mods);
 199:./tmk_core/common/action.c ****                     #if defined(ONESHOT_TAP_TOGGLE) && ONESHOT_TAP_TOGGLE > 1
 200:./tmk_core/common/action.c ****                             } else if (tap_count == ONESHOT_TAP_TOGGLE) {
 201:./tmk_core/common/action.c ****                                 dprint("MODS_TAP: Toggling oneshot");
 202:./tmk_core/common/action.c ****                                 clear_oneshot_mods();
 203:./tmk_core/common/action.c ****                                 set_oneshot_locked_mods(mods);
 204:./tmk_core/common/action.c ****                                 register_mods(mods);
 205:./tmk_core/common/action.c ****                     #endif
 206:./tmk_core/common/action.c ****                             } else {
 207:./tmk_core/common/action.c ****                                 register_mods(mods);
 208:./tmk_core/common/action.c ****                             }
 209:./tmk_core/common/action.c ****                         } else {
 210:./tmk_core/common/action.c ****                             if (tap_count == 0) {
 211:./tmk_core/common/action.c ****                                 clear_oneshot_mods();
 212:./tmk_core/common/action.c ****                                 unregister_mods(mods);
 213:./tmk_core/common/action.c ****                             } else if (tap_count == 1) {
 214:./tmk_core/common/action.c ****                                 // Retain Oneshot mods
 215:./tmk_core/common/action.c ****                     #if defined(ONESHOT_TAP_TOGGLE) && ONESHOT_TAP_TOGGLE > 1
 216:./tmk_core/common/action.c ****                                 if (mods & get_mods()) {
 217:./tmk_core/common/action.c ****                                     clear_oneshot_locked_mods();
 218:./tmk_core/common/action.c ****                                     clear_oneshot_mods();
 219:./tmk_core/common/action.c ****                                     unregister_mods(mods);
 220:./tmk_core/common/action.c ****                                 }
 221:./tmk_core/common/action.c ****                             } else if (tap_count == ONESHOT_TAP_TOGGLE) {
 222:./tmk_core/common/action.c ****                                 // Toggle Oneshot Layer
 223:./tmk_core/common/action.c ****                     #endif
 224:./tmk_core/common/action.c ****                             } else {
 225:./tmk_core/common/action.c ****                                 clear_oneshot_mods();
 226:./tmk_core/common/action.c ****                                 unregister_mods(mods);
 227:./tmk_core/common/action.c ****                             }
 228:./tmk_core/common/action.c ****                         }
 229:./tmk_core/common/action.c ****                         break;
 230:./tmk_core/common/action.c ****     #endif
 231:./tmk_core/common/action.c ****                     case MODS_TAP_TOGGLE:
 232:./tmk_core/common/action.c ****                         if (event.pressed) {
 233:./tmk_core/common/action.c ****                             if (tap_count <= TAPPING_TOGGLE) {
 234:./tmk_core/common/action.c ****                                 register_mods(mods);
 235:./tmk_core/common/action.c ****                             }
 236:./tmk_core/common/action.c ****                         } else {
 237:./tmk_core/common/action.c ****                             if (tap_count < TAPPING_TOGGLE) {
 238:./tmk_core/common/action.c ****                                 unregister_mods(mods);
 239:./tmk_core/common/action.c ****                             }
 240:./tmk_core/common/action.c ****                         }
 241:./tmk_core/common/action.c ****                         break;
 242:./tmk_core/common/action.c ****                     default:
 243:./tmk_core/common/action.c ****                         if (event.pressed) {
 244:./tmk_core/common/action.c ****                             if (tap_count > 0) {
 245:./tmk_core/common/action.c **** #ifndef IGNORE_MOD_TAP_INTERRUPT
 246:./tmk_core/common/action.c ****                                 if (record->tap.interrupted) {
 247:./tmk_core/common/action.c ****                                     dprint("mods_tap: tap: cancel: add_mods\n");
 248:./tmk_core/common/action.c ****                                     // ad hoc: set 0 to cancel tap
 249:./tmk_core/common/action.c ****                                     record->tap.count = 0;
 250:./tmk_core/common/action.c ****                                     register_mods(mods);
 251:./tmk_core/common/action.c ****                                 } else
 252:./tmk_core/common/action.c **** #endif
 253:./tmk_core/common/action.c ****                                 {
 254:./tmk_core/common/action.c ****                                     dprint("MODS_TAP: Tap: register_code\n");
 255:./tmk_core/common/action.c ****                                     register_code(action.key.code);
 256:./tmk_core/common/action.c ****                                 }
 257:./tmk_core/common/action.c ****                             } else {
 258:./tmk_core/common/action.c ****                                 dprint("MODS_TAP: No tap: add_mods\n");
 259:./tmk_core/common/action.c ****                                 register_mods(mods);
 260:./tmk_core/common/action.c ****                             }
 261:./tmk_core/common/action.c ****                         } else {
 262:./tmk_core/common/action.c ****                             if (tap_count > 0) {
 263:./tmk_core/common/action.c ****                                 dprint("MODS_TAP: Tap: unregister_code\n");
 264:./tmk_core/common/action.c ****                                 unregister_code(action.key.code);
 265:./tmk_core/common/action.c ****                             } else {
 266:./tmk_core/common/action.c ****                                 dprint("MODS_TAP: No tap: add_mods\n");
 267:./tmk_core/common/action.c ****                                 unregister_mods(mods);
 268:./tmk_core/common/action.c ****                             }
 269:./tmk_core/common/action.c ****                         }
 270:./tmk_core/common/action.c ****                         break;
 271:./tmk_core/common/action.c ****                 }
 272:./tmk_core/common/action.c ****             }
 273:./tmk_core/common/action.c ****             break;
 274:./tmk_core/common/action.c **** #endif
 275:./tmk_core/common/action.c **** #ifdef EXTRAKEY_ENABLE
 276:./tmk_core/common/action.c ****         /* other HID usage */
 277:./tmk_core/common/action.c ****         case ACT_USAGE:
 278:./tmk_core/common/action.c ****             switch (action.usage.page) {
 279:./tmk_core/common/action.c ****                 case PAGE_SYSTEM:
 280:./tmk_core/common/action.c ****                     if (event.pressed) {
 281:./tmk_core/common/action.c ****                         host_system_send(action.usage.code);
 282:./tmk_core/common/action.c ****                     } else {
 283:./tmk_core/common/action.c ****                         host_system_send(0);
 284:./tmk_core/common/action.c ****                     }
 285:./tmk_core/common/action.c ****                     break;
 286:./tmk_core/common/action.c ****                 case PAGE_CONSUMER:
 287:./tmk_core/common/action.c ****                     if (event.pressed) {
 288:./tmk_core/common/action.c ****                         host_consumer_send(action.usage.code);
 289:./tmk_core/common/action.c ****                     } else {
 290:./tmk_core/common/action.c ****                         host_consumer_send(0);
 291:./tmk_core/common/action.c ****                     }
 292:./tmk_core/common/action.c ****                     break;
 293:./tmk_core/common/action.c ****             }
 294:./tmk_core/common/action.c ****             break;
 295:./tmk_core/common/action.c **** #endif
 296:./tmk_core/common/action.c **** #ifdef MOUSEKEY_ENABLE
 297:./tmk_core/common/action.c ****         /* Mouse key */
 298:./tmk_core/common/action.c ****         case ACT_MOUSEKEY:
 299:./tmk_core/common/action.c ****             if (event.pressed) {
 300:./tmk_core/common/action.c ****                 mousekey_on(action.key.code);
 301:./tmk_core/common/action.c ****                 mousekey_send();
 302:./tmk_core/common/action.c ****             } else {
 303:./tmk_core/common/action.c ****                 mousekey_off(action.key.code);
 304:./tmk_core/common/action.c ****                 mousekey_send();
 305:./tmk_core/common/action.c ****             }
 306:./tmk_core/common/action.c ****             break;
 307:./tmk_core/common/action.c **** #endif
 308:./tmk_core/common/action.c **** #ifndef NO_ACTION_LAYER
 309:./tmk_core/common/action.c ****         case ACT_LAYER:
 310:./tmk_core/common/action.c ****             if (action.layer_bitop.on == 0) {
 311:./tmk_core/common/action.c ****                 /* Default Layer Bitwise Operation */
 312:./tmk_core/common/action.c ****                 if (!event.pressed) {
 313:./tmk_core/common/action.c ****                     uint8_t shift = action.layer_bitop.part*4;
 314:./tmk_core/common/action.c ****                     uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
 315:./tmk_core/common/action.c ****                     uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
 316:./tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 317:./tmk_core/common/action.c ****                         case OP_BIT_AND: default_layer_and(bits | mask); break;
 318:./tmk_core/common/action.c ****                         case OP_BIT_OR:  default_layer_or(bits | mask);  break;
 319:./tmk_core/common/action.c ****                         case OP_BIT_XOR: default_layer_xor(bits | mask); break;
 320:./tmk_core/common/action.c ****                         case OP_BIT_SET: default_layer_and(mask); default_layer_or(bits); break;
 321:./tmk_core/common/action.c ****                     }
 322:./tmk_core/common/action.c ****                 }
 323:./tmk_core/common/action.c ****             } else {
 324:./tmk_core/common/action.c ****                 /* Layer Bitwise Operation */
 325:./tmk_core/common/action.c ****                 if (event.pressed ? (action.layer_bitop.on & ON_PRESS) :
 326:./tmk_core/common/action.c ****                                     (action.layer_bitop.on & ON_RELEASE)) {
 327:./tmk_core/common/action.c ****                     uint8_t shift = action.layer_bitop.part*4;
 328:./tmk_core/common/action.c ****                     uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
 329:./tmk_core/common/action.c ****                     uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
 330:./tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 331:./tmk_core/common/action.c ****                         case OP_BIT_AND: layer_and(bits | mask); break;
 332:./tmk_core/common/action.c ****                         case OP_BIT_OR:  layer_or(bits | mask);  break;
 333:./tmk_core/common/action.c ****                         case OP_BIT_XOR: layer_xor(bits | mask); break;
 334:./tmk_core/common/action.c ****                         case OP_BIT_SET: layer_and(mask); layer_or(bits); break;
 335:./tmk_core/common/action.c ****                     }
 336:./tmk_core/common/action.c ****                 }
 337:./tmk_core/common/action.c ****             }
 338:./tmk_core/common/action.c ****             break;
 339:./tmk_core/common/action.c ****     #ifndef NO_ACTION_TAPPING
 340:./tmk_core/common/action.c ****         case ACT_LAYER_TAP:
 341:./tmk_core/common/action.c ****         case ACT_LAYER_TAP_EXT:
 342:./tmk_core/common/action.c ****             switch (action.layer_tap.code) {
 343:./tmk_core/common/action.c ****                 case 0xe0 ... 0xef:
 344:./tmk_core/common/action.c ****                     /* layer On/Off with modifiers(left only) */
 345:./tmk_core/common/action.c ****                     if (event.pressed) {
 346:./tmk_core/common/action.c ****                         layer_on(action.layer_tap.val);
 347:./tmk_core/common/action.c ****                         register_mods(action.layer_tap.code & 0x0f);
 348:./tmk_core/common/action.c ****                     } else {
 349:./tmk_core/common/action.c ****                         layer_off(action.layer_tap.val);
 350:./tmk_core/common/action.c ****                         unregister_mods(action.layer_tap.code & 0x0f);
 351:./tmk_core/common/action.c ****                     }
 352:./tmk_core/common/action.c ****                     break;
 353:./tmk_core/common/action.c ****                 case OP_TAP_TOGGLE:
 354:./tmk_core/common/action.c ****                     /* tap toggle */
 355:./tmk_core/common/action.c ****                     if (event.pressed) {
 356:./tmk_core/common/action.c ****                         if (tap_count < TAPPING_TOGGLE) {
 357:./tmk_core/common/action.c ****                             layer_invert(action.layer_tap.val);
 358:./tmk_core/common/action.c ****                         }
 359:./tmk_core/common/action.c ****                     } else {
 360:./tmk_core/common/action.c ****                         if (tap_count <= TAPPING_TOGGLE) {
 361:./tmk_core/common/action.c ****                             layer_invert(action.layer_tap.val);
 362:./tmk_core/common/action.c ****                         }
 363:./tmk_core/common/action.c ****                     }
 364:./tmk_core/common/action.c ****                     break;
 365:./tmk_core/common/action.c ****                 case OP_ON_OFF:
 366:./tmk_core/common/action.c ****                     event.pressed ? layer_on(action.layer_tap.val) :
 367:./tmk_core/common/action.c ****                                     layer_off(action.layer_tap.val);
 368:./tmk_core/common/action.c ****                     break;
 369:./tmk_core/common/action.c ****                 case OP_OFF_ON:
 370:./tmk_core/common/action.c ****                     event.pressed ? layer_off(action.layer_tap.val) :
 371:./tmk_core/common/action.c ****                                     layer_on(action.layer_tap.val);
 372:./tmk_core/common/action.c ****                     break;
 373:./tmk_core/common/action.c ****                 case OP_SET_CLEAR:
 374:./tmk_core/common/action.c ****                     event.pressed ? layer_move(action.layer_tap.val) :
 375:./tmk_core/common/action.c ****                                     layer_clear();
 376:./tmk_core/common/action.c ****                     break;
 377:./tmk_core/common/action.c ****             #ifndef NO_ACTION_ONESHOT
 378:./tmk_core/common/action.c ****                 case OP_ONESHOT:
 379:./tmk_core/common/action.c ****                     // Oneshot modifier
 380:./tmk_core/common/action.c ****                 #if defined(ONESHOT_TAP_TOGGLE) && ONESHOT_TAP_TOGGLE > 1
 381:./tmk_core/common/action.c ****                     do_release_oneshot = false;
 382:./tmk_core/common/action.c ****                     if (event.pressed) {
 383:./tmk_core/common/action.c ****                         del_mods(get_oneshot_locked_mods());
 384:./tmk_core/common/action.c ****                         if (get_oneshot_layer_state() == ONESHOT_TOGGLED) {
 385:./tmk_core/common/action.c ****                             reset_oneshot_layer();
 386:./tmk_core/common/action.c ****                             layer_off(action.layer_tap.val);
 387:./tmk_core/common/action.c ****                             break;
 388:./tmk_core/common/action.c ****                         } else if (tap_count < ONESHOT_TAP_TOGGLE) {
 389:./tmk_core/common/action.c ****                             layer_on(action.layer_tap.val);
 390:./tmk_core/common/action.c ****                             set_oneshot_layer(action.layer_tap.val, ONESHOT_START);
 391:./tmk_core/common/action.c ****                         }
 392:./tmk_core/common/action.c ****                     } else {
 393:./tmk_core/common/action.c ****                         add_mods(get_oneshot_locked_mods());
 394:./tmk_core/common/action.c ****                         if (tap_count >= ONESHOT_TAP_TOGGLE) {
 395:./tmk_core/common/action.c ****                             reset_oneshot_layer();
 396:./tmk_core/common/action.c ****                             clear_oneshot_locked_mods();
 397:./tmk_core/common/action.c ****                             set_oneshot_layer(action.layer_tap.val, ONESHOT_TOGGLED);
 398:./tmk_core/common/action.c ****                         } else {
 399:./tmk_core/common/action.c ****                             clear_oneshot_layer_state(ONESHOT_PRESSED);
 400:./tmk_core/common/action.c ****                         }
 401:./tmk_core/common/action.c ****                     }
 402:./tmk_core/common/action.c ****                 #else
 403:./tmk_core/common/action.c ****                     if (event.pressed) {
 404:./tmk_core/common/action.c ****                         layer_on(action.layer_tap.val);
 405:./tmk_core/common/action.c ****                         set_oneshot_layer(action.layer_tap.val, ONESHOT_START);
 406:./tmk_core/common/action.c ****                     } else {
 407:./tmk_core/common/action.c ****                         clear_oneshot_layer_state(ONESHOT_PRESSED);
 408:./tmk_core/common/action.c ****                         if (tap_count > 1) {
 409:./tmk_core/common/action.c ****                             clear_oneshot_layer_state(ONESHOT_OTHER_KEY_PRESSED);
 410:./tmk_core/common/action.c ****                         }
 411:./tmk_core/common/action.c ****                     }
 412:./tmk_core/common/action.c ****                 #endif
 413:./tmk_core/common/action.c ****                     break;
 414:./tmk_core/common/action.c ****             #endif
 415:./tmk_core/common/action.c ****                 default:
 416:./tmk_core/common/action.c ****                     /* tap key */
 417:./tmk_core/common/action.c ****                     if (event.pressed) {
 418:./tmk_core/common/action.c ****                         if (tap_count > 0) {
 419:./tmk_core/common/action.c ****                             dprint("KEYMAP_TAP_KEY: Tap: register_code\n");
 420:./tmk_core/common/action.c ****                             register_code(action.layer_tap.code);
 421:./tmk_core/common/action.c ****                         } else {
 422:./tmk_core/common/action.c ****                             dprint("KEYMAP_TAP_KEY: No tap: On on press\n");
 423:./tmk_core/common/action.c ****                             layer_on(action.layer_tap.val);
 424:./tmk_core/common/action.c ****                         }
 425:./tmk_core/common/action.c ****                     } else {
 426:./tmk_core/common/action.c ****                         if (tap_count > 0) {
 427:./tmk_core/common/action.c ****                             dprint("KEYMAP_TAP_KEY: Tap: unregister_code\n");
 428:./tmk_core/common/action.c ****                             unregister_code(action.layer_tap.code);
 429:./tmk_core/common/action.c ****                         } else {
 430:./tmk_core/common/action.c ****                             dprint("KEYMAP_TAP_KEY: No tap: Off on release\n");
 431:./tmk_core/common/action.c ****                             layer_off(action.layer_tap.val);
 432:./tmk_core/common/action.c ****                         }
 433:./tmk_core/common/action.c ****                     }
 434:./tmk_core/common/action.c ****                     break;
 435:./tmk_core/common/action.c ****             }
 436:./tmk_core/common/action.c ****             break;
 437:./tmk_core/common/action.c ****     #endif
 438:./tmk_core/common/action.c **** #endif
 439:./tmk_core/common/action.c ****         /* Extentions */
 440:./tmk_core/common/action.c **** #ifndef NO_ACTION_MACRO
 441:./tmk_core/common/action.c ****         case ACT_MACRO:
 442:./tmk_core/common/action.c ****             action_macro_play(action_get_macro(record, action.func.id, action.func.opt));
 443:./tmk_core/common/action.c ****             break;
 444:./tmk_core/common/action.c **** #endif
 445:./tmk_core/common/action.c **** #ifdef BACKLIGHT_ENABLE
 446:./tmk_core/common/action.c ****         case ACT_BACKLIGHT:
 447:./tmk_core/common/action.c ****             if (!event.pressed) {
 448:./tmk_core/common/action.c ****                 switch (action.backlight.opt) {
 449:./tmk_core/common/action.c ****                     case BACKLIGHT_INCREASE:
 450:./tmk_core/common/action.c ****                         backlight_increase();
 451:./tmk_core/common/action.c ****                         break;
 452:./tmk_core/common/action.c ****                     case BACKLIGHT_DECREASE:
 453:./tmk_core/common/action.c ****                         backlight_decrease();
 454:./tmk_core/common/action.c ****                         break;
 455:./tmk_core/common/action.c ****                     case BACKLIGHT_TOGGLE:
 456:./tmk_core/common/action.c ****                         backlight_toggle();
 457:./tmk_core/common/action.c ****                         break;
 458:./tmk_core/common/action.c ****                     case BACKLIGHT_STEP:
 459:./tmk_core/common/action.c ****                         backlight_step();
 460:./tmk_core/common/action.c ****                         break;
 461:./tmk_core/common/action.c ****                     case BACKLIGHT_LEVEL:
 462:./tmk_core/common/action.c ****                         backlight_level(action.backlight.level);
 463:./tmk_core/common/action.c ****                         break;
 464:./tmk_core/common/action.c ****                 }
 465:./tmk_core/common/action.c ****             }
 466:./tmk_core/common/action.c ****             break;
 467:./tmk_core/common/action.c **** #endif
 468:./tmk_core/common/action.c ****         case ACT_COMMAND:
 469:./tmk_core/common/action.c ****             break;
 470:./tmk_core/common/action.c **** #ifdef ONEHAND_ENABLE
 471:./tmk_core/common/action.c ****         case ACT_SWAP_HANDS:
 472:./tmk_core/common/action.c ****             switch (action.swap.code) {
 473:./tmk_core/common/action.c ****                 case OP_SH_TOGGLE:
 474:./tmk_core/common/action.c ****                     if (event.pressed) {
 475:./tmk_core/common/action.c ****                         swap_hands = !swap_hands;
 476:./tmk_core/common/action.c ****                     }
 477:./tmk_core/common/action.c ****                     break;
 478:./tmk_core/common/action.c ****                 case OP_SH_ON_OFF:
 479:./tmk_core/common/action.c ****                     swap_hands = event.pressed;
 480:./tmk_core/common/action.c ****                     break;
 481:./tmk_core/common/action.c ****                 case OP_SH_OFF_ON:
 482:./tmk_core/common/action.c ****                     swap_hands = !event.pressed;
 483:./tmk_core/common/action.c ****                     break;
 484:./tmk_core/common/action.c ****                 case OP_SH_ON:
 485:./tmk_core/common/action.c ****                     if (!event.pressed) {
 486:./tmk_core/common/action.c ****                         swap_hands = true;
 487:./tmk_core/common/action.c ****                     }
 488:./tmk_core/common/action.c ****                     break;
 489:./tmk_core/common/action.c ****                 case OP_SH_OFF:
 490:./tmk_core/common/action.c ****                     if (!event.pressed) {
 491:./tmk_core/common/action.c ****                         swap_hands = false;
 492:./tmk_core/common/action.c ****                     }
 493:./tmk_core/common/action.c ****                     break;
 494:./tmk_core/common/action.c ****     #ifndef NO_ACTION_TAPPING
 495:./tmk_core/common/action.c ****                 case OP_SH_TAP_TOGGLE:
 496:./tmk_core/common/action.c ****                     /* tap toggle */
 497:./tmk_core/common/action.c ****                     if (tap_count > 0) {
 498:./tmk_core/common/action.c ****                         if (!event.pressed) {
 499:./tmk_core/common/action.c ****                             swap_hands = !swap_hands;
 500:./tmk_core/common/action.c ****                         }
 501:./tmk_core/common/action.c ****                     } else {
 502:./tmk_core/common/action.c ****                         swap_hands = event.pressed;
 503:./tmk_core/common/action.c ****                     }
 504:./tmk_core/common/action.c ****                     break;
 505:./tmk_core/common/action.c ****                 default:
 506:./tmk_core/common/action.c ****                     if (tap_count > 0) {
 507:./tmk_core/common/action.c ****                         if (event.pressed) {
 508:./tmk_core/common/action.c ****                             register_code(action.swap.code);
 509:./tmk_core/common/action.c ****                         } else {
 510:./tmk_core/common/action.c ****                             unregister_code(action.swap.code);
 511:./tmk_core/common/action.c ****                         }
 512:./tmk_core/common/action.c ****                     } else {
 513:./tmk_core/common/action.c ****                         swap_hands = event.pressed;
 514:./tmk_core/common/action.c ****                     }
 515:./tmk_core/common/action.c ****     #endif
 516:./tmk_core/common/action.c ****             }
 517:./tmk_core/common/action.c **** #endif
 518:./tmk_core/common/action.c **** #ifndef NO_ACTION_FUNCTION
 519:./tmk_core/common/action.c ****         case ACT_FUNCTION:
 520:./tmk_core/common/action.c ****             action_function(record, action.func.id, action.func.opt);
 521:./tmk_core/common/action.c ****             break;
 522:./tmk_core/common/action.c **** #endif
 523:./tmk_core/common/action.c ****         default:
 524:./tmk_core/common/action.c ****             break;
 525:./tmk_core/common/action.c ****     }
 526:./tmk_core/common/action.c **** 
 527:./tmk_core/common/action.c **** #ifndef NO_ACTION_ONESHOT
 528:./tmk_core/common/action.c ****     /* Because we switch layers after a oneshot event, we need to release the
 529:./tmk_core/common/action.c ****      * key before we leave the layer or no key up event will be generated.
 530:./tmk_core/common/action.c ****      */
 531:./tmk_core/common/action.c ****     if (do_release_oneshot && !(get_oneshot_layer_state() & ONESHOT_PRESSED )   ) {
 532:./tmk_core/common/action.c ****         record->event.pressed = false;
 533:./tmk_core/common/action.c ****         layer_on(get_oneshot_layer());
 534:./tmk_core/common/action.c ****         process_record(record);
 535:./tmk_core/common/action.c ****         layer_off(get_oneshot_layer());
 536:./tmk_core/common/action.c ****     }
 537:./tmk_core/common/action.c **** #endif
 538:./tmk_core/common/action.c **** }
 539:./tmk_core/common/action.c **** 
 540:./tmk_core/common/action.c **** 
 541:./tmk_core/common/action.c **** 
 542:./tmk_core/common/action.c **** 
 543:./tmk_core/common/action.c **** /*
 544:./tmk_core/common/action.c ****  * Utilities for actions.
 545:./tmk_core/common/action.c ****  */
 546:./tmk_core/common/action.c **** void register_code(uint8_t code)
 547:./tmk_core/common/action.c **** {
 114               		.loc 1 547 0
 115               		.cfi_startproc
 116               	.LVL6:
 117               	/* prologue: function */
 118               	/* frame size = 0 */
 119               	/* stack size = 0 */
 120               	.L__stack_usage = 0
 548:./tmk_core/common/action.c ****     if (code == KC_NO) {
 121               		.loc 1 548 0
 122 0000 8823      		tst r24
 123 0002 01F4      		brne .+2
 124 0004 00C0      		rjmp .L3
 549:./tmk_core/common/action.c ****         return;
 550:./tmk_core/common/action.c ****     }
 551:./tmk_core/common/action.c **** 
 552:./tmk_core/common/action.c **** #ifdef LOCKING_SUPPORT_ENABLE
 553:./tmk_core/common/action.c ****     else if (KC_LOCKING_CAPS == code) {
 125               		.loc 1 553 0
 126 0006 8238      		cpi r24,lo8(-126)
 127 0008 01F4      		brne .L6
 554:./tmk_core/common/action.c **** #ifdef LOCKING_RESYNC_ENABLE
 555:./tmk_core/common/action.c ****         // Resync: ignore if caps lock already is on
 556:./tmk_core/common/action.c ****         if (host_keyboard_leds() & (1<<USB_LED_CAPS_LOCK)) return;
 128               		.loc 1 556 0
 129 000a 0E94 0000 		call host_keyboard_leds
 130               	.LVL7:
 131 000e 81FD      		sbrc r24,1
 132 0010 00C0      		rjmp .L3
 557:./tmk_core/common/action.c **** #endif
 558:./tmk_core/common/action.c ****         add_key(KC_CAPSLOCK);
 133               		.loc 1 558 0
 134 0012 89E3      		ldi r24,lo8(57)
 135 0014 0E94 0000 		call add_key
 136               	.LVL8:
 559:./tmk_core/common/action.c ****         send_keyboard_report();
 137               		.loc 1 559 0
 138 0018 0E94 0000 		call send_keyboard_report
 139               	.LVL9:
 560:./tmk_core/common/action.c ****         del_key(KC_CAPSLOCK);
 140               		.loc 1 560 0
 141 001c 89E3      		ldi r24,lo8(57)
 142 001e 00C0      		rjmp .L38
 143               	.LVL10:
 144               	.L6:
 561:./tmk_core/common/action.c ****         send_keyboard_report();
 562:./tmk_core/common/action.c ****     }
 563:./tmk_core/common/action.c **** 
 564:./tmk_core/common/action.c ****     else if (KC_LOCKING_NUM == code) {
 145               		.loc 1 564 0
 146 0020 8338      		cpi r24,lo8(-125)
 147 0022 01F4      		brne .L8
 565:./tmk_core/common/action.c **** #ifdef LOCKING_RESYNC_ENABLE
 566:./tmk_core/common/action.c ****         if (host_keyboard_leds() & (1<<USB_LED_NUM_LOCK)) return;
 148               		.loc 1 566 0
 149 0024 0E94 0000 		call host_keyboard_leds
 150               	.LVL11:
 151 0028 80FD      		sbrc r24,0
 152 002a 00C0      		rjmp .L3
 567:./tmk_core/common/action.c **** #endif
 568:./tmk_core/common/action.c ****         add_key(KC_NUMLOCK);
 153               		.loc 1 568 0
 154 002c 83E5      		ldi r24,lo8(83)
 155 002e 0E94 0000 		call add_key
 156               	.LVL12:
 569:./tmk_core/common/action.c ****         send_keyboard_report();
 157               		.loc 1 569 0
 158 0032 0E94 0000 		call send_keyboard_report
 159               	.LVL13:
 570:./tmk_core/common/action.c ****         del_key(KC_NUMLOCK);
 160               		.loc 1 570 0
 161 0036 83E5      		ldi r24,lo8(83)
 162               	.L38:
 163 0038 0E94 0000 		call del_key
 164               	.LVL14:
 165               	.L39:
 571:./tmk_core/common/action.c ****         send_keyboard_report();
 166               		.loc 1 571 0
 167 003c 0C94 0000 		jmp send_keyboard_report
 168               	.LVL15:
 169               	.L8:
 572:./tmk_core/common/action.c ****     }
 573:./tmk_core/common/action.c **** 
 574:./tmk_core/common/action.c ****     else if (KC_LOCKING_SCROLL == code) {
 170               		.loc 1 574 0
 171 0040 8438      		cpi r24,lo8(-124)
 172 0042 01F4      		brne .L9
 575:./tmk_core/common/action.c **** #ifdef LOCKING_RESYNC_ENABLE
 576:./tmk_core/common/action.c ****         if (host_keyboard_leds() & (1<<USB_LED_SCROLL_LOCK)) return;
 173               		.loc 1 576 0
 174 0044 0E94 0000 		call host_keyboard_leds
 175               	.LVL16:
 176 0048 82FD      		sbrc r24,2
 177 004a 00C0      		rjmp .L3
 577:./tmk_core/common/action.c **** #endif
 578:./tmk_core/common/action.c ****         add_key(KC_SCROLLLOCK);
 178               		.loc 1 578 0
 179 004c 87E4      		ldi r24,lo8(71)
 180 004e 0E94 0000 		call add_key
 181               	.LVL17:
 579:./tmk_core/common/action.c ****         send_keyboard_report();
 182               		.loc 1 579 0
 183 0052 0E94 0000 		call send_keyboard_report
 184               	.LVL18:
 580:./tmk_core/common/action.c ****         del_key(KC_SCROLLLOCK);
 185               		.loc 1 580 0
 186 0056 87E4      		ldi r24,lo8(71)
 187 0058 00C0      		rjmp .L38
 188               	.LVL19:
 189               	.L9:
 581:./tmk_core/common/action.c ****         send_keyboard_report();
 582:./tmk_core/common/action.c ****     }
 583:./tmk_core/common/action.c **** #endif
 584:./tmk_core/common/action.c **** 
 585:./tmk_core/common/action.c ****     else if IS_KEY(code) {
 190               		.loc 1 585 0
 191 005a 9CEF      		ldi r25,lo8(-4)
 192 005c 980F      		add r25,r24
 193 005e 913A      		cpi r25,lo8(-95)
 194 0060 00F4      		brsh .L10
 586:./tmk_core/common/action.c ****         // TODO: should push command_proc out of this block?
 587:./tmk_core/common/action.c ****         if (command_proc(code)) return;
 588:./tmk_core/common/action.c **** 
 589:./tmk_core/common/action.c **** #ifndef NO_ACTION_ONESHOT
 590:./tmk_core/common/action.c **** /* TODO: remove
 591:./tmk_core/common/action.c ****         if (oneshot_state.mods && !oneshot_state.disabled) {
 592:./tmk_core/common/action.c ****             uint8_t tmp_mods = get_mods();
 593:./tmk_core/common/action.c ****             add_mods(oneshot_state.mods);
 594:./tmk_core/common/action.c **** 
 595:./tmk_core/common/action.c ****             add_key(code);
 596:./tmk_core/common/action.c ****             send_keyboard_report();
 597:./tmk_core/common/action.c **** 
 598:./tmk_core/common/action.c ****             set_mods(tmp_mods);
 599:./tmk_core/common/action.c ****             send_keyboard_report();
 600:./tmk_core/common/action.c ****             oneshot_cancel();
 601:./tmk_core/common/action.c ****         } else
 602:./tmk_core/common/action.c **** */
 603:./tmk_core/common/action.c **** #endif
 604:./tmk_core/common/action.c ****         {
 605:./tmk_core/common/action.c ****             add_key(code);
 195               		.loc 1 605 0
 196 0062 0E94 0000 		call add_key
 197               	.LVL20:
 198 0066 00C0      		rjmp .L39
 199               	.LVL21:
 200               	.L10:
 606:./tmk_core/common/action.c ****             send_keyboard_report();
 607:./tmk_core/common/action.c ****         }
 608:./tmk_core/common/action.c ****     }
 609:./tmk_core/common/action.c ****     else if IS_MOD(code) {
 201               		.loc 1 609 0
 202 0068 90E2      		ldi r25,lo8(32)
 203 006a 980F      		add r25,r24
 204 006c 9830      		cpi r25,lo8(8)
 205 006e 00F4      		brsh .L11
 610:./tmk_core/common/action.c ****         add_mods(MOD_BIT(code));
 206               		.loc 1 610 0
 207 0070 8770      		andi r24,lo8(7)
 208               	.LVL22:
 209 0072 91E0      		ldi r25,lo8(1)
 210 0074 00C0      		rjmp 2f
 211               		1:
 212 0076 990F      		lsl r25
 213               		2:
 214 0078 8A95      		dec r24
 215 007a 02F4      		brpl 1b
 216 007c 892F      		mov r24,r25
 217 007e 0E94 0000 		call add_mods
 218               	.LVL23:
 219 0082 00C0      		rjmp .L39
 220               	.LVL24:
 221               	.L11:
 611:./tmk_core/common/action.c ****         send_keyboard_report();
 612:./tmk_core/common/action.c ****     }
 613:./tmk_core/common/action.c ****     else if IS_SYSTEM(code) {
 222               		.loc 1 613 0
 223 0084 9BE5      		ldi r25,lo8(91)
 224 0086 980F      		add r25,r24
 225 0088 9330      		cpi r25,lo8(3)
 226 008a 00F4      		brsh .L12
 614:./tmk_core/common/action.c ****         host_system_send(KEYCODE2SYSTEM(code));
 227               		.loc 1 614 0
 228 008c 853A      		cpi r24,lo8(-91)
 229 008e 01F0      		breq .L15
 230               		.loc 1 614 0 is_stmt 0 discriminator 1
 231 0090 863A      		cpi r24,lo8(-90)
 232 0092 01F4      		brne .L16
 233               		.loc 1 614 0
 234 0094 82E8      		ldi r24,lo8(-126)
 235 0096 90E0      		ldi r25,0
 236               	.LVL25:
 237 0098 00C0      		rjmp .L13
 238               	.LVL26:
 239               	.L15:
 240 009a 81E8      		ldi r24,lo8(-127)
 241 009c 90E0      		ldi r25,0
 242               	.LVL27:
 243 009e 00C0      		rjmp .L13
 244               	.LVL28:
 245               	.L16:
 246 00a0 83E8      		ldi r24,lo8(-125)
 247 00a2 90E0      		ldi r25,0
 248               	.LVL29:
 249               	.L13:
 250               		.loc 1 614 0 discriminator 4
 251 00a4 0C94 0000 		jmp host_system_send
 252               	.LVL30:
 253               	.L12:
 615:./tmk_core/common/action.c ****     }
 616:./tmk_core/common/action.c ****     else if IS_CONSUMER(code) {
 254               		.loc 1 616 0 is_stmt 1
 255 00a8 98E5      		ldi r25,lo8(88)
 256 00aa 980F      		add r25,r24
 257 00ac 9531      		cpi r25,lo8(21)
 258 00ae 00F0      		brlo .+2
 259 00b0 00C0      		rjmp .L3
 617:./tmk_core/common/action.c ****         host_consumer_send(KEYCODE2CONSUMER(code));
 260               		.loc 1 617 0
 261 00b2 883A      		cpi r24,lo8(-88)
 262 00b4 01F0      		breq .L17
 263               		.loc 1 617 0 is_stmt 0 discriminator 1
 264 00b6 893A      		cpi r24,lo8(-87)
 265 00b8 01F0      		breq .L18
 266               		.loc 1 617 0 discriminator 3
 267 00ba 8A3A      		cpi r24,lo8(-86)
 268 00bc 01F0      		breq .L19
 269               		.loc 1 617 0 discriminator 5
 270 00be 8B3A      		cpi r24,lo8(-85)
 271 00c0 01F0      		breq .L20
 272               		.loc 1 617 0 discriminator 7
 273 00c2 8C3A      		cpi r24,lo8(-84)
 274 00c4 01F0      		breq .L21
 275               		.loc 1 617 0 discriminator 9
 276 00c6 8B3B      		cpi r24,lo8(-69)
 277 00c8 01F0      		breq .L22
 278               		.loc 1 617 0 discriminator 11
 279 00ca 8C3B      		cpi r24,lo8(-68)
 280 00cc 01F0      		breq .L23
 281               		.loc 1 617 0 discriminator 13
 282 00ce 8D3A      		cpi r24,lo8(-83)
 283 00d0 01F0      		breq .L24
 284               		.loc 1 617 0 discriminator 15
 285 00d2 803B      		cpi r24,lo8(-80)
 286 00d4 01F0      		breq .L25
 287               		.loc 1 617 0 discriminator 17
 288 00d6 8E3A      		cpi r24,lo8(-82)
 289 00d8 01F0      		breq .L26
 290               		.loc 1 617 0 discriminator 19
 291 00da 8F3A      		cpi r24,lo8(-81)
 292 00dc 01F0      		breq .L27
 293               		.loc 1 617 0 discriminator 21
 294 00de 813B      		cpi r24,lo8(-79)
 295 00e0 01F0      		breq .L28
 296               		.loc 1 617 0 discriminator 23
 297 00e2 823B      		cpi r24,lo8(-78)
 298 00e4 01F0      		breq .L29
 299               		.loc 1 617 0 discriminator 25
 300 00e6 833B      		cpi r24,lo8(-77)
 301 00e8 01F0      		breq .L30
 302               		.loc 1 617 0 discriminator 27
 303 00ea 843B      		cpi r24,lo8(-76)
 304 00ec 01F0      		breq .L31
 305               		.loc 1 617 0 discriminator 29
 306 00ee 853B      		cpi r24,lo8(-75)
 307 00f0 01F0      		breq .L32
 308               		.loc 1 617 0 discriminator 31
 309 00f2 863B      		cpi r24,lo8(-74)
 310 00f4 01F0      		breq .L33
 311               		.loc 1 617 0 discriminator 33
 312 00f6 873B      		cpi r24,lo8(-73)
 313 00f8 01F0      		breq .L34
 314               		.loc 1 617 0 discriminator 35
 315 00fa 883B      		cpi r24,lo8(-72)
 316 00fc 01F0      		breq .L35
 317               		.loc 1 617 0 discriminator 37
 318 00fe 893B      		cpi r24,lo8(-71)
 319 0100 01F0      		breq .L36
 320               		.loc 1 617 0 discriminator 39
 321 0102 8A3B      		cpi r24,lo8(-70)
 322 0104 01F0      		breq .+2
 323 0106 00C0      		rjmp .L37
 324               		.loc 1 617 0
 325 0108 8AE2      		ldi r24,lo8(42)
 326 010a 92E0      		ldi r25,lo8(2)
 327               	.LVL31:
 328 010c 00C0      		rjmp .L14
 329               	.LVL32:
 330               	.L17:
 331 010e 82EE      		ldi r24,lo8(-30)
 332 0110 90E0      		ldi r25,0
 333               	.LVL33:
 334 0112 00C0      		rjmp .L14
 335               	.LVL34:
 336               	.L18:
 337 0114 89EE      		ldi r24,lo8(-23)
 338 0116 90E0      		ldi r25,0
 339               	.LVL35:
 340 0118 00C0      		rjmp .L14
 341               	.LVL36:
 342               	.L19:
 343 011a 8AEE      		ldi r24,lo8(-22)
 344 011c 90E0      		ldi r25,0
 345               	.LVL37:
 346 011e 00C0      		rjmp .L14
 347               	.LVL38:
 348               	.L20:
 349 0120 85EB      		ldi r24,lo8(-75)
 350 0122 90E0      		ldi r25,0
 351               	.LVL39:
 352 0124 00C0      		rjmp .L14
 353               	.LVL40:
 354               	.L21:
 355 0126 86EB      		ldi r24,lo8(-74)
 356 0128 90E0      		ldi r25,0
 357               	.LVL41:
 358 012a 00C0      		rjmp .L14
 359               	.LVL42:
 360               	.L22:
 361 012c 83EB      		ldi r24,lo8(-77)
 362 012e 90E0      		ldi r25,0
 363               	.LVL43:
 364 0130 00C0      		rjmp .L14
 365               	.LVL44:
 366               	.L23:
 367 0132 84EB      		ldi r24,lo8(-76)
 368 0134 90E0      		ldi r25,0
 369               	.LVL45:
 370 0136 00C0      		rjmp .L14
 371               	.LVL46:
 372               	.L24:
 373 0138 87EB      		ldi r24,lo8(-73)
 374 013a 90E0      		ldi r25,0
 375               	.LVL47:
 376 013c 00C0      		rjmp .L14
 377               	.LVL48:
 378               	.L25:
 379 013e 8CEC      		ldi r24,lo8(-52)
 380 0140 90E0      		ldi r25,0
 381               	.LVL49:
 382 0142 00C0      		rjmp .L14
 383               	.LVL50:
 384               	.L26:
 385 0144 8DEC      		ldi r24,lo8(-51)
 386 0146 90E0      		ldi r25,0
 387               	.LVL51:
 388 0148 00C0      		rjmp .L14
 389               	.LVL52:
 390               	.L27:
 391 014a 83E8      		ldi r24,lo8(-125)
 392 014c 91E0      		ldi r25,lo8(1)
 393               	.LVL53:
 394 014e 00C0      		rjmp .L14
 395               	.LVL54:
 396               	.L28:
 397 0150 8AE8      		ldi r24,lo8(-118)
 398 0152 91E0      		ldi r25,lo8(1)
 399               	.LVL55:
 400 0154 00C0      		rjmp .L14
 401               	.LVL56:
 402               	.L29:
 403 0156 82E9      		ldi r24,lo8(-110)
 404 0158 91E0      		ldi r25,lo8(1)
 405               	.LVL57:
 406 015a 00C0      		rjmp .L14
 407               	.LVL58:
 408               	.L30:
 409 015c 84E9      		ldi r24,lo8(-108)
 410 015e 91E0      		ldi r25,lo8(1)
 411               	.LVL59:
 412 0160 00C0      		rjmp .L14
 413               	.LVL60:
 414               	.L31:
 415 0162 81E2      		ldi r24,lo8(33)
 416 0164 92E0      		ldi r25,lo8(2)
 417               	.LVL61:
 418 0166 00C0      		rjmp .L14
 419               	.LVL62:
 420               	.L32:
 421 0168 83E2      		ldi r24,lo8(35)
 422 016a 92E0      		ldi r25,lo8(2)
 423               	.LVL63:
 424 016c 00C0      		rjmp .L14
 425               	.LVL64:
 426               	.L33:
 427 016e 84E2      		ldi r24,lo8(36)
 428 0170 92E0      		ldi r25,lo8(2)
 429               	.LVL65:
 430 0172 00C0      		rjmp .L14
 431               	.LVL66:
 432               	.L34:
 433 0174 85E2      		ldi r24,lo8(37)
 434 0176 92E0      		ldi r25,lo8(2)
 435               	.LVL67:
 436 0178 00C0      		rjmp .L14
 437               	.LVL68:
 438               	.L35:
 439 017a 86E2      		ldi r24,lo8(38)
 440 017c 92E0      		ldi r25,lo8(2)
 441               	.LVL69:
 442 017e 00C0      		rjmp .L14
 443               	.LVL70:
 444               	.L36:
 445 0180 87E2      		ldi r24,lo8(39)
 446 0182 92E0      		ldi r25,lo8(2)
 447               	.LVL71:
 448 0184 00C0      		rjmp .L14
 449               	.LVL72:
 450               	.L37:
 451 0186 80E0      		ldi r24,0
 452 0188 90E0      		ldi r25,0
 453               	.LVL73:
 454               	.L14:
 455               		.loc 1 617 0 discriminator 43
 456 018a 0C94 0000 		jmp host_consumer_send
 457               	.LVL74:
 458               	.L3:
 459 018e 0895      		ret
 460               		.cfi_endproc
 461               	.LFE108:
 463               		.section	.text.unregister_code,"ax",@progbits
 464               	.global	unregister_code
 466               	unregister_code:
 467               	.LFB109:
 618:./tmk_core/common/action.c ****     }
 619:./tmk_core/common/action.c **** }
 620:./tmk_core/common/action.c **** 
 621:./tmk_core/common/action.c **** void unregister_code(uint8_t code)
 622:./tmk_core/common/action.c **** {
 468               		.loc 1 622 0 is_stmt 1
 469               		.cfi_startproc
 470               	.LVL75:
 471               	/* prologue: function */
 472               	/* frame size = 0 */
 473               	/* stack size = 0 */
 474               	.L__stack_usage = 0
 623:./tmk_core/common/action.c ****     if (code == KC_NO) {
 475               		.loc 1 623 0
 476 0000 8823      		tst r24
 477 0002 01F4      		brne .+2
 478 0004 00C0      		rjmp .L41
 624:./tmk_core/common/action.c ****         return;
 625:./tmk_core/common/action.c ****     }
 626:./tmk_core/common/action.c **** 
 627:./tmk_core/common/action.c **** #ifdef LOCKING_SUPPORT_ENABLE
 628:./tmk_core/common/action.c ****     else if (KC_LOCKING_CAPS == code) {
 479               		.loc 1 628 0
 480 0006 8238      		cpi r24,lo8(-126)
 481 0008 01F4      		brne .L44
 629:./tmk_core/common/action.c **** #ifdef LOCKING_RESYNC_ENABLE
 630:./tmk_core/common/action.c ****         // Resync: ignore if caps lock already is off
 631:./tmk_core/common/action.c ****         if (!(host_keyboard_leds() & (1<<USB_LED_CAPS_LOCK))) return;
 482               		.loc 1 631 0
 483 000a 0E94 0000 		call host_keyboard_leds
 484               	.LVL76:
 485 000e 81FF      		sbrs r24,1
 486 0010 00C0      		rjmp .L41
 632:./tmk_core/common/action.c **** #endif
 633:./tmk_core/common/action.c ****         add_key(KC_CAPSLOCK);
 487               		.loc 1 633 0
 488 0012 89E3      		ldi r24,lo8(57)
 489 0014 0E94 0000 		call add_key
 490               	.LVL77:
 634:./tmk_core/common/action.c ****         send_keyboard_report();
 491               		.loc 1 634 0
 492 0018 0E94 0000 		call send_keyboard_report
 493               	.LVL78:
 635:./tmk_core/common/action.c ****         del_key(KC_CAPSLOCK);
 494               		.loc 1 635 0
 495 001c 89E3      		ldi r24,lo8(57)
 496 001e 00C0      		rjmp .L60
 497               	.LVL79:
 498               	.L44:
 636:./tmk_core/common/action.c ****         send_keyboard_report();
 637:./tmk_core/common/action.c ****     }
 638:./tmk_core/common/action.c **** 
 639:./tmk_core/common/action.c ****     else if (KC_LOCKING_NUM == code) {
 499               		.loc 1 639 0
 500 0020 8338      		cpi r24,lo8(-125)
 501 0022 01F4      		brne .L46
 640:./tmk_core/common/action.c **** #ifdef LOCKING_RESYNC_ENABLE
 641:./tmk_core/common/action.c ****         if (!(host_keyboard_leds() & (1<<USB_LED_NUM_LOCK))) return;
 502               		.loc 1 641 0
 503 0024 0E94 0000 		call host_keyboard_leds
 504               	.LVL80:
 505 0028 80FF      		sbrs r24,0
 506 002a 00C0      		rjmp .L41
 642:./tmk_core/common/action.c **** #endif
 643:./tmk_core/common/action.c ****         add_key(KC_NUMLOCK);
 507               		.loc 1 643 0
 508 002c 83E5      		ldi r24,lo8(83)
 509 002e 0E94 0000 		call add_key
 510               	.LVL81:
 644:./tmk_core/common/action.c ****         send_keyboard_report();
 511               		.loc 1 644 0
 512 0032 0E94 0000 		call send_keyboard_report
 513               	.LVL82:
 645:./tmk_core/common/action.c ****         del_key(KC_NUMLOCK);
 514               		.loc 1 645 0
 515 0036 83E5      		ldi r24,lo8(83)
 516               	.L60:
 517 0038 0E94 0000 		call del_key
 518               	.LVL83:
 519               	.L61:
 646:./tmk_core/common/action.c ****         send_keyboard_report();
 520               		.loc 1 646 0
 521 003c 0C94 0000 		jmp send_keyboard_report
 522               	.LVL84:
 523               	.L46:
 647:./tmk_core/common/action.c ****     }
 648:./tmk_core/common/action.c **** 
 649:./tmk_core/common/action.c ****     else if (KC_LOCKING_SCROLL == code) {
 524               		.loc 1 649 0
 525 0040 8438      		cpi r24,lo8(-124)
 526 0042 01F4      		brne .L47
 650:./tmk_core/common/action.c **** #ifdef LOCKING_RESYNC_ENABLE
 651:./tmk_core/common/action.c ****         if (!(host_keyboard_leds() & (1<<USB_LED_SCROLL_LOCK))) return;
 527               		.loc 1 651 0
 528 0044 0E94 0000 		call host_keyboard_leds
 529               	.LVL85:
 530 0048 82FF      		sbrs r24,2
 531 004a 00C0      		rjmp .L41
 652:./tmk_core/common/action.c **** #endif
 653:./tmk_core/common/action.c ****         add_key(KC_SCROLLLOCK);
 532               		.loc 1 653 0
 533 004c 87E4      		ldi r24,lo8(71)
 534 004e 0E94 0000 		call add_key
 535               	.LVL86:
 654:./tmk_core/common/action.c ****         send_keyboard_report();
 536               		.loc 1 654 0
 537 0052 0E94 0000 		call send_keyboard_report
 538               	.LVL87:
 655:./tmk_core/common/action.c ****         del_key(KC_SCROLLLOCK);
 539               		.loc 1 655 0
 540 0056 87E4      		ldi r24,lo8(71)
 541 0058 00C0      		rjmp .L60
 542               	.LVL88:
 543               	.L47:
 656:./tmk_core/common/action.c ****         send_keyboard_report();
 657:./tmk_core/common/action.c ****     }
 658:./tmk_core/common/action.c **** #endif
 659:./tmk_core/common/action.c **** 
 660:./tmk_core/common/action.c ****     else if IS_KEY(code) {
 544               		.loc 1 660 0
 545 005a 9CEF      		ldi r25,lo8(-4)
 546 005c 980F      		add r25,r24
 547 005e 913A      		cpi r25,lo8(-95)
 548 0060 00F0      		brlo .L60
 661:./tmk_core/common/action.c ****         del_key(code);
 662:./tmk_core/common/action.c ****         send_keyboard_report();
 663:./tmk_core/common/action.c ****     }
 664:./tmk_core/common/action.c ****     else if IS_MOD(code) {
 549               		.loc 1 664 0
 550 0062 90E2      		ldi r25,lo8(32)
 551 0064 980F      		add r25,r24
 552 0066 9830      		cpi r25,lo8(8)
 553 0068 00F4      		brsh .L49
 665:./tmk_core/common/action.c ****         del_mods(MOD_BIT(code));
 554               		.loc 1 665 0
 555 006a 8770      		andi r24,lo8(7)
 556               	.LVL89:
 557 006c 91E0      		ldi r25,lo8(1)
 558 006e 00C0      		rjmp 2f
 559               		1:
 560 0070 990F      		lsl r25
 561               		2:
 562 0072 8A95      		dec r24
 563 0074 02F4      		brpl 1b
 564 0076 892F      		mov r24,r25
 565 0078 0E94 0000 		call del_mods
 566               	.LVL90:
 567 007c 00C0      		rjmp .L61
 568               	.LVL91:
 569               	.L49:
 666:./tmk_core/common/action.c ****         send_keyboard_report();
 667:./tmk_core/common/action.c ****     }
 668:./tmk_core/common/action.c ****     else if IS_SYSTEM(code) {
 570               		.loc 1 668 0
 571 007e 9BE5      		ldi r25,lo8(91)
 572 0080 980F      		add r25,r24
 573 0082 9330      		cpi r25,lo8(3)
 574 0084 00F4      		brsh .L50
 669:./tmk_core/common/action.c ****         host_system_send(0);
 575               		.loc 1 669 0
 576 0086 80E0      		ldi r24,0
 577 0088 90E0      		ldi r25,0
 578               	.LVL92:
 579 008a 0C94 0000 		jmp host_system_send
 580               	.LVL93:
 581               	.L50:
 670:./tmk_core/common/action.c ****     }
 671:./tmk_core/common/action.c ****     else if IS_CONSUMER(code) {
 582               		.loc 1 671 0
 583 008e 885A      		subi r24,lo8(-(88))
 584               	.LVL94:
 585 0090 8531      		cpi r24,lo8(21)
 586 0092 00F4      		brsh .L41
 672:./tmk_core/common/action.c ****         host_consumer_send(0);
 587               		.loc 1 672 0
 588 0094 80E0      		ldi r24,0
 589 0096 90E0      		ldi r25,0
 590               	.LVL95:
 591 0098 0C94 0000 		jmp host_consumer_send
 592               	.LVL96:
 593               	.L41:
 594 009c 0895      		ret
 595               		.cfi_endproc
 596               	.LFE109:
 598               		.section	.text.register_mods,"ax",@progbits
 599               	.global	register_mods
 601               	register_mods:
 602               	.LFB110:
 673:./tmk_core/common/action.c ****     }
 674:./tmk_core/common/action.c **** }
 675:./tmk_core/common/action.c **** 
 676:./tmk_core/common/action.c **** void register_mods(uint8_t mods)
 677:./tmk_core/common/action.c **** {
 603               		.loc 1 677 0
 604               		.cfi_startproc
 605               	.LVL97:
 606               	/* prologue: function */
 607               	/* frame size = 0 */
 608               	/* stack size = 0 */
 609               	.L__stack_usage = 0
 678:./tmk_core/common/action.c ****     if (mods) {
 610               		.loc 1 678 0
 611 0000 8823      		tst r24
 612 0002 01F0      		breq .L62
 679:./tmk_core/common/action.c ****         add_mods(mods);
 613               		.loc 1 679 0
 614 0004 0E94 0000 		call add_mods
 615               	.LVL98:
 680:./tmk_core/common/action.c ****         send_keyboard_report();
 616               		.loc 1 680 0
 617 0008 0C94 0000 		jmp send_keyboard_report
 618               	.LVL99:
 619               	.L62:
 620 000c 0895      		ret
 621               		.cfi_endproc
 622               	.LFE110:
 624               		.section	.text.unregister_mods,"ax",@progbits
 625               	.global	unregister_mods
 627               	unregister_mods:
 628               	.LFB111:
 681:./tmk_core/common/action.c ****     }
 682:./tmk_core/common/action.c **** }
 683:./tmk_core/common/action.c **** 
 684:./tmk_core/common/action.c **** void unregister_mods(uint8_t mods)
 685:./tmk_core/common/action.c **** {
 629               		.loc 1 685 0
 630               		.cfi_startproc
 631               	.LVL100:
 632               	/* prologue: function */
 633               	/* frame size = 0 */
 634               	/* stack size = 0 */
 635               	.L__stack_usage = 0
 686:./tmk_core/common/action.c ****     if (mods) {
 636               		.loc 1 686 0
 637 0000 8823      		tst r24
 638 0002 01F0      		breq .L64
 687:./tmk_core/common/action.c ****         del_mods(mods);
 639               		.loc 1 687 0
 640 0004 0E94 0000 		call del_mods
 641               	.LVL101:
 688:./tmk_core/common/action.c ****         send_keyboard_report();
 642               		.loc 1 688 0
 643 0008 0C94 0000 		jmp send_keyboard_report
 644               	.LVL102:
 645               	.L64:
 646 000c 0895      		ret
 647               		.cfi_endproc
 648               	.LFE111:
 650               		.section	.text.process_action,"ax",@progbits
 651               	.global	process_action
 653               	process_action:
 654               	.LFB107:
 122:./tmk_core/common/action.c ****     bool do_release_oneshot = false;
 655               		.loc 1 122 0
 656               		.cfi_startproc
 657               	.LVL103:
 658 0000 8F92      		push r8
 659               	.LCFI4:
 660               		.cfi_def_cfa_offset 3
 661               		.cfi_offset 8, -2
 662 0002 9F92      		push r9
 663               	.LCFI5:
 664               		.cfi_def_cfa_offset 4
 665               		.cfi_offset 9, -3
 666 0004 AF92      		push r10
 667               	.LCFI6:
 668               		.cfi_def_cfa_offset 5
 669               		.cfi_offset 10, -4
 670 0006 BF92      		push r11
 671               	.LCFI7:
 672               		.cfi_def_cfa_offset 6
 673               		.cfi_offset 11, -5
 674 0008 CF92      		push r12
 675               	.LCFI8:
 676               		.cfi_def_cfa_offset 7
 677               		.cfi_offset 12, -6
 678 000a DF92      		push r13
 679               	.LCFI9:
 680               		.cfi_def_cfa_offset 8
 681               		.cfi_offset 13, -7
 682 000c EF92      		push r14
 683               	.LCFI10:
 684               		.cfi_def_cfa_offset 9
 685               		.cfi_offset 14, -8
 686 000e FF92      		push r15
 687               	.LCFI11:
 688               		.cfi_def_cfa_offset 10
 689               		.cfi_offset 15, -9
 690 0010 0F93      		push r16
 691               	.LCFI12:
 692               		.cfi_def_cfa_offset 11
 693               		.cfi_offset 16, -10
 694 0012 1F93      		push r17
 695               	.LCFI13:
 696               		.cfi_def_cfa_offset 12
 697               		.cfi_offset 17, -11
 698 0014 CF93      		push r28
 699               	.LCFI14:
 700               		.cfi_def_cfa_offset 13
 701               		.cfi_offset 28, -12
 702 0016 DF93      		push r29
 703               	.LCFI15:
 704               		.cfi_def_cfa_offset 14
 705               		.cfi_offset 29, -13
 706 0018 1F92      		push __zero_reg__
 707               	.LCFI16:
 708               		.cfi_def_cfa_offset 15
 709 001a CDB7      		in r28,__SP_L__
 710 001c DEB7      		in r29,__SP_H__
 711               	.LCFI17:
 712               		.cfi_def_cfa_register 28
 713               	/* prologue: function */
 714               	/* frame size = 1 */
 715               	/* stack size = 13 */
 716               	.L__stack_usage = 13
 717 001e 4C01      		movw r8,r24
 718 0020 A62E      		mov r10,r22
 719 0022 472F      		mov r20,r23
 720               	.LVL104:
 126:./tmk_core/common/action.c **** #endif
 721               		.loc 1 126 0
 722 0024 FC01      		movw r30,r24
 723 0026 E580      		ldd r14,Z+5
 724 0028 E294      		swap r14
 725 002a 8FE0      		ldi r24,lo8(15)
 726               	.LVL105:
 727 002c E822      		and r14,r24
 728               	.LVL106:
 136:./tmk_core/common/action.c ****         // clear the potential weak mods left by previously pressed keys
 729               		.loc 1 136 0
 730 002e F280      		ldd r15,Z+2
 731 0030 FF20      		tst r15
 732 0032 01F0      		breq .L67
 138:./tmk_core/common/action.c ****     }
 733               		.loc 1 138 0
 734 0034 7983      		std Y+1,r23
 735               	.LVL107:
 736 0036 0E94 0000 		call clear_weak_mods
 737               	.LVL108:
 738 003a 4981      		ldd r20,Y+1
 739               	.LVL109:
 740               	.L67:
 143:./tmk_core/common/action.c ****         clear_oneshot_layer_state(ONESHOT_OTHER_KEY_PRESSED);
 741               		.loc 1 143 0
 742 003c 4983      		std Y+1,r20
 743 003e 0E94 0000 		call is_oneshot_layer_active
 744               	.LVL110:
 745 0042 4981      		ldd r20,Y+1
 746 0044 8823      		tst r24
 747 0046 01F0      		breq .L144
 143:./tmk_core/common/action.c ****         clear_oneshot_layer_state(ONESHOT_OTHER_KEY_PRESSED);
 748               		.loc 1 143 0 is_stmt 0 discriminator 1
 749 0048 FF20      		tst r15
 750 004a 01F0      		breq .L144
 751 004c 80E2      		ldi r24,lo8(32)
 752 004e 8A0D      		add r24,r10
 753 0050 8830      		cpi r24,lo8(8)
 754 0052 00F0      		brlo .L144
 144:./tmk_core/common/action.c ****         do_release_oneshot = !is_oneshot_layer_active();
 755               		.loc 1 144 0 is_stmt 1
 756 0054 82E0      		ldi r24,lo8(2)
 757 0056 0E94 0000 		call clear_oneshot_layer_state
 758               	.LVL111:
 145:./tmk_core/common/action.c ****     }
 759               		.loc 1 145 0
 760 005a 0E94 0000 		call is_oneshot_layer_active
 761               	.LVL112:
 762 005e BB24      		clr r11
 763 0060 B394      		inc r11
 764 0062 B826      		eor r11,r24
 765               	.LVL113:
 766 0064 4981      		ldd r20,Y+1
 767 0066 00C0      		rjmp .L68
 768               	.LVL114:
 769               	.L144:
 123:./tmk_core/common/action.c ****     keyevent_t event = record->event;
 770               		.loc 1 123 0
 771 0068 B12C      		mov r11,__zero_reg__
 772               	.LVL115:
 773               	.L68:
 149:./tmk_core/common/action.c ****         /* Key and Mods */
 774               		.loc 1 149 0
 775 006a E42F      		mov r30,r20
 776 006c E295      		swap r30
 777 006e EF70      		andi r30,lo8(15)
 778 0070 F0E0      		ldi r31,0
 779 0072 E050      		subi r30,lo8(-(gs(.L71)))
 780 0074 F040      		sbci r31,hi8(-(gs(.L71)))
 781 0076 0C94 0000 		jmp __tablejump2__
 782               		.section	.progmem.gcc_sw_table.process_action,"a",@progbits
 783               		.p2align	1
 784               	.L71:
 785 0000 0000      		.word gs(.L70)
 786 0002 0000      		.word gs(.L70)
 787 0004 0000      		.word gs(.L72)
 788 0006 0000      		.word gs(.L72)
 789 0008 0000      		.word gs(.L73)
 790 000a 0000      		.word gs(.L74)
 791 000c 0000      		.word gs(.L69)
 792 000e 0000      		.word gs(.L69)
 793 0010 0000      		.word gs(.L75)
 794 0012 0000      		.word gs(.L69)
 795 0014 0000      		.word gs(.L76)
 796 0016 0000      		.word gs(.L76)
 797 0018 0000      		.word gs(.L77)
 798 001a 0000      		.word gs(.L69)
 799 001c 0000      		.word gs(.L69)
 800 001e 0000      		.word gs(.L78)
 801               		.section	.text.process_action
 802               	.L70:
 803               	.LBB2:
 154:./tmk_core/common/action.c ****                                                                 action.key.mods<<4;
 804               		.loc 1 154 0
 805 007a 842F      		mov r24,r20
 806 007c 807F      		andi r24,lo8(-16)
 807 007e 142F      		mov r17,r20
 808 0080 1F70      		andi r17,lo8(15)
 809 0082 8823      		tst r24
 810 0084 01F0      		breq .L80
 154:./tmk_core/common/action.c ****                                                                 action.key.mods<<4;
 811               		.loc 1 154 0 is_stmt 0 discriminator 2
 812 0086 1295      		swap r17
 813 0088 107F      		andi r17,lo8(-16)
 814               	.L80:
 815               	.LVL116:
 156:./tmk_core/common/action.c ****                     if (mods) {
 816               		.loc 1 156 0 is_stmt 1 discriminator 3
 817 008a FF20      		tst r15
 818 008c 01F0      		breq .L81
 157:./tmk_core/common/action.c ****                         if (IS_MOD(action.key.code) || action.key.code == KC_NO) {
 819               		.loc 1 157 0
 820 008e 1123      		tst r17
 821 0090 01F4      		brne .+2
 822 0092 00C0      		rjmp .L174
 158:./tmk_core/common/action.c ****                             // e.g. LSFT(KC_LGUI): we don't want the LSFT to be weak as it would ma
 823               		.loc 1 158 0
 824 0094 80E2      		ldi r24,lo8(32)
 825 0096 8A0D      		add r24,r10
 826 0098 8830      		cpi r24,lo8(8)
 827 009a 00F0      		brlo .L83
 158:./tmk_core/common/action.c ****                             // e.g. LSFT(KC_LGUI): we don't want the LSFT to be weak as it would ma
 828               		.loc 1 158 0 is_stmt 0 discriminator 1
 829 009c A110      		cpse r10,__zero_reg__
 830 009e 00C0      		rjmp .L84
 831               	.L83:
 162:./tmk_core/common/action.c ****                         } else {
 832               		.loc 1 162 0 is_stmt 1
 833 00a0 812F      		mov r24,r17
 834 00a2 0E94 0000 		call add_mods
 835               	.LVL117:
 836 00a6 00C0      		rjmp .L85
 837               	.LVL118:
 838               	.L84:
 164:./tmk_core/common/action.c ****                         }
 839               		.loc 1 164 0
 840 00a8 812F      		mov r24,r17
 841 00aa 0E94 0000 		call add_weak_mods
 842               	.LVL119:
 843               	.L85:
 166:./tmk_core/common/action.c ****                     }
 844               		.loc 1 166 0
 845 00ae 0E94 0000 		call send_keyboard_report
 846               	.LVL120:
 847 00b2 00C0      		rjmp .L174
 848               	.LVL121:
 849               	.L81:
 170:./tmk_core/common/action.c ****                     if (mods) {
 850               		.loc 1 170 0
 851 00b4 8A2D      		mov r24,r10
 852 00b6 0E94 0000 		call unregister_code
 853               	.LVL122:
 171:./tmk_core/common/action.c ****                         if (IS_MOD(action.key.code) || action.key.code == KC_NO) {
 854               		.loc 1 171 0
 855 00ba 1123      		tst r17
 856 00bc 01F4      		brne .+2
 857 00be 00C0      		rjmp .L69
 172:./tmk_core/common/action.c ****                             del_mods(mods);
 858               		.loc 1 172 0
 859 00c0 80E2      		ldi r24,lo8(32)
 860 00c2 8A0D      		add r24,r10
 861 00c4 8830      		cpi r24,lo8(8)
 862 00c6 00F0      		brlo .L87
 172:./tmk_core/common/action.c ****                             del_mods(mods);
 863               		.loc 1 172 0 is_stmt 0 discriminator 1
 864 00c8 A110      		cpse r10,__zero_reg__
 865 00ca 00C0      		rjmp .L88
 866               	.L87:
 173:./tmk_core/common/action.c ****                         } else {
 867               		.loc 1 173 0 is_stmt 1
 868 00cc 812F      		mov r24,r17
 869 00ce 0E94 0000 		call del_mods
 870               	.LVL123:
 871 00d2 00C0      		rjmp .L89
 872               	.L88:
 175:./tmk_core/common/action.c ****                         }
 873               		.loc 1 175 0
 874 00d4 812F      		mov r24,r17
 875 00d6 0E94 0000 		call del_weak_mods
 876               	.LVL124:
 877               	.L89:
 177:./tmk_core/common/action.c ****                     }
 878               		.loc 1 177 0
 879 00da 0E94 0000 		call send_keyboard_report
 880               	.LVL125:
 881 00de 00C0      		rjmp .L69
 882               	.LVL126:
 883               	.L72:
 884               	.LBE2:
 885               	.LBB3:
 186:./tmk_core/common/action.c ****                                                                     action.key.mods<<4;
 886               		.loc 1 186 0
 887 00e0 242F      		mov r18,r20
 888 00e2 207F      		andi r18,lo8(-16)
 889 00e4 842F      		mov r24,r20
 890 00e6 8F70      		andi r24,lo8(15)
 891 00e8 2032      		cpi r18,lo8(32)
 892 00ea 01F0      		breq .L91
 186:./tmk_core/common/action.c ****                                                                     action.key.mods<<4;
 893               		.loc 1 186 0 is_stmt 0 discriminator 2
 894 00ec 8295      		swap r24
 895 00ee 807F      		andi r24,lo8(-16)
 896               	.L91:
 897               	.LVL127:
 188:./tmk_core/common/action.c ****     #ifndef NO_ACTION_ONESHOT
 898               		.loc 1 188 0 is_stmt 1 discriminator 3
 899 00f0 AA20      		tst r10
 900 00f2 01F0      		breq .L93
 901 00f4 F1E0      		ldi r31,lo8(1)
 902 00f6 AF16      		cp r10,r31
 903 00f8 01F0      		breq .L94
 904 00fa 00C0      		rjmp .L179
 905               	.L93:
 192:./tmk_core/common/action.c ****                             if (tap_count == 0) {
 906               		.loc 1 192 0
 907 00fc FF20      		tst r15
 908 00fe 01F0      		breq .L95
 193:./tmk_core/common/action.c ****                                 dprint("MODS_TAP: Oneshot: 0\n");
 909               		.loc 1 193 0
 910 0100 EE20      		tst r14
 911 0102 01F0      		breq .L171
 196:./tmk_core/common/action.c ****                                 dprint("MODS_TAP: Oneshot: start\n");
 912               		.loc 1 196 0
 913 0104 91E0      		ldi r25,lo8(1)
 914 0106 E912      		cpse r14,r25
 915 0108 00C0      		rjmp .L171
 198:./tmk_core/common/action.c ****                     #if defined(ONESHOT_TAP_TOGGLE) && ONESHOT_TAP_TOGGLE > 1
 916               		.loc 1 198 0
 917 010a 0E94 0000 		call set_oneshot_mods
 918               	.LVL128:
 919 010e 00C0      		rjmp .L69
 920               	.LVL129:
 921               	.L95:
 210:./tmk_core/common/action.c ****                                 clear_oneshot_mods();
 922               		.loc 1 210 0
 923 0110 EE20      		tst r14
 924 0112 01F0      		breq .L178
 213:./tmk_core/common/action.c ****                                 // Retain Oneshot mods
 925               		.loc 1 213 0
 926 0114 E1E0      		ldi r30,lo8(1)
 927 0116 EE16      		cp r14,r30
 928 0118 01F4      		brne .+2
 929 011a 00C0      		rjmp .L69
 930               	.L178:
 225:./tmk_core/common/action.c ****                                 unregister_mods(mods);
 931               		.loc 1 225 0
 932 011c 8983      		std Y+1,r24
 933 011e 0E94 0000 		call clear_oneshot_mods
 934               	.LVL130:
 226:./tmk_core/common/action.c ****                             }
 935               		.loc 1 226 0
 936 0122 8981      		ldd r24,Y+1
 937 0124 00C0      		rjmp .L173
 938               	.LVL131:
 939               	.L94:
 232:./tmk_core/common/action.c ****                             if (tap_count <= TAPPING_TOGGLE) {
 940               		.loc 1 232 0
 941 0126 FF20      		tst r15
 942 0128 01F0      		breq .L100
 233:./tmk_core/common/action.c ****                                 register_mods(mods);
 943               		.loc 1 233 0
 944 012a F5E0      		ldi r31,lo8(5)
 945 012c FE15      		cp r31,r14
 946 012e 00F4      		brsh .+2
 947 0130 00C0      		rjmp .L69
 948 0132 00C0      		rjmp .L171
 949               	.L100:
 237:./tmk_core/common/action.c ****                                 unregister_mods(mods);
 950               		.loc 1 237 0
 951 0134 94E0      		ldi r25,lo8(4)
 952 0136 9E15      		cp r25,r14
 953 0138 00F4      		brsh .+2
 954 013a 00C0      		rjmp .L69
 955 013c 00C0      		rjmp .L173
 956               	.L179:
 243:./tmk_core/common/action.c ****                             if (tap_count > 0) {
 957               		.loc 1 243 0
 958 013e FF20      		tst r15
 959 0140 01F0      		breq .L101
 244:./tmk_core/common/action.c **** #ifndef IGNORE_MOD_TAP_INTERRUPT
 960               		.loc 1 244 0
 961 0142 EE20      		tst r14
 962 0144 01F0      		breq .L171
 246:./tmk_core/common/action.c ****                                     dprint("mods_tap: tap: cancel: add_mods\n");
 963               		.loc 1 246 0
 964 0146 F401      		movw r30,r8
 965 0148 9581      		ldd r25,Z+5
 966 014a 90FF      		sbrs r25,0
 967 014c 00C0      		rjmp .L174
 249:./tmk_core/common/action.c ****                                     register_mods(mods);
 968               		.loc 1 249 0
 969 014e 9F70      		andi r25,lo8(15)
 970 0150 9583      		std Z+5,r25
 971               	.LVL132:
 972               	.L171:
 250:./tmk_core/common/action.c ****                                 } else
 973               		.loc 1 250 0
 974 0152 0E94 0000 		call register_mods
 975               	.LVL133:
 976 0156 00C0      		rjmp .L69
 977               	.LVL134:
 978               	.L101:
 262:./tmk_core/common/action.c ****                                 dprint("MODS_TAP: Tap: unregister_code\n");
 979               		.loc 1 262 0
 980 0158 EE20      		tst r14
 981 015a 01F4      		brne .+2
 982 015c 00C0      		rjmp .L173
 983 015e 00C0      		rjmp .L172
 984               	.LVL135:
 985               	.L73:
 986               	.LBE3:
 278:./tmk_core/common/action.c ****                 case PAGE_SYSTEM:
 987               		.loc 1 278 0
 988 0160 242F      		mov r18,r20
 989 0162 2695      		lsr r18
 990 0164 2695      		lsr r18
 991 0166 2370      		andi r18,lo8(3)
 992 0168 30E0      		ldi r19,0
 993 016a 2115      		cp r18,__zero_reg__
 994 016c 3105      		cpc r19,__zero_reg__
 995 016e 01F0      		breq .L105
 996 0170 2130      		cpi r18,1
 997 0172 3105      		cpc r19,__zero_reg__
 998 0174 01F0      		breq .L106
 999 0176 00C0      		rjmp .L69
 1000               	.L105:
 280:./tmk_core/common/action.c ****                         host_system_send(action.usage.code);
 1001               		.loc 1 280 0
 1002 0178 FF20      		tst r15
 1003 017a 01F0      		breq .L107
 281:./tmk_core/common/action.c ****                     } else {
 1004               		.loc 1 281 0
 1005 017c 8A2D      		mov r24,r10
 1006 017e 942F      		mov r25,r20
 1007 0180 9370      		andi r25,lo8(3)
 1008 0182 00C0      		rjmp .L169
 1009               	.L107:
 283:./tmk_core/common/action.c ****                     }
 1010               		.loc 1 283 0
 1011 0184 80E0      		ldi r24,0
 1012 0186 90E0      		ldi r25,0
 1013               	.L169:
 1014 0188 0E94 0000 		call host_system_send
 1015               	.LVL136:
 1016 018c 00C0      		rjmp .L69
 1017               	.LVL137:
 1018               	.L106:
 287:./tmk_core/common/action.c ****                         host_consumer_send(action.usage.code);
 1019               		.loc 1 287 0
 1020 018e FF20      		tst r15
 1021 0190 01F0      		breq .L108
 288:./tmk_core/common/action.c ****                     } else {
 1022               		.loc 1 288 0
 1023 0192 8A2D      		mov r24,r10
 1024 0194 942F      		mov r25,r20
 1025 0196 9370      		andi r25,lo8(3)
 1026 0198 00C0      		rjmp .L175
 1027               	.L108:
 290:./tmk_core/common/action.c ****                     }
 1028               		.loc 1 290 0
 1029 019a 80E0      		ldi r24,0
 1030 019c 90E0      		ldi r25,0
 1031               	.L175:
 1032 019e 0E94 0000 		call host_consumer_send
 1033               	.LVL138:
 1034 01a2 00C0      		rjmp .L69
 1035               	.LVL139:
 1036               	.L74:
 300:./tmk_core/common/action.c ****                 mousekey_send();
 1037               		.loc 1 300 0
 1038 01a4 8A2D      		mov r24,r10
 299:./tmk_core/common/action.c ****                 mousekey_on(action.key.code);
 1039               		.loc 1 299 0
 1040 01a6 FF20      		tst r15
 1041 01a8 01F0      		breq .L109
 300:./tmk_core/common/action.c ****                 mousekey_send();
 1042               		.loc 1 300 0
 1043 01aa 0E94 0000 		call mousekey_on
 1044               	.LVL140:
 1045 01ae 00C0      		rjmp .L170
 1046               	.LVL141:
 1047               	.L109:
 303:./tmk_core/common/action.c ****                 mousekey_send();
 1048               		.loc 1 303 0
 1049 01b0 0E94 0000 		call mousekey_off
 1050               	.LVL142:
 1051               	.L170:
 304:./tmk_core/common/action.c ****             }
 1052               		.loc 1 304 0
 1053 01b4 0E94 0000 		call mousekey_send
 1054               	.LVL143:
 1055 01b8 00C0      		rjmp .L69
 1056               	.LVL144:
 1057               	.L75:
 310:./tmk_core/common/action.c ****                 /* Default Layer Bitwise Operation */
 1058               		.loc 1 310 0
 1059 01ba 842F      		mov r24,r20
 1060 01bc 8370      		andi r24,lo8(3)
 1061 01be 01F0      		breq .+2
 1062 01c0 00C0      		rjmp .L110
 312:./tmk_core/common/action.c ****                     uint8_t shift = action.layer_bitop.part*4;
 1063               		.loc 1 312 0
 1064 01c2 F110      		cpse r15,__zero_reg__
 1065 01c4 00C0      		rjmp .L69
 1066               	.LVL145:
 1067               	.LBB4:
 313:./tmk_core/common/action.c ****                     uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
 1068               		.loc 1 313 0
 1069 01c6 2A2D      		mov r18,r10
 1070 01c8 2295      		swap r18
 1071 01ca 2695      		lsr r18
 1072 01cc 2770      		andi r18,lo8(7)
 1073 01ce 220F      		lsl r18
 1074 01d0 220F      		lsl r18
 314:./tmk_core/common/action.c ****                     uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
 1075               		.loc 1 314 0
 1076 01d2 8A2D      		mov r24,r10
 1077 01d4 8F70      		andi r24,lo8(15)
 1078 01d6 C82E      		mov r12,r24
 1079 01d8 D12C      		mov r13,__zero_reg__
 1080 01da E12C      		mov r14,__zero_reg__
 1081 01dc F12C      		mov r15,__zero_reg__
 1082               	.LVL146:
 1083 01de 022E      		mov r0,r18
 1084 01e0 00C0      		rjmp 2f
 1085               		1:
 1086 01e2 CC0C      		lsl r12
 1087 01e4 DD1C      		rol r13
 1088 01e6 EE1C      		rol r14
 1089 01e8 FF1C      		rol r15
 1090               		2:
 1091 01ea 0A94      		dec r0
 1092 01ec 02F4      		brpl 1b
 1093               	.LVL147:
 315:./tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 1094               		.loc 1 315 0
 1095 01ee A4FE      		sbrs r10,4
 1096 01f0 00C0      		rjmp .L145
 315:./tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 1097               		.loc 1 315 0 is_stmt 0 discriminator 1
 1098 01f2 6FE0      		ldi r22,lo8(15)
 1099 01f4 70E0      		ldi r23,0
 1100 01f6 80E0      		ldi r24,0
 1101 01f8 90E0      		ldi r25,0
 1102 01fa 00C0      		rjmp 2f
 1103               		1:
 1104 01fc 660F      		lsl r22
 1105 01fe 771F      		rol r23
 1106 0200 881F      		rol r24
 1107 0202 991F      		rol r25
 1108               		2:
 1109 0204 2A95      		dec r18
 1110 0206 02F4      		brpl 1b
 1111 0208 6095      		com r22
 1112 020a 7095      		com r23
 1113 020c 8095      		com r24
 1114 020e 9095      		com r25
 1115 0210 00C0      		rjmp .L111
 1116               	.L145:
 315:./tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 1117               		.loc 1 315 0
 1118 0212 60E0      		ldi r22,0
 1119 0214 70E0      		ldi r23,0
 1120 0216 CB01      		movw r24,r22
 1121               	.L111:
 1122               	.LVL148:
 316:./tmk_core/common/action.c ****                         case OP_BIT_AND: default_layer_and(bits | mask); break;
 1123               		.loc 1 316 0 is_stmt 1 discriminator 3
 1124 0218 242F      		mov r18,r20
 1125 021a 2695      		lsr r18
 1126 021c 2695      		lsr r18
 1127 021e 2370      		andi r18,lo8(3)
 1128 0220 30E0      		ldi r19,0
 1129 0222 2230      		cpi r18,2
 1130 0224 3105      		cpc r19,__zero_reg__
 1131 0226 01F0      		breq .L113
 1132 0228 2330      		cpi r18,3
 1133 022a 3105      		cpc r19,__zero_reg__
 1134 022c 01F0      		breq .L114
 1135 022e 6C29      		or r22,r12
 1136 0230 7D29      		or r23,r13
 1137 0232 8E29      		or r24,r14
 1138 0234 9F29      		or r25,r15
 1139               	.LVL149:
 1140 0236 2130      		cpi r18,1
 1141 0238 3105      		cpc r19,__zero_reg__
 1142 023a 01F0      		breq .L177
 317:./tmk_core/common/action.c ****                         case OP_BIT_OR:  default_layer_or(bits | mask);  break;
 1143               		.loc 1 317 0 discriminator 3
 1144 023c 0E94 0000 		call default_layer_and
 1145               	.LVL150:
 1146 0240 00C0      		rjmp .L69
 1147               	.LVL151:
 1148               	.L113:
 319:./tmk_core/common/action.c ****                         case OP_BIT_SET: default_layer_and(mask); default_layer_or(bits); break;
 1149               		.loc 1 319 0
 1150 0242 6C29      		or r22,r12
 1151 0244 7D29      		or r23,r13
 1152 0246 8E29      		or r24,r14
 1153 0248 9F29      		or r25,r15
 1154               	.LVL152:
 1155 024a 0E94 0000 		call default_layer_xor
 1156               	.LVL153:
 1157 024e 00C0      		rjmp .L69
 1158               	.LVL154:
 1159               	.L114:
 320:./tmk_core/common/action.c ****                     }
 1160               		.loc 1 320 0
 1161 0250 0E94 0000 		call default_layer_and
 1162               	.LVL155:
 1163 0254 C701      		movw r24,r14
 1164 0256 B601      		movw r22,r12
 1165               	.LVL156:
 1166               	.L177:
 1167 0258 0E94 0000 		call default_layer_or
 1168               	.LVL157:
 1169 025c 00C0      		rjmp .L69
 1170               	.LVL158:
 1171               	.L110:
 1172               	.LBE4:
 325:./tmk_core/common/action.c ****                                     (action.layer_bitop.on & ON_RELEASE)) {
 1173               		.loc 1 325 0
 1174 025e FF20      		tst r15
 1175 0260 01F0      		breq .L116
 325:./tmk_core/common/action.c ****                                     (action.layer_bitop.on & ON_RELEASE)) {
 1176               		.loc 1 325 0 is_stmt 0 discriminator 1
 1177 0262 842F      		mov r24,r20
 1178 0264 8170      		andi r24,lo8(1)
 1179 0266 00C0      		rjmp .L117
 1180               	.L116:
 325:./tmk_core/common/action.c ****                                     (action.layer_bitop.on & ON_RELEASE)) {
 1181               		.loc 1 325 0 discriminator 2
 1182 0268 8695      		lsr r24
 1183               	.L117:
 325:./tmk_core/common/action.c ****                                     (action.layer_bitop.on & ON_RELEASE)) {
 1184               		.loc 1 325 0 discriminator 3
 1185 026a 8823      		tst r24
 1186 026c 01F4      		brne .+2
 1187 026e 00C0      		rjmp .L69
 1188               	.LVL159:
 1189               	.LBB5:
 327:./tmk_core/common/action.c ****                     uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
 1190               		.loc 1 327 0 is_stmt 1
 1191 0270 2A2D      		mov r18,r10
 1192 0272 2295      		swap r18
 1193 0274 2695      		lsr r18
 1194 0276 2770      		andi r18,lo8(7)
 1195 0278 220F      		lsl r18
 1196 027a 220F      		lsl r18
 328:./tmk_core/common/action.c ****                     uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
 1197               		.loc 1 328 0
 1198 027c 8A2D      		mov r24,r10
 1199 027e 8F70      		andi r24,lo8(15)
 1200 0280 C82E      		mov r12,r24
 1201 0282 D12C      		mov r13,__zero_reg__
 1202 0284 E12C      		mov r14,__zero_reg__
 1203 0286 F12C      		mov r15,__zero_reg__
 1204               	.LVL160:
 1205 0288 022E      		mov r0,r18
 1206 028a 00C0      		rjmp 2f
 1207               		1:
 1208 028c CC0C      		lsl r12
 1209 028e DD1C      		rol r13
 1210 0290 EE1C      		rol r14
 1211 0292 FF1C      		rol r15
 1212               		2:
 1213 0294 0A94      		dec r0
 1214 0296 02F4      		brpl 1b
 1215               	.LVL161:
 329:./tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 1216               		.loc 1 329 0
 1217 0298 A4FE      		sbrs r10,4
 1218 029a 00C0      		rjmp .L146
 329:./tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 1219               		.loc 1 329 0 is_stmt 0 discriminator 1
 1220 029c 6FE0      		ldi r22,lo8(15)
 1221 029e 70E0      		ldi r23,0
 1222 02a0 80E0      		ldi r24,0
 1223 02a2 90E0      		ldi r25,0
 1224 02a4 00C0      		rjmp 2f
 1225               		1:
 1226 02a6 660F      		lsl r22
 1227 02a8 771F      		rol r23
 1228 02aa 881F      		rol r24
 1229 02ac 991F      		rol r25
 1230               		2:
 1231 02ae 2A95      		dec r18
 1232 02b0 02F4      		brpl 1b
 1233 02b2 6095      		com r22
 1234 02b4 7095      		com r23
 1235 02b6 8095      		com r24
 1236 02b8 9095      		com r25
 1237 02ba 00C0      		rjmp .L118
 1238               	.L146:
 329:./tmk_core/common/action.c ****                     switch (action.layer_bitop.op) {
 1239               		.loc 1 329 0
 1240 02bc 60E0      		ldi r22,0
 1241 02be 70E0      		ldi r23,0
 1242 02c0 CB01      		movw r24,r22
 1243               	.L118:
 1244               	.LVL162:
 330:./tmk_core/common/action.c ****                         case OP_BIT_AND: layer_and(bits | mask); break;
 1245               		.loc 1 330 0 is_stmt 1 discriminator 3
 1246 02c2 242F      		mov r18,r20
 1247 02c4 2695      		lsr r18
 1248 02c6 2695      		lsr r18
 1249 02c8 2370      		andi r18,lo8(3)
 1250 02ca 30E0      		ldi r19,0
 1251 02cc 2230      		cpi r18,2
 1252 02ce 3105      		cpc r19,__zero_reg__
 1253 02d0 01F0      		breq .L120
 1254 02d2 2330      		cpi r18,3
 1255 02d4 3105      		cpc r19,__zero_reg__
 1256 02d6 01F0      		breq .L121
 1257 02d8 6C29      		or r22,r12
 1258 02da 7D29      		or r23,r13
 1259 02dc 8E29      		or r24,r14
 1260 02de 9F29      		or r25,r15
 1261               	.LVL163:
 1262 02e0 2130      		cpi r18,1
 1263 02e2 3105      		cpc r19,__zero_reg__
 1264 02e4 01F0      		breq .L176
 331:./tmk_core/common/action.c ****                         case OP_BIT_OR:  layer_or(bits | mask);  break;
 1265               		.loc 1 331 0 discriminator 3
 1266 02e6 0E94 0000 		call layer_and
 1267               	.LVL164:
 1268 02ea 00C0      		rjmp .L69
 1269               	.LVL165:
 1270               	.L120:
 333:./tmk_core/common/action.c ****                         case OP_BIT_SET: layer_and(mask); layer_or(bits); break;
 1271               		.loc 1 333 0
 1272 02ec 6C29      		or r22,r12
 1273 02ee 7D29      		or r23,r13
 1274 02f0 8E29      		or r24,r14
 1275 02f2 9F29      		or r25,r15
 1276               	.LVL166:
 1277 02f4 0E94 0000 		call layer_xor
 1278               	.LVL167:
 1279 02f8 00C0      		rjmp .L69
 1280               	.LVL168:
 1281               	.L121:
 334:./tmk_core/common/action.c ****                     }
 1282               		.loc 1 334 0
 1283 02fa 0E94 0000 		call layer_and
 1284               	.LVL169:
 1285 02fe C701      		movw r24,r14
 1286 0300 B601      		movw r22,r12
 1287               	.LVL170:
 1288               	.L176:
 1289 0302 0E94 0000 		call layer_or
 1290               	.LVL171:
 1291 0306 00C0      		rjmp .L69
 1292               	.LVL172:
 1293               	.L76:
 1294               	.LBE5:
 342:./tmk_core/common/action.c ****                 case 0xe0 ... 0xef:
 1295               		.loc 1 342 0
 1296 0308 0A2D      		mov r16,r10
 1297 030a 10E0      		ldi r17,0
 1298 030c F801      		movw r30,r16
 1299 030e E05E      		subi r30,-32
 1300 0310 F109      		sbc r31,__zero_reg__
 1301 0312 E531      		cpi r30,21
 1302 0314 F105      		cpc r31,__zero_reg__
 1303 0316 00F0      		brlo .+2
 1304 0318 00C0      		rjmp .L123
 1305 031a E050      		subi r30,lo8(-(gs(.L125)))
 1306 031c F040      		sbci r31,hi8(-(gs(.L125)))
 1307 031e 0C94 0000 		jmp __tablejump2__
 1308               		.section	.progmem.gcc_sw_table.process_action
 1309               		.p2align	1
 1310               	.L125:
 1311 0020 0000      		.word gs(.L124)
 1312 0022 0000      		.word gs(.L124)
 1313 0024 0000      		.word gs(.L124)
 1314 0026 0000      		.word gs(.L124)
 1315 0028 0000      		.word gs(.L124)
 1316 002a 0000      		.word gs(.L124)
 1317 002c 0000      		.word gs(.L124)
 1318 002e 0000      		.word gs(.L124)
 1319 0030 0000      		.word gs(.L124)
 1320 0032 0000      		.word gs(.L124)
 1321 0034 0000      		.word gs(.L124)
 1322 0036 0000      		.word gs(.L124)
 1323 0038 0000      		.word gs(.L124)
 1324 003a 0000      		.word gs(.L124)
 1325 003c 0000      		.word gs(.L124)
 1326 003e 0000      		.word gs(.L124)
 1327 0040 0000      		.word gs(.L126)
 1328 0042 0000      		.word gs(.L127)
 1329 0044 0000      		.word gs(.L128)
 1330 0046 0000      		.word gs(.L129)
 1331 0048 0000      		.word gs(.L130)
 1332               		.section	.text.process_action
 1333               	.L124:
 1334 0322 1A2D      		mov r17,r10
 1335 0324 1F70      		andi r17,lo8(15)
 1336 0326 842F      		mov r24,r20
 1337 0328 8F71      		andi r24,lo8(31)
 345:./tmk_core/common/action.c ****                         layer_on(action.layer_tap.val);
 1338               		.loc 1 345 0
 1339 032a FF20      		tst r15
 1340 032c 01F0      		breq .L131
 346:./tmk_core/common/action.c ****                         register_mods(action.layer_tap.code & 0x0f);
 1341               		.loc 1 346 0
 1342 032e 0E94 0000 		call layer_on
 1343               	.LVL173:
 347:./tmk_core/common/action.c ****                     } else {
 1344               		.loc 1 347 0
 1345 0332 812F      		mov r24,r17
 1346 0334 00C0      		rjmp .L171
 1347               	.LVL174:
 1348               	.L131:
 349:./tmk_core/common/action.c ****                         unregister_mods(action.layer_tap.code & 0x0f);
 1349               		.loc 1 349 0
 1350 0336 0E94 0000 		call layer_off
 1351               	.LVL175:
 350:./tmk_core/common/action.c ****                     }
 1352               		.loc 1 350 0
 1353 033a 812F      		mov r24,r17
 1354               	.LVL176:
 1355               	.L173:
 1356 033c 0E94 0000 		call unregister_mods
 1357               	.LVL177:
 1358 0340 00C0      		rjmp .L69
 1359               	.LVL178:
 1360               	.L126:
 355:./tmk_core/common/action.c ****                         if (tap_count < TAPPING_TOGGLE) {
 1361               		.loc 1 355 0
 1362 0342 FF20      		tst r15
 1363 0344 01F0      		breq .L132
 356:./tmk_core/common/action.c ****                             layer_invert(action.layer_tap.val);
 1364               		.loc 1 356 0
 1365 0346 F4E0      		ldi r31,lo8(4)
 1366 0348 FE15      		cp r31,r14
 1367 034a 00F4      		brsh .+2
 1368 034c 00C0      		rjmp .L69
 1369               	.L133:
 357:./tmk_core/common/action.c ****                         }
 1370               		.loc 1 357 0
 1371 034e 842F      		mov r24,r20
 1372 0350 8F71      		andi r24,lo8(31)
 1373 0352 0E94 0000 		call layer_invert
 1374               	.LVL179:
 1375 0356 00C0      		rjmp .L69
 1376               	.LVL180:
 1377               	.L132:
 360:./tmk_core/common/action.c ****                             layer_invert(action.layer_tap.val);
 1378               		.loc 1 360 0
 1379 0358 85E0      		ldi r24,lo8(5)
 1380 035a 8E15      		cp r24,r14
 1381 035c 00F4      		brsh .+2
 1382 035e 00C0      		rjmp .L69
 1383 0360 00C0      		rjmp .L133
 1384               	.L127:
 366:./tmk_core/common/action.c ****                                     layer_off(action.layer_tap.val);
 1385               		.loc 1 366 0
 1386 0362 FF20      		tst r15
 1387 0364 01F0      		breq .L134
 1388               	.L135:
 366:./tmk_core/common/action.c ****                                     layer_off(action.layer_tap.val);
 1389               		.loc 1 366 0 is_stmt 0 discriminator 1
 1390 0366 842F      		mov r24,r20
 1391 0368 8F71      		andi r24,lo8(31)
 1392 036a 0E94 0000 		call layer_on
 1393               	.LVL181:
 1394 036e 00C0      		rjmp .L69
 1395               	.LVL182:
 1396               	.L128:
 370:./tmk_core/common/action.c ****                                     layer_on(action.layer_tap.val);
 1397               		.loc 1 370 0 is_stmt 1
 1398 0370 FF20      		tst r15
 1399 0372 01F0      		breq .L135
 1400               	.L134:
 367:./tmk_core/common/action.c ****                     break;
 1401               		.loc 1 367 0
 1402 0374 842F      		mov r24,r20
 1403 0376 8F71      		andi r24,lo8(31)
 1404 0378 0E94 0000 		call layer_off
 1405               	.LVL183:
 1406 037c 00C0      		rjmp .L69
 1407               	.LVL184:
 1408               	.L129:
 374:./tmk_core/common/action.c ****                                     layer_clear();
 1409               		.loc 1 374 0
 1410 037e FF20      		tst r15
 1411 0380 01F0      		breq .L136
 374:./tmk_core/common/action.c ****                                     layer_clear();
 1412               		.loc 1 374 0 is_stmt 0 discriminator 1
 1413 0382 842F      		mov r24,r20
 1414 0384 8F71      		andi r24,lo8(31)
 1415 0386 0E94 0000 		call layer_move
 1416               	.LVL185:
 1417 038a 00C0      		rjmp .L69
 1418               	.LVL186:
 1419               	.L136:
 375:./tmk_core/common/action.c ****                     break;
 1420               		.loc 1 375 0 is_stmt 1
 1421 038c 0E94 0000 		call layer_clear
 1422               	.LVL187:
 1423 0390 00C0      		rjmp .L69
 1424               	.LVL188:
 1425               	.L130:
 403:./tmk_core/common/action.c ****                         layer_on(action.layer_tap.val);
 1426               		.loc 1 403 0
 1427 0392 FF20      		tst r15
 1428 0394 01F0      		breq .L137
 404:./tmk_core/common/action.c ****                         set_oneshot_layer(action.layer_tap.val, ONESHOT_START);
 1429               		.loc 1 404 0
 1430 0396 142F      		mov r17,r20
 1431 0398 1F71      		andi r17,lo8(31)
 1432 039a 812F      		mov r24,r17
 1433 039c 0E94 0000 		call layer_on
 1434               	.LVL189:
 405:./tmk_core/common/action.c ****                     } else {
 1435               		.loc 1 405 0
 1436 03a0 63E0      		ldi r22,lo8(3)
 1437 03a2 812F      		mov r24,r17
 1438 03a4 0E94 0000 		call set_oneshot_layer
 1439               	.LVL190:
 1440 03a8 00C0      		rjmp .L69
 1441               	.LVL191:
 1442               	.L137:
 407:./tmk_core/common/action.c ****                         if (tap_count > 1) {
 1443               		.loc 1 407 0
 1444 03aa 81E0      		ldi r24,lo8(1)
 1445 03ac 0E94 0000 		call clear_oneshot_layer_state
 1446               	.LVL192:
 408:./tmk_core/common/action.c ****                             clear_oneshot_layer_state(ONESHOT_OTHER_KEY_PRESSED);
 1447               		.loc 1 408 0
 1448 03b0 91E0      		ldi r25,lo8(1)
 1449 03b2 9E15      		cp r25,r14
 1450 03b4 00F4      		brsh .L69
 409:./tmk_core/common/action.c ****                         }
 1451               		.loc 1 409 0
 1452 03b6 82E0      		ldi r24,lo8(2)
 1453 03b8 0E94 0000 		call clear_oneshot_layer_state
 1454               	.LVL193:
 1455 03bc 00C0      		rjmp .L69
 1456               	.LVL194:
 1457               	.L123:
 417:./tmk_core/common/action.c ****                         if (tap_count > 0) {
 1458               		.loc 1 417 0
 1459 03be FF20      		tst r15
 1460 03c0 01F0      		breq .L138
 418:./tmk_core/common/action.c ****                             dprint("KEYMAP_TAP_KEY: Tap: register_code\n");
 1461               		.loc 1 418 0
 1462 03c2 EE20      		tst r14
 1463 03c4 01F0      		breq .L135
 1464               	.L174:
 420:./tmk_core/common/action.c ****                         } else {
 1465               		.loc 1 420 0
 1466 03c6 8A2D      		mov r24,r10
 1467 03c8 0E94 0000 		call register_code
 1468               	.LVL195:
 1469 03cc 00C0      		rjmp .L69
 1470               	.LVL196:
 1471               	.L138:
 426:./tmk_core/common/action.c ****                             dprint("KEYMAP_TAP_KEY: Tap: unregister_code\n");
 1472               		.loc 1 426 0
 1473 03ce EE20      		tst r14
 1474 03d0 01F0      		breq .L134
 1475               	.L172:
 428:./tmk_core/common/action.c ****                         } else {
 1476               		.loc 1 428 0
 1477 03d2 8A2D      		mov r24,r10
 1478 03d4 0E94 0000 		call unregister_code
 1479               	.LVL197:
 1480 03d8 00C0      		rjmp .L69
 1481               	.LVL198:
 1482               	.L77:
 442:./tmk_core/common/action.c ****             break;
 1483               		.loc 1 442 0
 1484 03da 4F70      		andi r20,lo8(15)
 1485               	.LVL199:
 1486 03dc 6A2D      		mov r22,r10
 1487 03de C401      		movw r24,r8
 1488 03e0 0E94 0000 		call action_get_macro
 1489               	.LVL200:
 1490 03e4 0E94 0000 		call action_macro_play
 1491               	.LVL201:
 443:./tmk_core/common/action.c **** #endif
 1492               		.loc 1 443 0
 1493 03e8 00C0      		rjmp .L69
 1494               	.LVL202:
 1495               	.L78:
 520:./tmk_core/common/action.c ****             break;
 1496               		.loc 1 520 0
 1497 03ea 4F70      		andi r20,lo8(15)
 1498               	.LVL203:
 1499 03ec 6A2D      		mov r22,r10
 1500 03ee C401      		movw r24,r8
 1501 03f0 0E94 0000 		call action_function
 1502               	.LVL204:
 1503               	.L69:
 531:./tmk_core/common/action.c ****         record->event.pressed = false;
 1504               		.loc 1 531 0
 1505 03f4 BB20      		tst r11
 1506 03f6 01F0      		breq .L66
 531:./tmk_core/common/action.c ****         record->event.pressed = false;
 1507               		.loc 1 531 0 is_stmt 0 discriminator 1
 1508 03f8 0E94 0000 		call get_oneshot_layer_state
 1509               	.LVL205:
 1510 03fc 80FD      		sbrc r24,0
 1511 03fe 00C0      		rjmp .L66
 532:./tmk_core/common/action.c ****         layer_on(get_oneshot_layer());
 1512               		.loc 1 532 0 is_stmt 1
 1513 0400 F401      		movw r30,r8
 1514 0402 1282      		std Z+2,__zero_reg__
 533:./tmk_core/common/action.c ****         process_record(record);
 1515               		.loc 1 533 0
 1516 0404 0E94 0000 		call get_oneshot_layer
 1517               	.LVL206:
 1518 0408 0E94 0000 		call layer_on
 1519               	.LVL207:
 534:./tmk_core/common/action.c ****         layer_off(get_oneshot_layer());
 1520               		.loc 1 534 0
 1521 040c C401      		movw r24,r8
 1522 040e 0E94 0000 		call process_record
 1523               	.LVL208:
 535:./tmk_core/common/action.c ****     }
 1524               		.loc 1 535 0
 1525 0412 0E94 0000 		call get_oneshot_layer
 1526               	.LVL209:
 1527               	/* epilogue start */
 538:./tmk_core/common/action.c **** 
 1528               		.loc 1 538 0
 1529 0416 0F90      		pop __tmp_reg__
 1530 0418 DF91      		pop r29
 1531 041a CF91      		pop r28
 1532 041c 1F91      		pop r17
 1533 041e 0F91      		pop r16
 1534 0420 FF90      		pop r15
 1535               	.LVL210:
 1536 0422 EF90      		pop r14
 1537 0424 DF90      		pop r13
 1538 0426 CF90      		pop r12
 1539 0428 BF90      		pop r11
 1540               	.LVL211:
 1541 042a AF90      		pop r10
 1542 042c 9F90      		pop r9
 1543 042e 8F90      		pop r8
 1544               	.LVL212:
 535:./tmk_core/common/action.c ****     }
 1545               		.loc 1 535 0
 1546 0430 0C94 0000 		jmp layer_off
 1547               	.LVL213:
 1548               	.L66:
 1549               	/* epilogue start */
 538:./tmk_core/common/action.c **** 
 1550               		.loc 1 538 0
 1551 0434 0F90      		pop __tmp_reg__
 1552 0436 DF91      		pop r29
 1553 0438 CF91      		pop r28
 1554 043a 1F91      		pop r17
 1555 043c 0F91      		pop r16
 1556 043e FF90      		pop r15
 1557               	.LVL214:
 1558 0440 EF90      		pop r14
 1559 0442 DF90      		pop r13
 1560 0444 CF90      		pop r12
 1561 0446 BF90      		pop r11
 1562               	.LVL215:
 1563 0448 AF90      		pop r10
 1564 044a 9F90      		pop r9
 1565 044c 8F90      		pop r8
 1566               	.LVL216:
 1567 044e 0895      		ret
 1568               		.cfi_endproc
 1569               	.LFE107:
 1571               		.section	.text.process_record,"ax",@progbits
 1572               	.global	process_record
 1574               	process_record:
 1575               	.LFB106:
 104:./tmk_core/common/action.c ****     if (IS_NOEVENT(record->event)) { return; }
 1576               		.loc 1 104 0
 1577               		.cfi_startproc
 1578               	.LVL217:
 1579 0000 0F93      		push r16
 1580               	.LCFI18:
 1581               		.cfi_def_cfa_offset 3
 1582               		.cfi_offset 16, -2
 1583 0002 1F93      		push r17
 1584               	.LCFI19:
 1585               		.cfi_def_cfa_offset 4
 1586               		.cfi_offset 17, -3
 1587 0004 CF93      		push r28
 1588               	.LCFI20:
 1589               		.cfi_def_cfa_offset 5
 1590               		.cfi_offset 28, -4
 1591 0006 DF93      		push r29
 1592               	.LCFI21:
 1593               		.cfi_def_cfa_offset 6
 1594               		.cfi_offset 29, -5
 1595               	/* prologue: function */
 1596               	/* frame size = 0 */
 1597               	/* stack size = 4 */
 1598               	.L__stack_usage = 4
 1599 0008 EC01      		movw r28,r24
 105:./tmk_core/common/action.c **** 
 1600               		.loc 1 105 0
 1601 000a 2881      		ld r18,Y
 1602 000c 3981      		ldd r19,Y+1
 1603               	.LBB8:
 1604               	.LBB9:
 1605               		.file 2 "./tmk_core/common/keyboard.h"
   1:./tmk_core/common/keyboard.h **** /*
   2:./tmk_core/common/keyboard.h **** Copyright 2011,2012,2013 Jun Wako <wakojun@gmail.com>
   3:./tmk_core/common/keyboard.h **** 
   4:./tmk_core/common/keyboard.h **** This program is free software: you can redistribute it and/or modify
   5:./tmk_core/common/keyboard.h **** it under the terms of the GNU General Public License as published by
   6:./tmk_core/common/keyboard.h **** the Free Software Foundation, either version 2 of the License, or
   7:./tmk_core/common/keyboard.h **** (at your option) any later version.
   8:./tmk_core/common/keyboard.h **** 
   9:./tmk_core/common/keyboard.h **** This program is distributed in the hope that it will be useful,
  10:./tmk_core/common/keyboard.h **** but WITHOUT ANY WARRANTY; without even the implied warranty of
  11:./tmk_core/common/keyboard.h **** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  12:./tmk_core/common/keyboard.h **** GNU General Public License for more details.
  13:./tmk_core/common/keyboard.h **** 
  14:./tmk_core/common/keyboard.h **** You should have received a copy of the GNU General Public License
  15:./tmk_core/common/keyboard.h **** along with this program.  If not, see <http://www.gnu.org/licenses/>.
  16:./tmk_core/common/keyboard.h **** */
  17:./tmk_core/common/keyboard.h **** 
  18:./tmk_core/common/keyboard.h **** #ifndef KEYBOARD_H
  19:./tmk_core/common/keyboard.h **** #define KEYBOARD_H
  20:./tmk_core/common/keyboard.h **** 
  21:./tmk_core/common/keyboard.h **** #include <stdbool.h>
  22:./tmk_core/common/keyboard.h **** #include <stdint.h>
  23:./tmk_core/common/keyboard.h **** 
  24:./tmk_core/common/keyboard.h **** 
  25:./tmk_core/common/keyboard.h **** #ifdef __cplusplus
  26:./tmk_core/common/keyboard.h **** extern "C" {
  27:./tmk_core/common/keyboard.h **** #endif
  28:./tmk_core/common/keyboard.h **** 
  29:./tmk_core/common/keyboard.h **** /* key matrix position */
  30:./tmk_core/common/keyboard.h **** typedef struct {
  31:./tmk_core/common/keyboard.h ****     uint8_t col;
  32:./tmk_core/common/keyboard.h ****     uint8_t row;
  33:./tmk_core/common/keyboard.h **** } keypos_t;
  34:./tmk_core/common/keyboard.h **** 
  35:./tmk_core/common/keyboard.h **** /* key event */
  36:./tmk_core/common/keyboard.h **** typedef struct {
  37:./tmk_core/common/keyboard.h ****     keypos_t key;
  38:./tmk_core/common/keyboard.h ****     bool     pressed;
  39:./tmk_core/common/keyboard.h ****     uint16_t time;
  40:./tmk_core/common/keyboard.h **** } keyevent_t;
  41:./tmk_core/common/keyboard.h **** 
  42:./tmk_core/common/keyboard.h **** /* equivalent test of keypos_t */
  43:./tmk_core/common/keyboard.h **** #define KEYEQ(keya, keyb)       ((keya).row == (keyb).row && (keya).col == (keyb).col)
  44:./tmk_core/common/keyboard.h **** 
  45:./tmk_core/common/keyboard.h **** /* Rules for No Event:
  46:./tmk_core/common/keyboard.h ****  * 1) (time == 0) to handle (keyevent_t){} as empty event
  47:./tmk_core/common/keyboard.h ****  * 2) Matrix(255, 255) to make TICK event available
  48:./tmk_core/common/keyboard.h ****  */
  49:./tmk_core/common/keyboard.h **** static inline bool IS_NOEVENT(keyevent_t event) { return event.time == 0 || (event.key.row == 255 &
 1606               		.loc 2 49 0
 1607 000e 8B81      		ldd r24,Y+3
 1608 0010 9C81      		ldd r25,Y+4
 1609               	.LVL218:
 1610 0012 892B      		or r24,r25
 1611 0014 01F0      		breq .L186
 1612 0016 3F3F      		cpi r19,lo8(-1)
 1613 0018 01F0      		breq .L182
 1614               	.L183:
 1615 001a 80E0      		ldi r24,0
 1616 001c 00C0      		rjmp .L181
 1617               	.L182:
 1618 001e 2F3F      		cpi r18,lo8(-1)
 1619 0020 01F4      		brne .L183
 1620               	.L186:
 1621 0022 81E0      		ldi r24,lo8(1)
 1622               	.L181:
 1623               	.LBE9:
 1624               	.LBE8:
 105:./tmk_core/common/action.c **** 
 1625               		.loc 1 105 0
 1626 0024 8111      		cpse r24,__zero_reg__
 1627 0026 00C0      		rjmp .L180
 107:./tmk_core/common/action.c ****         return;
 1628               		.loc 1 107 0
 1629 0028 CE01      		movw r24,r28
 1630 002a 0E94 0000 		call process_record_quantum
 1631               	.LVL219:
 1632 002e 8823      		tst r24
 1633 0030 01F0      		breq .L180
 110:./tmk_core/common/action.c ****     dprint("ACTION: "); debug_action(action);
 1634               		.loc 1 110 0
 1635 0032 6881      		ld r22,Y
 1636 0034 7981      		ldd r23,Y+1
 1637 0036 8A81      		ldd r24,Y+2
 1638 0038 0E94 0000 		call store_or_get_action
 1639               	.LVL220:
 1640 003c 8C01      		movw r16,r24
 1641               	.LVL221:
 113:./tmk_core/common/action.c ****     dprint(" default_layer_state: "); default_layer_debug();
 1642               		.loc 1 113 0
 1643 003e 0E94 0000 		call layer_debug
 1644               	.LVL222:
 114:./tmk_core/common/action.c **** #endif
 1645               		.loc 1 114 0
 1646 0042 0E94 0000 		call default_layer_debug
 1647               	.LVL223:
 118:./tmk_core/common/action.c **** }
 1648               		.loc 1 118 0
 1649 0046 B801      		movw r22,r16
 1650               	.LVL224:
 1651 0048 CE01      		movw r24,r28
 1652 004a 0E94 0000 		call process_action
 1653               	.LVL225:
 1654               	.L180:
 1655               	/* epilogue start */
 119:./tmk_core/common/action.c **** 
 1656               		.loc 1 119 0
 1657 004e DF91      		pop r29
 1658 0050 CF91      		pop r28
 1659               	.LVL226:
 1660 0052 1F91      		pop r17
 1661 0054 0F91      		pop r16
 1662               	.LVL227:
 1663 0056 0895      		ret
 1664               		.cfi_endproc
 1665               	.LFE106:
 1667               		.section	.text.process_record_nocache,"ax",@progbits
 1668               	.global	process_record_nocache
 1670               	process_record_nocache:
 1671               	.LFB104:
  86:./tmk_core/common/action.c ****     disable_action_cache = true;
 1672               		.loc 1 86 0
 1673               		.cfi_startproc
 1674               	.LVL228:
 1675               	/* prologue: function */
 1676               	/* frame size = 0 */
 1677               	/* stack size = 0 */
 1678               	.L__stack_usage = 0
  87:./tmk_core/common/action.c ****     process_record(record);
 1679               		.loc 1 87 0
 1680 0000 21E0      		ldi r18,lo8(1)
 1681 0002 2093 0000 		sts disable_action_cache,r18
  88:./tmk_core/common/action.c ****     disable_action_cache = false;
 1682               		.loc 1 88 0
 1683 0006 0E94 0000 		call process_record
 1684               	.LVL229:
  89:./tmk_core/common/action.c **** }
 1685               		.loc 1 89 0
 1686 000a 1092 0000 		sts disable_action_cache,__zero_reg__
 1687 000e 0895      		ret
 1688               		.cfi_endproc
 1689               	.LFE104:
 1691               		.section	.text.clear_keyboard_but_mods,"ax",@progbits
 1692               	.global	clear_keyboard_but_mods
 1694               	clear_keyboard_but_mods:
 1695               	.LFB113:
 689:./tmk_core/common/action.c ****     }
 690:./tmk_core/common/action.c **** }
 691:./tmk_core/common/action.c **** 
 692:./tmk_core/common/action.c **** void clear_keyboard(void)
 693:./tmk_core/common/action.c **** {
 694:./tmk_core/common/action.c ****     clear_mods();
 695:./tmk_core/common/action.c ****     clear_keyboard_but_mods();
 696:./tmk_core/common/action.c **** }
 697:./tmk_core/common/action.c **** 
 698:./tmk_core/common/action.c **** void clear_keyboard_but_mods(void)
 699:./tmk_core/common/action.c **** {
 1696               		.loc 1 699 0
 1697               		.cfi_startproc
 1698               	/* prologue: function */
 1699               	/* frame size = 0 */
 1700               	/* stack size = 0 */
 1701               	.L__stack_usage = 0
 700:./tmk_core/common/action.c ****     clear_weak_mods();
 1702               		.loc 1 700 0
 1703 0000 0E94 0000 		call clear_weak_mods
 1704               	.LVL230:
 701:./tmk_core/common/action.c ****     clear_macro_mods();
 1705               		.loc 1 701 0
 1706 0004 0E94 0000 		call clear_macro_mods
 1707               	.LVL231:
 702:./tmk_core/common/action.c ****     clear_keys();
 1708               		.loc 1 702 0
 1709 0008 0E94 0000 		call clear_keys
 1710               	.LVL232:
 703:./tmk_core/common/action.c ****     send_keyboard_report();
 1711               		.loc 1 703 0
 1712 000c 0E94 0000 		call send_keyboard_report
 1713               	.LVL233:
 704:./tmk_core/common/action.c **** #ifdef MOUSEKEY_ENABLE
 705:./tmk_core/common/action.c ****     mousekey_clear();
 1714               		.loc 1 705 0
 1715 0010 0E94 0000 		call mousekey_clear
 1716               	.LVL234:
 706:./tmk_core/common/action.c ****     mousekey_send();
 1717               		.loc 1 706 0
 1718 0014 0E94 0000 		call mousekey_send
 1719               	.LVL235:
 707:./tmk_core/common/action.c **** #endif
 708:./tmk_core/common/action.c **** #ifdef EXTRAKEY_ENABLE
 709:./tmk_core/common/action.c ****     host_system_send(0);
 1720               		.loc 1 709 0
 1721 0018 80E0      		ldi r24,0
 1722 001a 90E0      		ldi r25,0
 1723 001c 0E94 0000 		call host_system_send
 1724               	.LVL236:
 710:./tmk_core/common/action.c ****     host_consumer_send(0);
 1725               		.loc 1 710 0
 1726 0020 80E0      		ldi r24,0
 1727 0022 90E0      		ldi r25,0
 1728 0024 0C94 0000 		jmp host_consumer_send
 1729               	.LVL237:
 1730               		.cfi_endproc
 1731               	.LFE113:
 1733               		.section	.text.clear_keyboard,"ax",@progbits
 1734               	.global	clear_keyboard
 1736               	clear_keyboard:
 1737               	.LFB112:
 693:./tmk_core/common/action.c ****     clear_mods();
 1738               		.loc 1 693 0
 1739               		.cfi_startproc
 1740               	/* prologue: function */
 1741               	/* frame size = 0 */
 1742               	/* stack size = 0 */
 1743               	.L__stack_usage = 0
 694:./tmk_core/common/action.c ****     clear_keyboard_but_mods();
 1744               		.loc 1 694 0
 1745 0000 0E94 0000 		call clear_mods
 1746               	.LVL238:
 695:./tmk_core/common/action.c **** }
 1747               		.loc 1 695 0
 1748 0004 0C94 0000 		jmp clear_keyboard_but_mods
 1749               	.LVL239:
 1750               		.cfi_endproc
 1751               	.LFE112:
 1753               		.section	.text.is_tap_key,"ax",@progbits
 1754               	.global	is_tap_key
 1756               	is_tap_key:
 1757               	.LFB114:
 711:./tmk_core/common/action.c **** #endif
 712:./tmk_core/common/action.c **** }
 713:./tmk_core/common/action.c **** 
 714:./tmk_core/common/action.c **** bool is_tap_key(keypos_t key)
 715:./tmk_core/common/action.c **** {
 1758               		.loc 1 715 0
 1759               		.cfi_startproc
 1760               	.LVL240:
 1761               	/* prologue: function */
 1762               	/* frame size = 0 */
 1763               	/* stack size = 0 */
 1764               	.L__stack_usage = 0
 716:./tmk_core/common/action.c ****     action_t action = layer_switch_get_action(key);
 1765               		.loc 1 716 0
 1766 0000 0E94 0000 		call layer_switch_get_action
 1767               	.LVL241:
 717:./tmk_core/common/action.c **** 
 718:./tmk_core/common/action.c ****     switch (action.kind.id) {
 1768               		.loc 1 718 0
 1769 0004 E92F      		mov r30,r25
 1770 0006 E295      		swap r30
 1771 0008 EF70      		andi r30,lo8(15)
 1772 000a F0E0      		ldi r31,0
 1773 000c 3297      		sbiw r30,2
 1774 000e EE30      		cpi r30,14
 1775 0010 F105      		cpc r31,__zero_reg__
 1776 0012 00F4      		brsh .L214
 1777 0014 E050      		subi r30,lo8(-(gs(.L196)))
 1778 0016 F040      		sbci r31,hi8(-(gs(.L196)))
 1779 0018 0C94 0000 		jmp __tablejump2__
 1780               		.section	.progmem.gcc_sw_table.is_tap_key,"a",@progbits
 1781               		.p2align	1
 1782               	.L196:
 1783 0000 0000      		.word gs(.L195)
 1784 0002 0000      		.word gs(.L195)
 1785 0004 0000      		.word gs(.L214)
 1786 0006 0000      		.word gs(.L214)
 1787 0008 0000      		.word gs(.L197)
 1788 000a 0000      		.word gs(.L214)
 1789 000c 0000      		.word gs(.L214)
 1790 000e 0000      		.word gs(.L214)
 1791 0010 0000      		.word gs(.L195)
 1792 0012 0000      		.word gs(.L195)
 1793 0014 0000      		.word gs(.L198)
 1794 0016 0000      		.word gs(.L214)
 1795 0018 0000      		.word gs(.L214)
 1796 001a 0000      		.word gs(.L198)
 1797               		.section	.text.is_tap_key
 1798               	.L195:
 719:./tmk_core/common/action.c ****         case ACT_LMODS_TAP:
 720:./tmk_core/common/action.c ****         case ACT_RMODS_TAP:
 721:./tmk_core/common/action.c ****         case ACT_LAYER_TAP:
 722:./tmk_core/common/action.c ****         case ACT_LAYER_TAP_EXT:
 723:./tmk_core/common/action.c ****             switch (action.layer_tap.code) {
 1799               		.loc 1 723 0
 1800 001c 803F      		cpi r24,lo8(-16)
 1801 001e 01F0      		breq .L201
 1802 0020 00F4      		brsh .L200
 1803 0022 803E      		cpi r24,lo8(-32)
 1804 0024 00F4      		brsh .L214
 1805 0026 00C0      		rjmp .L201
 1806               	.L200:
 1807 0028 843F      		cpi r24,lo8(-12)
 1808 002a 01F4      		brne .L214
 1809 002c 00C0      		rjmp .L201
 1810               	.L197:
 724:./tmk_core/common/action.c ****                 case 0x00 ... 0xdf:
 725:./tmk_core/common/action.c ****                 case OP_TAP_TOGGLE:
 726:./tmk_core/common/action.c ****                 case OP_ONESHOT:
 727:./tmk_core/common/action.c ****                     return true;
 728:./tmk_core/common/action.c ****             }
 729:./tmk_core/common/action.c ****             return false;
 730:./tmk_core/common/action.c ****         case ACT_SWAP_HANDS:
 731:./tmk_core/common/action.c ****             switch (action.swap.code) {
 1811               		.loc 1 731 0
 1812 002e 803E      		cpi r24,lo8(-32)
 1813 0030 00F0      		brlo .L201
 1814 0032 813F      		cpi r24,lo8(-15)
 1815 0034 01F4      		brne .L214
 1816               	.L201:
 732:./tmk_core/common/action.c ****                 case 0x00 ... 0xdf:
 733:./tmk_core/common/action.c ****                 case OP_SH_TAP_TOGGLE:
 734:./tmk_core/common/action.c ****                     return true;
 1817               		.loc 1 734 0
 1818 0036 81E0      		ldi r24,lo8(1)
 1819               	.LVL242:
 1820 0038 0895      		ret
 1821               	.LVL243:
 1822               	.L198:
 735:./tmk_core/common/action.c ****             }
 736:./tmk_core/common/action.c ****             return false;
 737:./tmk_core/common/action.c ****         case ACT_MACRO:
 738:./tmk_core/common/action.c ****         case ACT_FUNCTION:
 739:./tmk_core/common/action.c ****             if (action.func.opt & FUNC_TAP) { return true; }
 1823               		.loc 1 739 0
 1824 003a 93FB      		bst r25,3
 1825 003c 8827      		clr r24
 1826 003e 80F9      		bld r24,0
 1827               	.LVL244:
 1828 0040 0895      		ret
 1829               	.LVL245:
 1830               	.L214:
 736:./tmk_core/common/action.c ****         case ACT_MACRO:
 1831               		.loc 1 736 0
 1832 0042 80E0      		ldi r24,0
 1833               	.LVL246:
 740:./tmk_core/common/action.c ****             return false;
 741:./tmk_core/common/action.c ****     }
 742:./tmk_core/common/action.c ****     return false;
 743:./tmk_core/common/action.c **** }
 1834               		.loc 1 743 0
 1835 0044 0895      		ret
 1836               		.cfi_endproc
 1837               	.LFE114:
 1839               		.section	.text.debug_event,"ax",@progbits
 1840               	.global	debug_event
 1842               	debug_event:
 1843               	.LFB115:
 744:./tmk_core/common/action.c **** 
 745:./tmk_core/common/action.c **** 
 746:./tmk_core/common/action.c **** /*
 747:./tmk_core/common/action.c ****  * debug print
 748:./tmk_core/common/action.c ****  */
 749:./tmk_core/common/action.c **** void debug_event(keyevent_t event)
 750:./tmk_core/common/action.c **** {
 1844               		.loc 1 750 0
 1845               		.cfi_startproc
 1846 0000 CF93      		push r28
 1847               	.LCFI22:
 1848               		.cfi_def_cfa_offset 3
 1849               		.cfi_offset 28, -2
 1850 0002 DF93      		push r29
 1851               	.LCFI23:
 1852               		.cfi_def_cfa_offset 4
 1853               		.cfi_offset 29, -3
 1854 0004 00D0      		rcall .
 1855 0006 00D0      		rcall .
 1856 0008 1F92      		push __zero_reg__
 1857               	.LCFI24:
 1858               		.cfi_def_cfa_offset 9
 1859 000a CDB7      		in r28,__SP_L__
 1860 000c DEB7      		in r29,__SP_H__
 1861               	.LCFI25:
 1862               		.cfi_def_cfa_register 28
 1863               	/* prologue: function */
 1864               	/* frame size = 5 */
 1865               	/* stack size = 7 */
 1866               	.L__stack_usage = 7
 1867               	/* epilogue start */
 751:./tmk_core/common/action.c ****     dprintf("%04X%c(%u)", (event.key.row<<8 | event.key.col), (event.pressed ? 'd' : 'u'), event.ti
 752:./tmk_core/common/action.c **** }
 1868               		.loc 1 752 0
 1869 000e 0F90      		pop __tmp_reg__
 1870 0010 0F90      		pop __tmp_reg__
 1871 0012 0F90      		pop __tmp_reg__
 1872 0014 0F90      		pop __tmp_reg__
 1873 0016 0F90      		pop __tmp_reg__
 1874 0018 DF91      		pop r29
 1875 001a CF91      		pop r28
 1876 001c 0895      		ret
 1877               		.cfi_endproc
 1878               	.LFE115:
 1880               		.section	.text.debug_record,"ax",@progbits
 1881               	.global	debug_record
 1883               	debug_record:
 1884               	.LFB116:
 753:./tmk_core/common/action.c **** 
 754:./tmk_core/common/action.c **** void debug_record(keyrecord_t record)
 755:./tmk_core/common/action.c **** {
 1885               		.loc 1 755 0
 1886               		.cfi_startproc
 1887 0000 CF93      		push r28
 1888               	.LCFI26:
 1889               		.cfi_def_cfa_offset 3
 1890               		.cfi_offset 28, -2
 1891 0002 DF93      		push r29
 1892               	.LCFI27:
 1893               		.cfi_def_cfa_offset 4
 1894               		.cfi_offset 29, -3
 1895 0004 00D0      		rcall .
 1896 0006 00D0      		rcall .
 1897 0008 00D0      		rcall .
 1898               	.LCFI28:
 1899               		.cfi_def_cfa_offset 10
 1900 000a CDB7      		in r28,__SP_L__
 1901 000c DEB7      		in r29,__SP_H__
 1902               	.LCFI29:
 1903               		.cfi_def_cfa_register 28
 1904               	/* prologue: function */
 1905               	/* frame size = 6 */
 1906               	/* stack size = 8 */
 1907               	.L__stack_usage = 8
 1908               	/* epilogue start */
 756:./tmk_core/common/action.c ****     debug_event(record.event);
 757:./tmk_core/common/action.c **** #ifndef NO_ACTION_TAPPING
 758:./tmk_core/common/action.c ****     dprintf(":%u%c", record.tap.count, (record.tap.interrupted ? '-' : ' '));
 759:./tmk_core/common/action.c **** #endif
 760:./tmk_core/common/action.c **** }
 1909               		.loc 1 760 0
 1910 000e 2696      		adiw r28,6
 1911 0010 0FB6      		in __tmp_reg__,__SREG__
 1912 0012 F894      		cli
 1913 0014 DEBF      		out __SP_H__,r29
 1914 0016 0FBE      		out __SREG__,__tmp_reg__
 1915 0018 CDBF      		out __SP_L__,r28
 1916 001a DF91      		pop r29
 1917 001c CF91      		pop r28
 1918 001e 0895      		ret
 1919               		.cfi_endproc
 1920               	.LFE116:
 1922               		.section	.text.debug_action,"ax",@progbits
 1923               	.global	debug_action
 1925               	debug_action:
 1926               	.LFB117:
 761:./tmk_core/common/action.c **** 
 762:./tmk_core/common/action.c **** void debug_action(action_t action)
 763:./tmk_core/common/action.c **** {
 1927               		.loc 1 763 0
 1928               		.cfi_startproc
 1929               	.LVL247:
 1930               	/* prologue: function */
 1931               	/* frame size = 0 */
 1932               	/* stack size = 0 */
 1933               	.L__stack_usage = 0
 1934 0000 0895      		ret
 1935               		.cfi_endproc
 1936               	.LFE117:
 1938               	.global	disable_action_cache
 1939               		.section	.bss.disable_action_cache,"aw",@nobits
 1942               	disable_action_cache:
 1943 0000 00        		.zero	1
 1944               		.text
 1945               	.Letext0:
 1946               		.file 3 "c:\\users\\james\\mhv_avr\\avr\\include\\stdint.h"
 1947               		.file 4 "./tmk_core/common/keycode.h"
 1948               		.file 5 "./tmk_core/common/action_code.h"
 1949               		.file 6 "./tmk_core/common/action_macro.h"
 1950               		.file 7 "./tmk_core/common/action.h"
 1951               		.file 8 "./tmk_core/common/action_util.h"
 1952               		.file 9 "./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/USBTask.h"
 1953               		.file 10 "./tmk_core/common/action_tapping.h"
 1954               		.file 11 "./tmk_core/common/host.h"
 1955               		.file 12 "./tmk_core/common/action_layer.h"
 1956               		.file 13 "./tmk_core/common/mousekey.h"
DEFINED SYMBOLS
                            *ABS*:00000000 action.c
C:\Users\James\AppData\Local\Temp\ccxzdxT2.s:2      *ABS*:0000003e __SP_H__
C:\Users\James\AppData\Local\Temp\ccxzdxT2.s:3      *ABS*:0000003d __SP_L__
C:\Users\James\AppData\Local\Temp\ccxzdxT2.s:4      *ABS*:0000003f __SREG__
C:\Users\James\AppData\Local\Temp\ccxzdxT2.s:5      *ABS*:00000000 __tmp_reg__
C:\Users\James\AppData\Local\Temp\ccxzdxT2.s:6      *ABS*:00000001 __zero_reg__
C:\Users\James\AppData\Local\Temp\ccxzdxT2.s:13     .text.action_exec:00000000 action_exec
C:\Users\James\AppData\Local\Temp\ccxzdxT2.s:93     .text.process_record_quantum:00000000 process_record_quantum
C:\Users\James\AppData\Local\Temp\ccxzdxT2.s:112    .text.register_code:00000000 register_code
C:\Users\James\AppData\Local\Temp\ccxzdxT2.s:466    .text.unregister_code:00000000 unregister_code
C:\Users\James\AppData\Local\Temp\ccxzdxT2.s:601    .text.register_mods:00000000 register_mods
C:\Users\James\AppData\Local\Temp\ccxzdxT2.s:627    .text.unregister_mods:00000000 unregister_mods
C:\Users\James\AppData\Local\Temp\ccxzdxT2.s:653    .text.process_action:00000000 process_action
C:\Users\James\AppData\Local\Temp\ccxzdxT2.s:1574   .text.process_record:00000000 process_record
C:\Users\James\AppData\Local\Temp\ccxzdxT2.s:1670   .text.process_record_nocache:00000000 process_record_nocache
C:\Users\James\AppData\Local\Temp\ccxzdxT2.s:1942   .bss.disable_action_cache:00000000 disable_action_cache
C:\Users\James\AppData\Local\Temp\ccxzdxT2.s:1694   .text.clear_keyboard_but_mods:00000000 clear_keyboard_but_mods
C:\Users\James\AppData\Local\Temp\ccxzdxT2.s:1736   .text.clear_keyboard:00000000 clear_keyboard
C:\Users\James\AppData\Local\Temp\ccxzdxT2.s:1756   .text.is_tap_key:00000000 is_tap_key
C:\Users\James\AppData\Local\Temp\ccxzdxT2.s:1842   .text.debug_event:00000000 debug_event
C:\Users\James\AppData\Local\Temp\ccxzdxT2.s:1883   .text.debug_record:00000000 debug_record
C:\Users\James\AppData\Local\Temp\ccxzdxT2.s:1925   .text.debug_action:00000000 debug_action

UNDEFINED SYMBOLS
action_tapping_process
host_keyboard_leds
add_key
send_keyboard_report
del_key
add_mods
host_system_send
host_consumer_send
del_mods
clear_weak_mods
is_oneshot_layer_active
clear_oneshot_layer_state
__tablejump2__
add_weak_mods
del_weak_mods
set_oneshot_mods
clear_oneshot_mods
mousekey_on
mousekey_off
mousekey_send
default_layer_and
default_layer_xor
default_layer_or
layer_and
layer_xor
layer_or
layer_on
layer_off
layer_invert
layer_move
layer_clear
set_oneshot_layer
action_get_macro
action_macro_play
action_function
get_oneshot_layer_state
get_oneshot_layer
store_or_get_action
layer_debug
default_layer_debug
clear_macro_mods
clear_keys
mousekey_clear
clear_mods
layer_switch_get_action
__do_clear_bss
