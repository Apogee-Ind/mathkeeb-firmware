   1               		.file	"quantum.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.do_code16,"ax",@progbits
  12               	do_code16:
  13               	.LFB107:
  14               		.file 1 "quantum/quantum.c"
   1:quantum/quantum.c **** #include "quantum.h"
   2:quantum/quantum.c **** 
   3:quantum/quantum.c **** #ifndef TAPPING_TERM
   4:quantum/quantum.c **** #define TAPPING_TERM 200
   5:quantum/quantum.c **** #endif
   6:quantum/quantum.c **** 
   7:quantum/quantum.c **** static void do_code16 (uint16_t code, void (*f) (uint8_t)) {
  15               		.loc 1 7 0
  16               		.cfi_startproc
  17               	.LVL0:
  18 0000 0F93      		push r16
  19               	.LCFI0:
  20               		.cfi_def_cfa_offset 3
  21               		.cfi_offset 16, -2
  22 0002 1F93      		push r17
  23               	.LCFI1:
  24               		.cfi_def_cfa_offset 4
  25               		.cfi_offset 17, -3
  26 0004 CF93      		push r28
  27               	.LCFI2:
  28               		.cfi_def_cfa_offset 5
  29               		.cfi_offset 28, -4
  30 0006 DF93      		push r29
  31               	.LCFI3:
  32               		.cfi_def_cfa_offset 6
  33               		.cfi_offset 29, -5
  34               	/* prologue: function */
  35               	/* frame size = 0 */
  36               	/* stack size = 4 */
  37               	.L__stack_usage = 4
  38 0008 8C01      		movw r16,r24
  39 000a EB01      		movw r28,r22
   8:quantum/quantum.c ****   switch (code) {
  40               		.loc 1 8 0
  41 000c 9A95      		dec r25
  42               	.LVL1:
  43 000e 8115      		cp r24,__zero_reg__
  44 0010 9F41      		sbci r25,31
  45 0012 00F4      		brsh .L1
   9:quantum/quantum.c ****   case QK_MODS ... QK_MODS_MAX:
  10:quantum/quantum.c ****     break;
  11:quantum/quantum.c ****   default:
  12:quantum/quantum.c ****     return;
  13:quantum/quantum.c ****   }
  14:quantum/quantum.c **** 
  15:quantum/quantum.c ****   if (code & QK_LCTL)
  46               		.loc 1 15 0
  47 0014 10FF      		sbrs r17,0
  48 0016 00C0      		rjmp .L4
  16:quantum/quantum.c ****     f(KC_LCTL);
  49               		.loc 1 16 0
  50 0018 80EE      		ldi r24,lo8(-32)
  51 001a FB01      		movw r30,r22
  52 001c 0995      		icall
  53               	.LVL2:
  54               	.L4:
  17:quantum/quantum.c ****   if (code & QK_LSFT)
  55               		.loc 1 17 0
  56 001e 11FF      		sbrs r17,1
  57 0020 00C0      		rjmp .L5
  18:quantum/quantum.c ****     f(KC_LSFT);
  58               		.loc 1 18 0
  59 0022 81EE      		ldi r24,lo8(-31)
  60 0024 FE01      		movw r30,r28
  61 0026 0995      		icall
  62               	.LVL3:
  63               	.L5:
  19:quantum/quantum.c ****   if (code & QK_LALT)
  64               		.loc 1 19 0
  65 0028 12FF      		sbrs r17,2
  66 002a 00C0      		rjmp .L6
  20:quantum/quantum.c ****     f(KC_LALT);
  67               		.loc 1 20 0
  68 002c 82EE      		ldi r24,lo8(-30)
  69 002e FE01      		movw r30,r28
  70 0030 0995      		icall
  71               	.LVL4:
  72               	.L6:
  21:quantum/quantum.c ****   if (code & QK_LGUI)
  73               		.loc 1 21 0
  74 0032 13FF      		sbrs r17,3
  75 0034 00C0      		rjmp .L7
  22:quantum/quantum.c ****     f(KC_LGUI);
  76               		.loc 1 22 0
  77 0036 83EE      		ldi r24,lo8(-29)
  78 0038 FE01      		movw r30,r28
  79 003a 0995      		icall
  80               	.LVL5:
  81               	.L7:
  23:quantum/quantum.c **** 
  24:quantum/quantum.c ****   if (code < QK_RMODS_MIN) return;
  82               		.loc 1 24 0
  83 003c 0115      		cp r16,__zero_reg__
  84 003e 1041      		sbci r17,16
  85 0040 00F0      		brlo .L1
  25:quantum/quantum.c **** 
  26:quantum/quantum.c ****   if (code & QK_RCTL)
  27:quantum/quantum.c ****     f(KC_RCTL);
  86               		.loc 1 27 0
  87 0042 84EE      		ldi r24,lo8(-28)
  88 0044 FE01      		movw r30,r28
  89 0046 0995      		icall
  90               	.LVL6:
  28:quantum/quantum.c ****   if (code & QK_RSFT)
  29:quantum/quantum.c ****     f(KC_RSFT);
  91               		.loc 1 29 0
  92 0048 85EE      		ldi r24,lo8(-27)
  93 004a FE01      		movw r30,r28
  94 004c 0995      		icall
  95               	.LVL7:
  30:quantum/quantum.c ****   if (code & QK_RALT)
  31:quantum/quantum.c ****     f(KC_RALT);
  96               		.loc 1 31 0
  97 004e 86EE      		ldi r24,lo8(-26)
  98 0050 FE01      		movw r30,r28
  99 0052 0995      		icall
 100               	.LVL8:
  32:quantum/quantum.c ****   if (code & QK_RGUI)
  33:quantum/quantum.c ****     f(KC_RGUI);
 101               		.loc 1 33 0
 102 0054 87EE      		ldi r24,lo8(-25)
 103 0056 FE01      		movw r30,r28
 104               	/* epilogue start */
  34:quantum/quantum.c **** }
 105               		.loc 1 34 0
 106 0058 DF91      		pop r29
 107 005a CF91      		pop r28
 108               	.LVL9:
 109 005c 1F91      		pop r17
 110 005e 0F91      		pop r16
 111               	.LVL10:
  33:quantum/quantum.c **** }
 112               		.loc 1 33 0
 113 0060 0994      		ijmp
 114               	.LVL11:
 115               	.L1:
 116               	/* epilogue start */
 117               		.loc 1 34 0
 118 0062 DF91      		pop r29
 119 0064 CF91      		pop r28
 120               	.LVL12:
 121 0066 1F91      		pop r17
 122 0068 0F91      		pop r16
 123               	.LVL13:
 124 006a 0895      		ret
 125               		.cfi_endproc
 126               	.LFE107:
 128               		.section	.text.register_code16,"ax",@progbits
 129               	.global	register_code16
 131               	register_code16:
 132               	.LFB108:
  35:quantum/quantum.c **** 
  36:quantum/quantum.c **** void register_code16 (uint16_t code) {
 133               		.loc 1 36 0
 134               		.cfi_startproc
 135               	.LVL14:
 136 0000 CF93      		push r28
 137               	.LCFI4:
 138               		.cfi_def_cfa_offset 3
 139               		.cfi_offset 28, -2
 140               	/* prologue: function */
 141               	/* frame size = 0 */
 142               	/* stack size = 1 */
 143               	.L__stack_usage = 1
 144 0002 C82F      		mov r28,r24
  37:quantum/quantum.c ****   do_code16 (code, register_code);
 145               		.loc 1 37 0
 146 0004 60E0      		ldi r22,lo8(gs(register_code))
 147 0006 70E0      		ldi r23,hi8(gs(register_code))
 148 0008 0E94 0000 		call do_code16
 149               	.LVL15:
  38:quantum/quantum.c ****   register_code (code);
 150               		.loc 1 38 0
 151 000c 8C2F      		mov r24,r28
 152               	/* epilogue start */
  39:quantum/quantum.c **** }
 153               		.loc 1 39 0
 154 000e CF91      		pop r28
  38:quantum/quantum.c ****   register_code (code);
 155               		.loc 1 38 0
 156 0010 0C94 0000 		jmp register_code
 157               	.LVL16:
 158               		.cfi_endproc
 159               	.LFE108:
 161               		.section	.text.unregister_code16,"ax",@progbits
 162               	.global	unregister_code16
 164               	unregister_code16:
 165               	.LFB109:
  40:quantum/quantum.c **** 
  41:quantum/quantum.c **** void unregister_code16 (uint16_t code) {
 166               		.loc 1 41 0
 167               		.cfi_startproc
 168               	.LVL17:
 169 0000 1F93      		push r17
 170               	.LCFI5:
 171               		.cfi_def_cfa_offset 3
 172               		.cfi_offset 17, -2
 173 0002 CF93      		push r28
 174               	.LCFI6:
 175               		.cfi_def_cfa_offset 4
 176               		.cfi_offset 28, -3
 177 0004 DF93      		push r29
 178               	.LCFI7:
 179               		.cfi_def_cfa_offset 5
 180               		.cfi_offset 29, -4
 181 0006 1F92      		push __zero_reg__
 182               	.LCFI8:
 183               		.cfi_def_cfa_offset 6
 184 0008 CDB7      		in r28,__SP_L__
 185 000a DEB7      		in r29,__SP_H__
 186               	.LCFI9:
 187               		.cfi_def_cfa_register 28
 188               	/* prologue: function */
 189               	/* frame size = 1 */
 190               	/* stack size = 4 */
 191               	.L__stack_usage = 4
 192 000c 182F      		mov r17,r24
  42:quantum/quantum.c ****   unregister_code (code);
 193               		.loc 1 42 0
 194 000e 9983      		std Y+1,r25
 195 0010 0E94 0000 		call unregister_code
 196               	.LVL18:
  43:quantum/quantum.c ****   do_code16 (code, unregister_code);
 197               		.loc 1 43 0
 198 0014 60E0      		ldi r22,lo8(gs(unregister_code))
 199 0016 70E0      		ldi r23,hi8(gs(unregister_code))
 200 0018 812F      		mov r24,r17
 201 001a 9981      		ldd r25,Y+1
 202               	/* epilogue start */
  44:quantum/quantum.c **** }
 203               		.loc 1 44 0
 204 001c 0F90      		pop __tmp_reg__
 205 001e DF91      		pop r29
 206 0020 CF91      		pop r28
 207 0022 1F91      		pop r17
  43:quantum/quantum.c ****   do_code16 (code, unregister_code);
 208               		.loc 1 43 0
 209 0024 0C94 0000 		jmp do_code16
 210               	.LVL19:
 211               		.cfi_endproc
 212               	.LFE109:
 214               		.section	.text.process_action_kb,"ax",@progbits
 215               		.weak	process_action_kb
 217               	process_action_kb:
 218               	.LFB110:
  45:quantum/quantum.c **** 
  46:quantum/quantum.c **** __attribute__ ((weak))
  47:quantum/quantum.c **** bool process_action_kb(keyrecord_t *record) {
 219               		.loc 1 47 0
 220               		.cfi_startproc
 221               	.LVL20:
 222               	/* prologue: function */
 223               	/* frame size = 0 */
 224               	/* stack size = 0 */
 225               	.L__stack_usage = 0
  48:quantum/quantum.c ****   return true;
  49:quantum/quantum.c **** }
 226               		.loc 1 49 0
 227 0000 81E0      		ldi r24,lo8(1)
 228               	.LVL21:
 229 0002 0895      		ret
 230               		.cfi_endproc
 231               	.LFE110:
 233               		.section	.text.process_record_user,"ax",@progbits
 234               		.weak	process_record_user
 236               	process_record_user:
 237               	.LFB112:
  50:quantum/quantum.c **** 
  51:quantum/quantum.c **** __attribute__ ((weak))
  52:quantum/quantum.c **** bool process_record_kb(uint16_t keycode, keyrecord_t *record) {
  53:quantum/quantum.c ****   return process_record_user(keycode, record);
  54:quantum/quantum.c **** }
  55:quantum/quantum.c **** 
  56:quantum/quantum.c **** __attribute__ ((weak))
  57:quantum/quantum.c **** bool process_record_user(uint16_t keycode, keyrecord_t *record) {
 238               		.loc 1 57 0
 239               		.cfi_startproc
 240               	.LVL22:
 241               	/* prologue: function */
 242               	/* frame size = 0 */
 243               	/* stack size = 0 */
 244               	.L__stack_usage = 0
  58:quantum/quantum.c ****   return true;
  59:quantum/quantum.c **** }
 245               		.loc 1 59 0
 246 0000 81E0      		ldi r24,lo8(1)
 247               	.LVL23:
 248 0002 0895      		ret
 249               		.cfi_endproc
 250               	.LFE112:
 252               		.section	.text.process_record_kb,"ax",@progbits
 253               		.weak	process_record_kb
 255               	process_record_kb:
 256               	.LFB111:
  52:quantum/quantum.c ****   return process_record_user(keycode, record);
 257               		.loc 1 52 0
 258               		.cfi_startproc
 259               	.LVL24:
 260               	/* prologue: function */
 261               	/* frame size = 0 */
 262               	/* stack size = 0 */
 263               	.L__stack_usage = 0
  53:quantum/quantum.c **** }
 264               		.loc 1 53 0
 265 0000 0C94 0000 		jmp process_record_user
 266               	.LVL25:
 267               		.cfi_endproc
 268               	.LFE111:
 270               		.section	.text.reset_keyboard,"ax",@progbits
 271               	.global	reset_keyboard
 273               	reset_keyboard:
 274               	.LFB113:
  60:quantum/quantum.c **** 
  61:quantum/quantum.c **** void reset_keyboard(void) {
 275               		.loc 1 61 0
 276               		.cfi_startproc
 277               	/* prologue: function */
 278               	/* frame size = 0 */
 279               	/* stack size = 0 */
 280               	.L__stack_usage = 0
  62:quantum/quantum.c ****   clear_keyboard();
 281               		.loc 1 62 0
 282 0000 0E94 0000 		call clear_keyboard
 283               	.LVL26:
 284               	.LBB4:
 285               	.LBB5:
 286               		.file 2 "c:\\users\\james\\mhv_avr\\avr\\include\\util\\delay.h"
   1:c:\users\james\mhv_avr\avr\include\util\delay.h **** /* Copyright (c) 2002, Marek Michalkiewicz
   2:c:\users\james\mhv_avr\avr\include\util\delay.h ****    Copyright (c) 2004,2005,2007 Joerg Wunsch
   3:c:\users\james\mhv_avr\avr\include\util\delay.h ****    Copyright (c) 2007  Florin-Viorel Petrov
   4:c:\users\james\mhv_avr\avr\include\util\delay.h ****    All rights reserved.
   5:c:\users\james\mhv_avr\avr\include\util\delay.h **** 
   6:c:\users\james\mhv_avr\avr\include\util\delay.h ****    Redistribution and use in source and binary forms, with or without
   7:c:\users\james\mhv_avr\avr\include\util\delay.h ****    modification, are permitted provided that the following conditions are met:
   8:c:\users\james\mhv_avr\avr\include\util\delay.h **** 
   9:c:\users\james\mhv_avr\avr\include\util\delay.h ****    * Redistributions of source code must retain the above copyright
  10:c:\users\james\mhv_avr\avr\include\util\delay.h ****      notice, this list of conditions and the following disclaimer.
  11:c:\users\james\mhv_avr\avr\include\util\delay.h **** 
  12:c:\users\james\mhv_avr\avr\include\util\delay.h ****    * Redistributions in binary form must reproduce the above copyright
  13:c:\users\james\mhv_avr\avr\include\util\delay.h ****      notice, this list of conditions and the following disclaimer in
  14:c:\users\james\mhv_avr\avr\include\util\delay.h ****      the documentation and/or other materials provided with the
  15:c:\users\james\mhv_avr\avr\include\util\delay.h ****      distribution.
  16:c:\users\james\mhv_avr\avr\include\util\delay.h **** 
  17:c:\users\james\mhv_avr\avr\include\util\delay.h ****    * Neither the name of the copyright holders nor the names of
  18:c:\users\james\mhv_avr\avr\include\util\delay.h ****      contributors may be used to endorse or promote products derived
  19:c:\users\james\mhv_avr\avr\include\util\delay.h ****      from this software without specific prior written permission.
  20:c:\users\james\mhv_avr\avr\include\util\delay.h **** 
  21:c:\users\james\mhv_avr\avr\include\util\delay.h ****   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:c:\users\james\mhv_avr\avr\include\util\delay.h ****   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:c:\users\james\mhv_avr\avr\include\util\delay.h ****   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:c:\users\james\mhv_avr\avr\include\util\delay.h ****   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
  25:c:\users\james\mhv_avr\avr\include\util\delay.h ****   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:c:\users\james\mhv_avr\avr\include\util\delay.h ****   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:c:\users\james\mhv_avr\avr\include\util\delay.h ****   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:c:\users\james\mhv_avr\avr\include\util\delay.h ****   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:c:\users\james\mhv_avr\avr\include\util\delay.h ****   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:c:\users\james\mhv_avr\avr\include\util\delay.h ****   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:c:\users\james\mhv_avr\avr\include\util\delay.h ****   POSSIBILITY OF SUCH DAMAGE. */
  32:c:\users\james\mhv_avr\avr\include\util\delay.h **** 
  33:c:\users\james\mhv_avr\avr\include\util\delay.h **** /* $Id: delay.h.in 2385 2013-05-03 13:14:20Z joerg_wunsch $ */
  34:c:\users\james\mhv_avr\avr\include\util\delay.h **** 
  35:c:\users\james\mhv_avr\avr\include\util\delay.h **** #ifndef _UTIL_DELAY_H_
  36:c:\users\james\mhv_avr\avr\include\util\delay.h **** #define _UTIL_DELAY_H_ 1
  37:c:\users\james\mhv_avr\avr\include\util\delay.h **** 
  38:c:\users\james\mhv_avr\avr\include\util\delay.h **** #ifndef __HAS_DELAY_CYCLES
  39:c:\users\james\mhv_avr\avr\include\util\delay.h **** #define __HAS_DELAY_CYCLES 1
  40:c:\users\james\mhv_avr\avr\include\util\delay.h **** #endif
  41:c:\users\james\mhv_avr\avr\include\util\delay.h **** 
  42:c:\users\james\mhv_avr\avr\include\util\delay.h **** #include <inttypes.h>
  43:c:\users\james\mhv_avr\avr\include\util\delay.h **** #include <util/delay_basic.h>
  44:c:\users\james\mhv_avr\avr\include\util\delay.h **** #include <math.h>
  45:c:\users\james\mhv_avr\avr\include\util\delay.h **** 
  46:c:\users\james\mhv_avr\avr\include\util\delay.h **** /** \file */
  47:c:\users\james\mhv_avr\avr\include\util\delay.h **** /** \defgroup util_delay <util/delay.h>: Convenience functions for busy-wait delay loops
  48:c:\users\james\mhv_avr\avr\include\util\delay.h ****     \code
  49:c:\users\james\mhv_avr\avr\include\util\delay.h ****     #define F_CPU 1000000UL  // 1 MHz
  50:c:\users\james\mhv_avr\avr\include\util\delay.h ****     //#define F_CPU 14.7456E6
  51:c:\users\james\mhv_avr\avr\include\util\delay.h ****     #include <util/delay.h>
  52:c:\users\james\mhv_avr\avr\include\util\delay.h ****     \endcode
  53:c:\users\james\mhv_avr\avr\include\util\delay.h **** 
  54:c:\users\james\mhv_avr\avr\include\util\delay.h ****     \note As an alternative method, it is possible to pass the
  55:c:\users\james\mhv_avr\avr\include\util\delay.h ****     F_CPU macro down to the compiler from the Makefile.
  56:c:\users\james\mhv_avr\avr\include\util\delay.h ****     Obviously, in that case, no \c \#define statement should be
  57:c:\users\james\mhv_avr\avr\include\util\delay.h ****     used.
  58:c:\users\james\mhv_avr\avr\include\util\delay.h **** 
  59:c:\users\james\mhv_avr\avr\include\util\delay.h ****     The functions in this header file are wrappers around the basic
  60:c:\users\james\mhv_avr\avr\include\util\delay.h ****     busy-wait functions from <util/delay_basic.h>.  They are meant as
  61:c:\users\james\mhv_avr\avr\include\util\delay.h ****     convenience functions where actual time values can be specified
  62:c:\users\james\mhv_avr\avr\include\util\delay.h ****     rather than a number of cycles to wait for.  The idea behind is
  63:c:\users\james\mhv_avr\avr\include\util\delay.h ****     that compile-time constant expressions will be eliminated by
  64:c:\users\james\mhv_avr\avr\include\util\delay.h ****     compiler optimization so floating-point expressions can be used
  65:c:\users\james\mhv_avr\avr\include\util\delay.h ****     to calculate the number of delay cycles needed based on the CPU
  66:c:\users\james\mhv_avr\avr\include\util\delay.h ****     frequency passed by the macro F_CPU.
  67:c:\users\james\mhv_avr\avr\include\util\delay.h **** 
  68:c:\users\james\mhv_avr\avr\include\util\delay.h ****     \note In order for these functions to work as intended, compiler
  69:c:\users\james\mhv_avr\avr\include\util\delay.h ****     optimizations <em>must</em> be enabled, and the delay time
  70:c:\users\james\mhv_avr\avr\include\util\delay.h ****     <em>must</em> be an expression that is a known constant at
  71:c:\users\james\mhv_avr\avr\include\util\delay.h ****     compile-time.  If these requirements are not met, the resulting
  72:c:\users\james\mhv_avr\avr\include\util\delay.h ****     delay will be much longer (and basically unpredictable), and
  73:c:\users\james\mhv_avr\avr\include\util\delay.h ****     applications that otherwise do not use floating-point calculations
  74:c:\users\james\mhv_avr\avr\include\util\delay.h ****     will experience severe code bloat by the floating-point library
  75:c:\users\james\mhv_avr\avr\include\util\delay.h ****     routines linked into the application.
  76:c:\users\james\mhv_avr\avr\include\util\delay.h **** 
  77:c:\users\james\mhv_avr\avr\include\util\delay.h ****     The functions available allow the specification of microsecond, and
  78:c:\users\james\mhv_avr\avr\include\util\delay.h ****     millisecond delays directly, using the application-supplied macro
  79:c:\users\james\mhv_avr\avr\include\util\delay.h ****     F_CPU as the CPU clock frequency (in Hertz).
  80:c:\users\james\mhv_avr\avr\include\util\delay.h **** 
  81:c:\users\james\mhv_avr\avr\include\util\delay.h **** */
  82:c:\users\james\mhv_avr\avr\include\util\delay.h **** 
  83:c:\users\james\mhv_avr\avr\include\util\delay.h **** #if !defined(__DOXYGEN__)
  84:c:\users\james\mhv_avr\avr\include\util\delay.h **** static inline void _delay_us(double __us) __attribute__((always_inline));
  85:c:\users\james\mhv_avr\avr\include\util\delay.h **** static inline void _delay_ms(double __ms) __attribute__((always_inline));
  86:c:\users\james\mhv_avr\avr\include\util\delay.h **** #endif
  87:c:\users\james\mhv_avr\avr\include\util\delay.h **** 
  88:c:\users\james\mhv_avr\avr\include\util\delay.h **** #ifndef F_CPU
  89:c:\users\james\mhv_avr\avr\include\util\delay.h **** /* prevent compiler error by supplying a default */
  90:c:\users\james\mhv_avr\avr\include\util\delay.h **** # warning "F_CPU not defined for <util/delay.h>"
  91:c:\users\james\mhv_avr\avr\include\util\delay.h **** # define F_CPU 1000000UL
  92:c:\users\james\mhv_avr\avr\include\util\delay.h **** #endif
  93:c:\users\james\mhv_avr\avr\include\util\delay.h **** 
  94:c:\users\james\mhv_avr\avr\include\util\delay.h **** #ifndef __OPTIMIZE__
  95:c:\users\james\mhv_avr\avr\include\util\delay.h **** # warning "Compiler optimizations disabled; functions from <util/delay.h> won't work as designed"
  96:c:\users\james\mhv_avr\avr\include\util\delay.h **** #endif
  97:c:\users\james\mhv_avr\avr\include\util\delay.h **** 
  98:c:\users\james\mhv_avr\avr\include\util\delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
  99:c:\users\james\mhv_avr\avr\include\util\delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 100:c:\users\james\mhv_avr\avr\include\util\delay.h ****   __STDC_HOSTED__
 101:c:\users\james\mhv_avr\avr\include\util\delay.h **** #  include <math.h>
 102:c:\users\james\mhv_avr\avr\include\util\delay.h **** #endif
 103:c:\users\james\mhv_avr\avr\include\util\delay.h **** 
 104:c:\users\james\mhv_avr\avr\include\util\delay.h **** /**
 105:c:\users\james\mhv_avr\avr\include\util\delay.h ****    \ingroup util_delay
 106:c:\users\james\mhv_avr\avr\include\util\delay.h **** 
 107:c:\users\james\mhv_avr\avr\include\util\delay.h ****    Perform a delay of \c __ms milliseconds, using _delay_loop_2().
 108:c:\users\james\mhv_avr\avr\include\util\delay.h **** 
 109:c:\users\james\mhv_avr\avr\include\util\delay.h ****    The macro F_CPU is supposed to be defined to a
 110:c:\users\james\mhv_avr\avr\include\util\delay.h ****    constant defining the CPU clock frequency (in Hertz).
 111:c:\users\james\mhv_avr\avr\include\util\delay.h **** 
 112:c:\users\james\mhv_avr\avr\include\util\delay.h ****    The maximal possible delay is 262.14 ms / F_CPU in MHz.
 113:c:\users\james\mhv_avr\avr\include\util\delay.h **** 
 114:c:\users\james\mhv_avr\avr\include\util\delay.h ****    When the user request delay which exceed the maximum possible one,
 115:c:\users\james\mhv_avr\avr\include\util\delay.h ****    _delay_ms() provides a decreased resolution functionality. In this
 116:c:\users\james\mhv_avr\avr\include\util\delay.h ****    mode _delay_ms() will work with a resolution of 1/10 ms, providing
 117:c:\users\james\mhv_avr\avr\include\util\delay.h ****    delays up to 6.5535 seconds (independent from CPU frequency).  The
 118:c:\users\james\mhv_avr\avr\include\util\delay.h ****    user will not be informed about decreased resolution.
 119:c:\users\james\mhv_avr\avr\include\util\delay.h **** 
 120:c:\users\james\mhv_avr\avr\include\util\delay.h ****    If the avr-gcc toolchain has __builtin_avr_delay_cycles(unsigned long)
 121:c:\users\james\mhv_avr\avr\include\util\delay.h ****    support, maximal possible delay is 4294967.295 ms/ F_CPU in MHz. For
 122:c:\users\james\mhv_avr\avr\include\util\delay.h ****    values greater than the maximal possible delay, overflows results in
 123:c:\users\james\mhv_avr\avr\include\util\delay.h ****    no delay i.e., 0ms.
 124:c:\users\james\mhv_avr\avr\include\util\delay.h **** 
 125:c:\users\james\mhv_avr\avr\include\util\delay.h ****    Conversion of __us into clock cycles may not always result in integer.
 126:c:\users\james\mhv_avr\avr\include\util\delay.h ****    By default, the clock cycles rounded up to next integer. This ensures that
 127:c:\users\james\mhv_avr\avr\include\util\delay.h ****    the user gets atleast __us microseconds of delay.
 128:c:\users\james\mhv_avr\avr\include\util\delay.h **** 
 129:c:\users\james\mhv_avr\avr\include\util\delay.h ****    Alternatively, user can define __DELAY_ROUND_DOWN__ and __DELAY_ROUND_CLOSEST__
 130:c:\users\james\mhv_avr\avr\include\util\delay.h ****    to round down and round to closest integer.
 131:c:\users\james\mhv_avr\avr\include\util\delay.h **** 
 132:c:\users\james\mhv_avr\avr\include\util\delay.h ****    Note: The new implementation of _delay_ms(double __ms) with 
 133:c:\users\james\mhv_avr\avr\include\util\delay.h ****     __builtin_avr_delay_cycles(unsigned long) support is not backward compatible. 
 134:c:\users\james\mhv_avr\avr\include\util\delay.h ****    User can define __DELAY_BACKWARD_COMPATIBLE__ to get a backward compatible delay.
 135:c:\users\james\mhv_avr\avr\include\util\delay.h ****    Also, the backward compatible
 136:c:\users\james\mhv_avr\avr\include\util\delay.h ****    algorithm will be chosen if the code is compiled in a <em>freestanding
 137:c:\users\james\mhv_avr\avr\include\util\delay.h ****    environment</em> (GCC option \c -ffreestanding), as the math functions
 138:c:\users\james\mhv_avr\avr\include\util\delay.h ****    required for rounding are not available to the compiler then.
 139:c:\users\james\mhv_avr\avr\include\util\delay.h **** 
 140:c:\users\james\mhv_avr\avr\include\util\delay.h ****  */
 141:c:\users\james\mhv_avr\avr\include\util\delay.h **** void
 142:c:\users\james\mhv_avr\avr\include\util\delay.h **** _delay_ms(double __ms)
 143:c:\users\james\mhv_avr\avr\include\util\delay.h **** {
 144:c:\users\james\mhv_avr\avr\include\util\delay.h **** 	double __tmp ; 
 145:c:\users\james\mhv_avr\avr\include\util\delay.h **** #if __HAS_DELAY_CYCLES && defined(__OPTIMIZE__) && \
 146:c:\users\james\mhv_avr\avr\include\util\delay.h ****   !defined(__DELAY_BACKWARD_COMPATIBLE__) &&	   \
 147:c:\users\james\mhv_avr\avr\include\util\delay.h ****   __STDC_HOSTED__
 148:c:\users\james\mhv_avr\avr\include\util\delay.h **** 	uint32_t __ticks_dc;
 149:c:\users\james\mhv_avr\avr\include\util\delay.h **** 	extern void __builtin_avr_delay_cycles(unsigned long);
 150:c:\users\james\mhv_avr\avr\include\util\delay.h **** 	__tmp = ((F_CPU) / 1e3) * __ms;
 151:c:\users\james\mhv_avr\avr\include\util\delay.h **** 
 152:c:\users\james\mhv_avr\avr\include\util\delay.h **** 	#if defined(__DELAY_ROUND_DOWN__)
 153:c:\users\james\mhv_avr\avr\include\util\delay.h **** 		__ticks_dc = (uint32_t)fabs(__tmp);
 154:c:\users\james\mhv_avr\avr\include\util\delay.h **** 
 155:c:\users\james\mhv_avr\avr\include\util\delay.h **** 	#elif defined(__DELAY_ROUND_CLOSEST__)
 156:c:\users\james\mhv_avr\avr\include\util\delay.h **** 		__ticks_dc = (uint32_t)(fabs(__tmp)+0.5);
 157:c:\users\james\mhv_avr\avr\include\util\delay.h **** 
 158:c:\users\james\mhv_avr\avr\include\util\delay.h **** 	#else
 159:c:\users\james\mhv_avr\avr\include\util\delay.h **** 		//round up by default
 160:c:\users\james\mhv_avr\avr\include\util\delay.h **** 		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
 161:c:\users\james\mhv_avr\avr\include\util\delay.h **** 	#endif
 162:c:\users\james\mhv_avr\avr\include\util\delay.h **** 
 163:c:\users\james\mhv_avr\avr\include\util\delay.h **** 	__builtin_avr_delay_cycles(__ticks_dc);
 287               		.loc 2 163 0
 288 0004 2FEF      		ldi r18,lo8(799999)
 289 0006 84E3      		ldi r24,hi8(799999)
 290 0008 9CE0      		ldi r25,hlo8(799999)
 291 000a 2150      		1: subi r18,1
 292 000c 8040      		sbci r24,0
 293 000e 9040      		sbci r25,0
 294 0010 01F4      		brne 1b
 295 0012 00C0      		rjmp .
 296 0014 0000      		nop
 297               	.LBE5:
 298               	.LBE4:
  63:quantum/quantum.c **** #ifdef AUDIO_ENABLE
  64:quantum/quantum.c ****   stop_all_notes();
  65:quantum/quantum.c ****   shutdown_user();
  66:quantum/quantum.c **** #endif
  67:quantum/quantum.c ****   wait_ms(250);
  68:quantum/quantum.c **** #ifdef CATERINA_BOOTLOADER
  69:quantum/quantum.c ****   *(uint16_t *)0x0800 = 0x7777; // these two are a-star-specific
  70:quantum/quantum.c **** #endif
  71:quantum/quantum.c ****   bootloader_jump();
 299               		.loc 1 71 0
 300 0016 0C94 0000 		jmp bootloader_jump
 301               	.LVL27:
 302               		.cfi_endproc
 303               	.LFE113:
 305               		.section	.text.process_record_quantum,"ax",@progbits
 306               	.global	process_record_quantum
 308               	process_record_quantum:
 309               	.LFB114:
  72:quantum/quantum.c **** }
  73:quantum/quantum.c **** 
  74:quantum/quantum.c **** // Shift / paren setup
  75:quantum/quantum.c **** 
  76:quantum/quantum.c **** #ifndef LSPO_KEY
  77:quantum/quantum.c ****   #define LSPO_KEY KC_9
  78:quantum/quantum.c **** #endif
  79:quantum/quantum.c **** #ifndef RSPC_KEY
  80:quantum/quantum.c ****   #define RSPC_KEY KC_0
  81:quantum/quantum.c **** #endif
  82:quantum/quantum.c **** 
  83:quantum/quantum.c **** static bool shift_interrupted[2] = {0, 0};
  84:quantum/quantum.c **** static uint16_t scs_timer = 0;
  85:quantum/quantum.c **** 
  86:quantum/quantum.c **** bool process_record_quantum(keyrecord_t *record) {
 310               		.loc 1 86 0
 311               		.cfi_startproc
 312               	.LVL28:
 313 0000 FF92      		push r15
 314               	.LCFI10:
 315               		.cfi_def_cfa_offset 3
 316               		.cfi_offset 15, -2
 317 0002 0F93      		push r16
 318               	.LCFI11:
 319               		.cfi_def_cfa_offset 4
 320               		.cfi_offset 16, -3
 321 0004 1F93      		push r17
 322               	.LCFI12:
 323               		.cfi_def_cfa_offset 5
 324               		.cfi_offset 17, -4
 325 0006 CF93      		push r28
 326               	.LCFI13:
 327               		.cfi_def_cfa_offset 6
 328               		.cfi_offset 28, -5
 329 0008 DF93      		push r29
 330               	.LCFI14:
 331               		.cfi_def_cfa_offset 7
 332               		.cfi_offset 29, -6
 333               	/* prologue: function */
 334               	/* frame size = 0 */
 335               	/* stack size = 5 */
 336               	.L__stack_usage = 5
 337 000a EC01      		movw r28,r24
  87:quantum/quantum.c **** 
  88:quantum/quantum.c ****   /* This gets the keycode from the key pressed */
  89:quantum/quantum.c ****   keypos_t key = record->event.key;
 338               		.loc 1 89 0
 339 000c 0881      		ld r16,Y
 340 000e 1981      		ldd r17,Y+1
 341               	.LVL29:
  90:quantum/quantum.c ****   uint16_t keycode;
  91:quantum/quantum.c **** 
  92:quantum/quantum.c ****   #if !defined(NO_ACTION_LAYER) && defined(PREVENT_STUCK_MODIFIERS)
  93:quantum/quantum.c ****     /* TODO: Use store_or_get_action() or a similar function. */
  94:quantum/quantum.c ****     if (!disable_action_cache) {
 342               		.loc 1 94 0
 343 0010 8091 0000 		lds r24,disable_action_cache
 344               	.LVL30:
 345 0014 8111      		cpse r24,__zero_reg__
 346 0016 00C0      		rjmp .L28
 347               	.LBB6:
  95:quantum/quantum.c ****       uint8_t layer;
  96:quantum/quantum.c **** 
  97:quantum/quantum.c ****       if (record->event.pressed) {
 348               		.loc 1 97 0
 349 0018 8A81      		ldd r24,Y+2
 350 001a 8823      		tst r24
 351 001c 01F0      		breq .L29
  98:quantum/quantum.c ****         layer = layer_switch_get_layer(key);
 352               		.loc 1 98 0
 353 001e C801      		movw r24,r16
 354               	.LVL31:
 355 0020 0E94 0000 		call layer_switch_get_layer
 356               	.LVL32:
 357 0024 F82E      		mov r15,r24
 358               	.LVL33:
  99:quantum/quantum.c ****         update_source_layers_cache(key, layer);
 359               		.loc 1 99 0
 360 0026 682F      		mov r22,r24
 361 0028 C801      		movw r24,r16
 362 002a 0E94 0000 		call update_source_layers_cache
 363               	.LVL34:
 364 002e 00C0      		rjmp .L30
 365               	.LVL35:
 366               	.L29:
 100:quantum/quantum.c ****       } else {
 101:quantum/quantum.c ****         layer = read_source_layers_cache(key);
 367               		.loc 1 101 0
 368 0030 C801      		movw r24,r16
 369 0032 0E94 0000 		call read_source_layers_cache
 370               	.LVL36:
 371 0036 F82E      		mov r15,r24
 372               	.LVL37:
 373               	.L30:
 102:quantum/quantum.c ****       }
 103:quantum/quantum.c ****       keycode = keymap_key_to_keycode(layer, key);
 374               		.loc 1 103 0 discriminator 1
 375 0038 B801      		movw r22,r16
 376 003a 8F2D      		mov r24,r15
 377 003c 00C0      		rjmp .L89
 378               	.LVL38:
 379               	.L28:
 380               	.LBE6:
 104:quantum/quantum.c ****     } else
 105:quantum/quantum.c ****   #endif
 106:quantum/quantum.c ****     keycode = keymap_key_to_keycode(layer_switch_get_layer(key), key);
 381               		.loc 1 106 0
 382 003e C801      		movw r24,r16
 383 0040 0E94 0000 		call layer_switch_get_layer
 384               	.LVL39:
 385 0044 B801      		movw r22,r16
 386               	.L89:
 387 0046 0E94 0000 		call keymap_key_to_keycode
 388               	.LVL40:
 389 004a 8C01      		movw r16,r24
 390               	.LVL41:
 107:quantum/quantum.c **** 
 108:quantum/quantum.c ****     // This is how you use actions here
 109:quantum/quantum.c ****     // if (keycode == KC_LEAD) {
 110:quantum/quantum.c ****     //   action_t action;
 111:quantum/quantum.c ****     //   action.code = ACTION_DEFAULT_LAYER_SET(0);
 112:quantum/quantum.c ****     //   process_action(record, action);
 113:quantum/quantum.c ****     //   return false;
 114:quantum/quantum.c ****     // }
 115:quantum/quantum.c **** 
 116:quantum/quantum.c ****   if (!(
 117:quantum/quantum.c ****     process_record_kb(keycode, record) &&
 391               		.loc 1 117 0
 392 004c BE01      		movw r22,r28
 393 004e 0E94 0000 		call process_record_kb
 394               	.LVL42:
 118:quantum/quantum.c ****   #ifdef MIDI_ENABLE
 119:quantum/quantum.c ****     process_midi(keycode, record) &&
 120:quantum/quantum.c ****   #endif
 121:quantum/quantum.c ****   #ifdef AUDIO_ENABLE
 122:quantum/quantum.c ****     process_music(keycode, record) &&
 123:quantum/quantum.c ****   #endif
 124:quantum/quantum.c ****   #ifdef TAP_DANCE_ENABLE
 125:quantum/quantum.c ****     process_tap_dance(keycode, record) &&
 126:quantum/quantum.c ****   #endif
 127:quantum/quantum.c ****   #ifndef DISABLE_LEADER
 128:quantum/quantum.c ****     process_leader(keycode, record) &&
 395               		.loc 1 128 0
 396 0052 8823      		tst r24
 397 0054 01F4      		brne .+2
 398 0056 00C0      		rjmp .L78
 399               		.loc 1 128 0 is_stmt 0 discriminator 2
 400 0058 BE01      		movw r22,r28
 401 005a C801      		movw r24,r16
 402 005c 0E94 0000 		call process_leader
 403               	.LVL43:
 117:quantum/quantum.c ****   #ifdef MIDI_ENABLE
 404               		.loc 1 117 0 is_stmt 1 discriminator 2
 405 0060 8823      		tst r24
 406 0062 01F4      		brne .+2
 407 0064 00C0      		rjmp .L78
 129:quantum/quantum.c ****   #endif
 130:quantum/quantum.c ****   #ifndef DISABLE_CHORDING
 131:quantum/quantum.c ****     process_chording(keycode, record) &&
 132:quantum/quantum.c ****   #endif
 133:quantum/quantum.c ****   #ifdef UNICODE_ENABLE
 134:quantum/quantum.c ****     process_unicode(keycode, record) &&
 408               		.loc 1 134 0
 409 0066 BE01      		movw r22,r28
 410 0068 C801      		movw r24,r16
 411 006a 0E94 0000 		call process_unicode
 412               	.LVL44:
 128:quantum/quantum.c ****   #endif
 413               		.loc 1 128 0
 414 006e 8823      		tst r24
 415 0070 01F4      		brne .+2
 416 0072 00C0      		rjmp .L78
 135:quantum/quantum.c ****   #endif
 136:quantum/quantum.c ****   #ifdef UCIS_ENABLE
 137:quantum/quantum.c ****     process_ucis(keycode, record) &&
 138:quantum/quantum.c ****   #endif
 139:quantum/quantum.c ****   #ifdef PRINTING_ENABLE
 140:quantum/quantum.c ****     process_printer(keycode, record) &&
 141:quantum/quantum.c ****   #endif
 142:quantum/quantum.c ****   #ifdef UNICODEMAP_ENABLE
 143:quantum/quantum.c ****     process_unicode_map(keycode, record) &&
 144:quantum/quantum.c ****   #endif
 145:quantum/quantum.c ****       true)) {
 146:quantum/quantum.c ****     return false;
 147:quantum/quantum.c ****   }
 148:quantum/quantum.c **** 
 149:quantum/quantum.c ****   // Shift / paren setup
 150:quantum/quantum.c **** 
 151:quantum/quantum.c ****   switch(keycode) {
 417               		.loc 1 151 0
 418 0074 0531      		cpi r16,21
 419 0076 80E7      		ldi r24,112
 420 0078 1807      		cpc r17,r24
 421 007a 00F0      		brlo .+2
 422 007c 00C0      		rjmp .L72
 423 007e 0230      		cpi r16,2
 424 0080 80E7      		ldi r24,112
 425 0082 1807      		cpc r17,r24
 426 0084 00F4      		brsh .+2
 427 0086 00C0      		rjmp .L95
 152:quantum/quantum.c ****     case RESET:
 153:quantum/quantum.c ****       if (record->event.pressed) {
 154:quantum/quantum.c ****         reset_keyboard();
 155:quantum/quantum.c ****       }
 156:quantum/quantum.c **** 	  return false;
 157:quantum/quantum.c ****       break;
 158:quantum/quantum.c ****     case DEBUG:
 159:quantum/quantum.c ****       if (record->event.pressed) {
 160:quantum/quantum.c ****           print("\nDEBUG: enabled.\n");
 161:quantum/quantum.c ****           debug_enable = true;
 162:quantum/quantum.c ****       }
 163:quantum/quantum.c **** 	  return false;
 164:quantum/quantum.c ****       break;
 165:quantum/quantum.c **** 	#ifdef RGBLIGHT_ENABLE
 166:quantum/quantum.c **** 	case RGB_TOG:
 167:quantum/quantum.c **** 		if (record->event.pressed) {
 168:quantum/quantum.c **** 			rgblight_toggle();
 169:quantum/quantum.c ****       }
 170:quantum/quantum.c **** 	  return false;
 171:quantum/quantum.c ****       break;
 172:quantum/quantum.c **** 	case RGB_MOD:
 173:quantum/quantum.c **** 		if (record->event.pressed) {
 174:quantum/quantum.c **** 			rgblight_step();
 175:quantum/quantum.c ****       }
 176:quantum/quantum.c **** 	  return false;
 177:quantum/quantum.c ****       break;
 178:quantum/quantum.c **** 	case RGB_HUI:
 179:quantum/quantum.c **** 		if (record->event.pressed) {
 180:quantum/quantum.c **** 			rgblight_increase_hue();
 181:quantum/quantum.c ****       }
 182:quantum/quantum.c **** 	  return false;
 183:quantum/quantum.c ****       break;
 184:quantum/quantum.c **** 	case RGB_HUD:
 185:quantum/quantum.c **** 		if (record->event.pressed) {
 186:quantum/quantum.c **** 			rgblight_decrease_hue();
 187:quantum/quantum.c ****       }
 188:quantum/quantum.c **** 	  return false;
 189:quantum/quantum.c ****       break;
 190:quantum/quantum.c **** 	case RGB_SAI:
 191:quantum/quantum.c **** 		if (record->event.pressed) {
 192:quantum/quantum.c **** 			rgblight_increase_sat();
 193:quantum/quantum.c ****       }
 194:quantum/quantum.c **** 	  return false;
 195:quantum/quantum.c ****       break;
 196:quantum/quantum.c **** 	case RGB_SAD:
 197:quantum/quantum.c **** 		if (record->event.pressed) {
 198:quantum/quantum.c **** 			rgblight_decrease_sat();
 199:quantum/quantum.c ****       }
 200:quantum/quantum.c **** 	  return false;
 201:quantum/quantum.c ****       break;
 202:quantum/quantum.c **** 	case RGB_VAI:
 203:quantum/quantum.c **** 		if (record->event.pressed) {
 204:quantum/quantum.c **** 			rgblight_increase_val();
 205:quantum/quantum.c ****       }
 206:quantum/quantum.c **** 	  return false;
 207:quantum/quantum.c ****       break;
 208:quantum/quantum.c **** 	case RGB_VAD:
 209:quantum/quantum.c **** 		if (record->event.pressed) {
 210:quantum/quantum.c **** 			rgblight_decrease_val();
 211:quantum/quantum.c ****       }
 212:quantum/quantum.c **** 	  return false;
 213:quantum/quantum.c ****       break;
 214:quantum/quantum.c **** 	#endif
 215:quantum/quantum.c ****     case MAGIC_SWAP_CONTROL_CAPSLOCK ... MAGIC_TOGGLE_NKRO:
 216:quantum/quantum.c ****       if (record->event.pressed) {
 428               		.loc 1 216 0
 429 0088 8A81      		ldd r24,Y+2
 430 008a 8823      		tst r24
 431 008c 01F4      		brne .+2
 432 008e 00C0      		rjmp .L38
 217:quantum/quantum.c ****         // MAGIC actions (BOOTMAGIC without the boot)
 218:quantum/quantum.c ****         if (!eeconfig_is_enabled()) {
 433               		.loc 1 218 0
 434 0090 0E94 0000 		call eeconfig_is_enabled
 435               	.LVL45:
 436 0094 8111      		cpse r24,__zero_reg__
 437 0096 00C0      		rjmp .L39
 219:quantum/quantum.c ****             eeconfig_init();
 438               		.loc 1 219 0
 439 0098 0E94 0000 		call eeconfig_init
 440               	.LVL46:
 441               	.L39:
 220:quantum/quantum.c ****         }
 221:quantum/quantum.c ****         /* keymap config */
 222:quantum/quantum.c ****         keymap_config.raw = eeconfig_read_keymap();
 442               		.loc 1 222 0
 443 009c 0E94 0000 		call eeconfig_read_keymap
 444               	.LVL47:
 445 00a0 90E0      		ldi r25,0
 446 00a2 9093 0000 		sts keymap_config+1,r25
 447 00a6 8093 0000 		sts keymap_config,r24
 223:quantum/quantum.c ****         switch (keycode)
 448               		.loc 1 223 0
 449 00aa F801      		movw r30,r16
 450 00ac E350      		subi r30,3
 451 00ae F047      		sbci r31,112
 452 00b0 E231      		cpi r30,18
 453 00b2 F105      		cpc r31,__zero_reg__
 454 00b4 00F4      		brsh .L40
 455 00b6 E050      		subi r30,lo8(-(gs(.L42)))
 456 00b8 F040      		sbci r31,hi8(-(gs(.L42)))
 457 00ba 0C94 0000 		jmp __tablejump2__
 458               		.section	.progmem.gcc_sw_table.process_record_quantum,"a",@progbits
 459               		.p2align	1
 460               	.L42:
 461 0000 0000      		.word gs(.L41)
 462 0002 0000      		.word gs(.L43)
 463 0004 0000      		.word gs(.L44)
 464 0006 0000      		.word gs(.L45)
 465 0008 0000      		.word gs(.L46)
 466 000a 0000      		.word gs(.L47)
 467 000c 0000      		.word gs(.L48)
 468 000e 0000      		.word gs(.L49)
 469 0010 0000      		.word gs(.L50)
 470 0012 0000      		.word gs(.L51)
 471 0014 0000      		.word gs(.L52)
 472 0016 0000      		.word gs(.L53)
 473 0018 0000      		.word gs(.L54)
 474 001a 0000      		.word gs(.L55)
 475 001c 0000      		.word gs(.L56)
 476 001e 0000      		.word gs(.L57)
 477 0020 0000      		.word gs(.L58)
 478 0022 0000      		.word gs(.L59)
 479               		.section	.text.process_record_quantum
 480               	.L40:
 224:quantum/quantum.c ****         {
 225:quantum/quantum.c ****           case MAGIC_SWAP_CONTROL_CAPSLOCK:
 226:quantum/quantum.c ****             keymap_config.swap_control_capslock = true;
 481               		.loc 1 226 0
 482 00be 8091 0000 		lds r24,keymap_config
 483 00c2 8160      		ori r24,lo8(1<<0)
 484 00c4 00C0      		rjmp .L90
 485               	.L41:
 227:quantum/quantum.c ****             break;
 228:quantum/quantum.c ****           case MAGIC_CAPSLOCK_TO_CONTROL:
 229:quantum/quantum.c ****             keymap_config.capslock_to_control = true;
 486               		.loc 1 229 0
 487 00c6 8091 0000 		lds r24,keymap_config
 488 00ca 8260      		ori r24,lo8(1<<1)
 489               	.L90:
 490 00cc 8093 0000 		sts keymap_config,r24
 230:quantum/quantum.c ****             break;
 491               		.loc 1 230 0
 492 00d0 00C0      		rjmp .L60
 493               	.L43:
 231:quantum/quantum.c ****           case MAGIC_SWAP_LALT_LGUI:
 232:quantum/quantum.c ****             keymap_config.swap_lalt_lgui = true;
 494               		.loc 1 232 0
 495 00d2 8091 0000 		lds r24,keymap_config
 496 00d6 8460      		ori r24,lo8(1<<2)
 497 00d8 00C0      		rjmp .L90
 498               	.L44:
 233:quantum/quantum.c ****             break;
 234:quantum/quantum.c ****           case MAGIC_SWAP_RALT_RGUI:
 235:quantum/quantum.c ****             keymap_config.swap_ralt_rgui = true;
 499               		.loc 1 235 0
 500 00da 8091 0000 		lds r24,keymap_config
 501 00de 00C0      		rjmp .L94
 502               	.L45:
 236:quantum/quantum.c ****             break;
 237:quantum/quantum.c ****           case MAGIC_NO_GUI:
 238:quantum/quantum.c ****             keymap_config.no_gui = true;
 503               		.loc 1 238 0
 504 00e0 8091 0000 		lds r24,keymap_config
 505 00e4 8061      		ori r24,lo8(1<<4)
 506 00e6 00C0      		rjmp .L90
 507               	.L46:
 239:quantum/quantum.c ****             break;
 240:quantum/quantum.c ****           case MAGIC_SWAP_GRAVE_ESC:
 241:quantum/quantum.c ****             keymap_config.swap_grave_esc = true;
 508               		.loc 1 241 0
 509 00e8 8091 0000 		lds r24,keymap_config
 510 00ec 8062      		ori r24,lo8(1<<5)
 511 00ee 00C0      		rjmp .L90
 512               	.L47:
 242:quantum/quantum.c ****             break;
 243:quantum/quantum.c ****           case MAGIC_SWAP_BACKSLASH_BACKSPACE:
 244:quantum/quantum.c ****             keymap_config.swap_backslash_backspace = true;
 513               		.loc 1 244 0
 514 00f0 8091 0000 		lds r24,keymap_config
 515 00f4 8064      		ori r24,lo8(1<<6)
 516 00f6 00C0      		rjmp .L90
 517               	.L48:
 245:quantum/quantum.c ****             break;
 246:quantum/quantum.c ****           case MAGIC_HOST_NKRO:
 247:quantum/quantum.c ****             keymap_config.nkro = true;
 518               		.loc 1 247 0
 519 00f8 8091 0000 		lds r24,keymap_config
 520 00fc 8068      		ori r24,lo8(1<<7)
 521 00fe 00C0      		rjmp .L90
 522               	.L49:
 248:quantum/quantum.c ****             break;
 249:quantum/quantum.c ****           case MAGIC_SWAP_ALT_GUI:
 250:quantum/quantum.c ****             keymap_config.swap_lalt_lgui = true;
 523               		.loc 1 250 0
 524 0100 8091 0000 		lds r24,keymap_config
 251:quantum/quantum.c ****             keymap_config.swap_ralt_rgui = true;
 525               		.loc 1 251 0
 526 0104 8460      		ori r24,lo8(4)
 527               	.L94:
 528 0106 8860      		ori r24,lo8(1<<3)
 529 0108 00C0      		rjmp .L90
 530               	.L50:
 252:quantum/quantum.c ****             break;
 253:quantum/quantum.c ****           case MAGIC_UNSWAP_CONTROL_CAPSLOCK:
 254:quantum/quantum.c ****             keymap_config.swap_control_capslock = false;
 531               		.loc 1 254 0
 532 010a 8091 0000 		lds r24,keymap_config
 533 010e 8E7F      		andi r24,lo8(~(1<<0))
 534 0110 00C0      		rjmp .L90
 535               	.L51:
 255:quantum/quantum.c ****             break;
 256:quantum/quantum.c ****           case MAGIC_UNCAPSLOCK_TO_CONTROL:
 257:quantum/quantum.c ****             keymap_config.capslock_to_control = false;
 536               		.loc 1 257 0
 537 0112 8091 0000 		lds r24,keymap_config
 538 0116 8D7F      		andi r24,lo8(~(1<<1))
 539 0118 00C0      		rjmp .L90
 540               	.L52:
 258:quantum/quantum.c ****             break;
 259:quantum/quantum.c ****           case MAGIC_UNSWAP_LALT_LGUI:
 260:quantum/quantum.c ****             keymap_config.swap_lalt_lgui = false;
 541               		.loc 1 260 0
 542 011a 8091 0000 		lds r24,keymap_config
 543 011e 8B7F      		andi r24,lo8(~(1<<2))
 544 0120 00C0      		rjmp .L90
 545               	.L53:
 261:quantum/quantum.c ****             break;
 262:quantum/quantum.c ****           case MAGIC_UNSWAP_RALT_RGUI:
 263:quantum/quantum.c ****             keymap_config.swap_ralt_rgui = false;
 546               		.loc 1 263 0
 547 0122 8091 0000 		lds r24,keymap_config
 548 0126 00C0      		rjmp .L93
 549               	.L54:
 264:quantum/quantum.c ****             break;
 265:quantum/quantum.c ****           case MAGIC_UNNO_GUI:
 266:quantum/quantum.c ****             keymap_config.no_gui = false;
 550               		.loc 1 266 0
 551 0128 8091 0000 		lds r24,keymap_config
 552 012c 8F7E      		andi r24,lo8(~(1<<4))
 553 012e 00C0      		rjmp .L90
 554               	.L55:
 267:quantum/quantum.c ****             break;
 268:quantum/quantum.c ****           case MAGIC_UNSWAP_GRAVE_ESC:
 269:quantum/quantum.c ****             keymap_config.swap_grave_esc = false;
 555               		.loc 1 269 0
 556 0130 8091 0000 		lds r24,keymap_config
 557 0134 8F7D      		andi r24,lo8(~(1<<5))
 558 0136 00C0      		rjmp .L90
 559               	.L56:
 270:quantum/quantum.c ****             break;
 271:quantum/quantum.c ****           case MAGIC_UNSWAP_BACKSLASH_BACKSPACE:
 272:quantum/quantum.c ****             keymap_config.swap_backslash_backspace = false;
 560               		.loc 1 272 0
 561 0138 8091 0000 		lds r24,keymap_config
 562 013c 8F7B      		andi r24,lo8(~(1<<6))
 563 013e 00C0      		rjmp .L90
 564               	.L57:
 273:quantum/quantum.c ****             break;
 274:quantum/quantum.c ****           case MAGIC_UNHOST_NKRO:
 275:quantum/quantum.c ****             keymap_config.nkro = false;
 565               		.loc 1 275 0
 566 0140 8091 0000 		lds r24,keymap_config
 567 0144 8F77      		andi r24,lo8(~(1<<7))
 568 0146 00C0      		rjmp .L90
 569               	.L58:
 276:quantum/quantum.c ****             break;
 277:quantum/quantum.c ****           case MAGIC_UNSWAP_ALT_GUI:
 278:quantum/quantum.c ****             keymap_config.swap_lalt_lgui = false;
 570               		.loc 1 278 0
 571 0148 8091 0000 		lds r24,keymap_config
 279:quantum/quantum.c ****             keymap_config.swap_ralt_rgui = false;
 572               		.loc 1 279 0
 573 014c 8B7F      		andi r24,lo8(-5)
 574               	.L93:
 575 014e 877F      		andi r24,lo8(~(1<<3))
 576 0150 00C0      		rjmp .L90
 577               	.L59:
 280:quantum/quantum.c ****             break;
 281:quantum/quantum.c ****           case MAGIC_TOGGLE_NKRO:
 282:quantum/quantum.c ****             keymap_config.nkro = !keymap_config.nkro;
 578               		.loc 1 282 0
 579 0152 9091 0000 		lds r25,keymap_config
 580 0156 97FB      		bst r25,7
 581 0158 8827      		clr r24
 582 015a 80F9      		bld r24,0
 583 015c 21E0      		ldi r18,lo8(1)
 584 015e 8227      		eor r24,r18
 585 0160 80FB      		bst r24,0
 586 0162 97F9      		bld r25,7
 587 0164 9093 0000 		sts keymap_config,r25
 588               	.L60:
 283:quantum/quantum.c ****             break;
 284:quantum/quantum.c ****           default:
 285:quantum/quantum.c ****             break;
 286:quantum/quantum.c ****         }
 287:quantum/quantum.c ****         eeconfig_update_keymap(keymap_config.raw);
 589               		.loc 1 287 0
 590 0168 8091 0000 		lds r24,keymap_config
 591 016c 0E94 0000 		call eeconfig_update_keymap
 592               	.LVL48:
 288:quantum/quantum.c ****         clear_keyboard(); // clear to prevent stuck keys
 593               		.loc 1 288 0
 594 0170 0E94 0000 		call clear_keyboard
 595               	.LVL49:
 289:quantum/quantum.c **** 
 290:quantum/quantum.c ****         return false;
 596               		.loc 1 290 0
 597 0174 00C0      		rjmp .L78
 598               	.L95:
 151:quantum/quantum.c ****     case RESET:
 599               		.loc 1 151 0
 600 0176 0115      		cp r16,__zero_reg__
 601 0178 80E7      		ldi r24,112
 602 017a 1807      		cpc r17,r24
 603 017c 01F0      		breq .L34
 604 017e 0130      		cpi r16,1
 605 0180 1047      		sbci r17,112
 606 0182 01F0      		breq .L36
 607               	.L71:
 291:quantum/quantum.c ****       }
 292:quantum/quantum.c ****       break;
 293:quantum/quantum.c ****     case KC_LSPO: {
 294:quantum/quantum.c ****       if (record->event.pressed) {
 295:quantum/quantum.c ****         shift_interrupted[0] = false;
 296:quantum/quantum.c ****         scs_timer = timer_read ();
 297:quantum/quantum.c ****         register_mods(MOD_BIT(KC_LSFT));
 298:quantum/quantum.c ****       }
 299:quantum/quantum.c ****       else {
 300:quantum/quantum.c ****         #ifdef DISABLE_SPACE_CADET_ROLLOVER
 301:quantum/quantum.c ****           if (get_mods() & MOD_BIT(KC_RSFT)) {
 302:quantum/quantum.c ****             shift_interrupted[0] = true;
 303:quantum/quantum.c ****             shift_interrupted[1] = true;
 304:quantum/quantum.c ****           }
 305:quantum/quantum.c ****         #endif
 306:quantum/quantum.c ****         if (!shift_interrupted[0] && timer_elapsed(scs_timer) < TAPPING_TERM) {
 307:quantum/quantum.c ****           register_code(LSPO_KEY);
 308:quantum/quantum.c ****           unregister_code(LSPO_KEY);
 309:quantum/quantum.c ****         }
 310:quantum/quantum.c ****         unregister_mods(MOD_BIT(KC_LSFT));
 311:quantum/quantum.c ****       }
 312:quantum/quantum.c ****       return false;
 313:quantum/quantum.c ****       // break;
 314:quantum/quantum.c ****     }
 315:quantum/quantum.c **** 
 316:quantum/quantum.c ****     case KC_RSPC: {
 317:quantum/quantum.c ****       if (record->event.pressed) {
 318:quantum/quantum.c ****         shift_interrupted[1] = false;
 319:quantum/quantum.c ****         scs_timer = timer_read ();
 320:quantum/quantum.c ****         register_mods(MOD_BIT(KC_RSFT));
 321:quantum/quantum.c ****       }
 322:quantum/quantum.c ****       else {
 323:quantum/quantum.c ****         #ifdef DISABLE_SPACE_CADET_ROLLOVER
 324:quantum/quantum.c ****           if (get_mods() & MOD_BIT(KC_LSFT)) {
 325:quantum/quantum.c ****             shift_interrupted[0] = true;
 326:quantum/quantum.c ****             shift_interrupted[1] = true;
 327:quantum/quantum.c ****           }
 328:quantum/quantum.c ****         #endif
 329:quantum/quantum.c ****         if (!shift_interrupted[1] && timer_elapsed(scs_timer) < TAPPING_TERM) {
 330:quantum/quantum.c ****           register_code(RSPC_KEY);
 331:quantum/quantum.c ****           unregister_code(RSPC_KEY);
 332:quantum/quantum.c ****         }
 333:quantum/quantum.c ****         unregister_mods(MOD_BIT(KC_RSFT));
 334:quantum/quantum.c ****       }
 335:quantum/quantum.c ****       return false;
 336:quantum/quantum.c ****       // break;
 337:quantum/quantum.c ****     }
 338:quantum/quantum.c ****     default: {
 339:quantum/quantum.c ****       shift_interrupted[0] = true;
 608               		.loc 1 339 0
 609 0184 81E0      		ldi r24,lo8(1)
 610 0186 8093 0000 		sts shift_interrupted,r24
 340:quantum/quantum.c ****       shift_interrupted[1] = true;
 611               		.loc 1 340 0
 612 018a 8093 0000 		sts shift_interrupted+1,r24
 613               	.L38:
 341:quantum/quantum.c ****       break;
 342:quantum/quantum.c ****     }
 343:quantum/quantum.c ****   }
 344:quantum/quantum.c **** 
 345:quantum/quantum.c ****   return process_action_kb(record);
 614               		.loc 1 345 0
 615 018e CE01      		movw r24,r28
 616               	/* epilogue start */
 346:quantum/quantum.c **** }
 617               		.loc 1 346 0
 618 0190 DF91      		pop r29
 619 0192 CF91      		pop r28
 620               	.LVL50:
 621 0194 1F91      		pop r17
 622 0196 0F91      		pop r16
 623               	.LVL51:
 624 0198 FF90      		pop r15
 345:quantum/quantum.c **** }
 625               		.loc 1 345 0
 626 019a 0C94 0000 		jmp process_action_kb
 627               	.LVL52:
 628               	.L34:
 153:quantum/quantum.c ****         reset_keyboard();
 629               		.loc 1 153 0
 630 019e 8A81      		ldd r24,Y+2
 631 01a0 8823      		tst r24
 632 01a2 01F4      		brne .+2
 633 01a4 00C0      		rjmp .L78
 154:quantum/quantum.c ****       }
 634               		.loc 1 154 0
 635 01a6 0E94 0000 		call reset_keyboard
 636               	.LVL53:
 637 01aa 00C0      		rjmp .L78
 638               	.L36:
 159:quantum/quantum.c ****           print("\nDEBUG: enabled.\n");
 639               		.loc 1 159 0
 640 01ac 8A81      		ldd r24,Y+2
 641 01ae 8823      		tst r24
 642 01b0 01F4      		brne .+2
 643 01b2 00C0      		rjmp .L78
 161:quantum/quantum.c ****       }
 644               		.loc 1 161 0
 645 01b4 8091 0000 		lds r24,debug_config
 646 01b8 8160      		ori r24,lo8(1<<0)
 647 01ba 8093 0000 		sts debug_config,r24
 648 01be 00C0      		rjmp .L78
 649               	.L72:
 151:quantum/quantum.c ****     case RESET:
 650               		.loc 1 151 0
 651 01c0 0C33      		cpi r16,60
 652 01c2 80E7      		ldi r24,112
 653 01c4 1807      		cpc r17,r24
 654 01c6 01F4      		brne .L96
 294:quantum/quantum.c ****         shift_interrupted[0] = false;
 655               		.loc 1 294 0
 656 01c8 8A81      		ldd r24,Y+2
 657 01ca 8823      		tst r24
 658 01cc 01F0      		breq .L62
 295:quantum/quantum.c ****         scs_timer = timer_read ();
 659               		.loc 1 295 0
 660 01ce 1092 0000 		sts shift_interrupted,__zero_reg__
 296:quantum/quantum.c ****         register_mods(MOD_BIT(KC_LSFT));
 661               		.loc 1 296 0
 662 01d2 0E94 0000 		call timer_read
 663               	.LVL54:
 664 01d6 9093 0000 		sts scs_timer+1,r25
 665 01da 8093 0000 		sts scs_timer,r24
 297:quantum/quantum.c ****       }
 666               		.loc 1 297 0
 667 01de 82E0      		ldi r24,lo8(2)
 668 01e0 00C0      		rjmp .L91
 669               	.L62:
 306:quantum/quantum.c ****           register_code(LSPO_KEY);
 670               		.loc 1 306 0
 671 01e2 8091 0000 		lds r24,shift_interrupted
 672 01e6 8111      		cpse r24,__zero_reg__
 673 01e8 00C0      		rjmp .L64
 306:quantum/quantum.c ****           register_code(LSPO_KEY);
 674               		.loc 1 306 0 is_stmt 0 discriminator 1
 675 01ea 8091 0000 		lds r24,scs_timer
 676 01ee 9091 0000 		lds r25,scs_timer+1
 677 01f2 0E94 0000 		call timer_elapsed
 678               	.LVL55:
 679 01f6 883C      		cpi r24,-56
 680 01f8 9105      		cpc r25,__zero_reg__
 681 01fa 00F4      		brsh .L64
 307:quantum/quantum.c ****           unregister_code(LSPO_KEY);
 682               		.loc 1 307 0 is_stmt 1
 683 01fc 86E2      		ldi r24,lo8(38)
 684 01fe 0E94 0000 		call register_code
 685               	.LVL56:
 308:quantum/quantum.c ****         }
 686               		.loc 1 308 0
 687 0202 86E2      		ldi r24,lo8(38)
 688 0204 0E94 0000 		call unregister_code
 689               	.LVL57:
 690               	.L64:
 310:quantum/quantum.c ****       }
 691               		.loc 1 310 0
 692 0208 82E0      		ldi r24,lo8(2)
 693 020a 00C0      		rjmp .L92
 694               	.L96:
 151:quantum/quantum.c ****     case RESET:
 695               		.loc 1 151 0
 696 020c 0D33      		cpi r16,61
 697 020e 1047      		sbci r17,112
 698 0210 01F0      		breq .+2
 699 0212 00C0      		rjmp .L71
 317:quantum/quantum.c ****         shift_interrupted[1] = false;
 700               		.loc 1 317 0
 701 0214 8A81      		ldd r24,Y+2
 702 0216 8823      		tst r24
 703 0218 01F0      		breq .L67
 318:quantum/quantum.c ****         scs_timer = timer_read ();
 704               		.loc 1 318 0
 705 021a 1092 0000 		sts shift_interrupted+1,__zero_reg__
 319:quantum/quantum.c ****         register_mods(MOD_BIT(KC_RSFT));
 706               		.loc 1 319 0
 707 021e 0E94 0000 		call timer_read
 708               	.LVL58:
 709 0222 9093 0000 		sts scs_timer+1,r25
 710 0226 8093 0000 		sts scs_timer,r24
 320:quantum/quantum.c ****       }
 711               		.loc 1 320 0
 712 022a 80E2      		ldi r24,lo8(32)
 713               	.L91:
 714 022c 0E94 0000 		call register_mods
 715               	.LVL59:
 716 0230 00C0      		rjmp .L78
 717               	.L67:
 329:quantum/quantum.c ****           register_code(RSPC_KEY);
 718               		.loc 1 329 0
 719 0232 8091 0000 		lds r24,shift_interrupted+1
 720 0236 8823      		tst r24
 721 0238 01F0      		breq .L97
 722               	.L69:
 333:quantum/quantum.c ****       }
 723               		.loc 1 333 0
 724 023a 80E2      		ldi r24,lo8(32)
 725               	.L92:
 726 023c 0E94 0000 		call unregister_mods
 727               	.LVL60:
 728 0240 00C0      		rjmp .L78
 729               	.L97:
 329:quantum/quantum.c ****           register_code(RSPC_KEY);
 730               		.loc 1 329 0 discriminator 1
 731 0242 8091 0000 		lds r24,scs_timer
 732 0246 9091 0000 		lds r25,scs_timer+1
 733 024a 0E94 0000 		call timer_elapsed
 734               	.LVL61:
 735 024e 883C      		cpi r24,-56
 736 0250 9105      		cpc r25,__zero_reg__
 737 0252 00F4      		brsh .L69
 330:quantum/quantum.c ****           unregister_code(RSPC_KEY);
 738               		.loc 1 330 0
 739 0254 87E2      		ldi r24,lo8(39)
 740 0256 0E94 0000 		call register_code
 741               	.LVL62:
 331:quantum/quantum.c ****         }
 742               		.loc 1 331 0
 743 025a 87E2      		ldi r24,lo8(39)
 744 025c 0E94 0000 		call unregister_code
 745               	.LVL63:
 746 0260 00C0      		rjmp .L69
 747               	.L78:
 748               		.loc 1 346 0
 749 0262 80E0      		ldi r24,0
 750               	/* epilogue start */
 751 0264 DF91      		pop r29
 752 0266 CF91      		pop r28
 753               	.LVL64:
 754 0268 1F91      		pop r17
 755 026a 0F91      		pop r16
 756               	.LVL65:
 757 026c FF90      		pop r15
 758 026e 0895      		ret
 759               		.cfi_endproc
 760               	.LFE114:
 762               		.section	.text.send_string,"ax",@progbits
 763               	.global	send_string
 765               	send_string:
 766               	.LFB115:
 347:quantum/quantum.c **** 
 348:quantum/quantum.c **** const bool ascii_to_qwerty_shift_lut[0x80] PROGMEM = {
 349:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 350:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 351:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 352:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 353:quantum/quantum.c ****     0, 1, 1, 1, 1, 1, 1, 0,
 354:quantum/quantum.c ****     1, 1, 1, 1, 0, 0, 0, 0,
 355:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 356:quantum/quantum.c ****     0, 0, 1, 0, 1, 0, 1, 1,
 357:quantum/quantum.c ****     1, 1, 1, 1, 1, 1, 1, 1,
 358:quantum/quantum.c ****     1, 1, 1, 1, 1, 1, 1, 1,
 359:quantum/quantum.c ****     1, 1, 1, 1, 1, 1, 1, 1,
 360:quantum/quantum.c ****     1, 1, 1, 0, 0, 0, 1, 1,
 361:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 362:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 363:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 364:quantum/quantum.c ****     0, 0, 0, 1, 1, 1, 1, 0
 365:quantum/quantum.c **** };
 366:quantum/quantum.c **** 
 367:quantum/quantum.c **** const uint8_t ascii_to_qwerty_keycode_lut[0x80] PROGMEM = {
 368:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 369:quantum/quantum.c ****     KC_BSPC, KC_TAB, KC_ENT, 0, 0, 0, 0, 0,
 370:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 371:quantum/quantum.c ****     0, 0, 0, KC_ESC, 0, 0, 0, 0,
 372:quantum/quantum.c ****     KC_SPC, KC_1, KC_QUOT, KC_3, KC_4, KC_5, KC_7, KC_QUOT,
 373:quantum/quantum.c ****     KC_9, KC_0, KC_8, KC_EQL, KC_COMM, KC_MINS, KC_DOT, KC_SLSH,
 374:quantum/quantum.c ****     KC_0, KC_1, KC_2, KC_3, KC_4, KC_5, KC_6, KC_7,
 375:quantum/quantum.c ****     KC_8, KC_9, KC_SCLN, KC_SCLN, KC_COMM, KC_EQL, KC_DOT, KC_SLSH,
 376:quantum/quantum.c ****     KC_2, KC_A, KC_B, KC_C, KC_D, KC_E, KC_F, KC_G,
 377:quantum/quantum.c ****     KC_H, KC_I, KC_J, KC_K, KC_L, KC_M, KC_N, KC_O,
 378:quantum/quantum.c ****     KC_P, KC_Q, KC_R, KC_S, KC_T, KC_U, KC_V, KC_W,
 379:quantum/quantum.c ****     KC_X, KC_Y, KC_Z, KC_LBRC, KC_BSLS, KC_RBRC, KC_6, KC_MINS,
 380:quantum/quantum.c ****     KC_GRV, KC_A, KC_B, KC_C, KC_D, KC_E, KC_F, KC_G,
 381:quantum/quantum.c ****     KC_H, KC_I, KC_J, KC_K, KC_L, KC_M, KC_N, KC_O,
 382:quantum/quantum.c ****     KC_P, KC_Q, KC_R, KC_S, KC_T, KC_U, KC_V, KC_W,
 383:quantum/quantum.c ****     KC_X, KC_Y, KC_Z, KC_LBRC, KC_BSLS, KC_RBRC, KC_GRV, KC_DEL
 384:quantum/quantum.c **** };
 385:quantum/quantum.c **** 
 386:quantum/quantum.c **** /* for users whose OSes are set to Colemak */
 387:quantum/quantum.c **** #if 0
 388:quantum/quantum.c **** #include "keymap_colemak.h"
 389:quantum/quantum.c **** 
 390:quantum/quantum.c **** const bool ascii_to_colemak_shift_lut[0x80] PROGMEM = {
 391:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 392:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 393:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 394:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 395:quantum/quantum.c ****     0, 1, 1, 1, 1, 1, 1, 0,
 396:quantum/quantum.c ****     1, 1, 1, 1, 0, 0, 0, 0,
 397:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 398:quantum/quantum.c ****     0, 0, 1, 0, 1, 0, 1, 1,
 399:quantum/quantum.c ****     1, 1, 1, 1, 1, 1, 1, 1,
 400:quantum/quantum.c ****     1, 1, 1, 1, 1, 1, 1, 1,
 401:quantum/quantum.c ****     1, 1, 1, 1, 1, 1, 1, 1,
 402:quantum/quantum.c ****     1, 1, 1, 0, 0, 0, 1, 1,
 403:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 404:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 405:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 406:quantum/quantum.c ****     0, 0, 0, 1, 1, 1, 1, 0
 407:quantum/quantum.c **** };
 408:quantum/quantum.c **** 
 409:quantum/quantum.c **** const uint8_t ascii_to_colemak_keycode_lut[0x80] PROGMEM = {
 410:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 411:quantum/quantum.c ****     KC_BSPC, KC_TAB, KC_ENT, 0, 0, 0, 0, 0,
 412:quantum/quantum.c ****     0, 0, 0, 0, 0, 0, 0, 0,
 413:quantum/quantum.c ****     0, 0, 0, KC_ESC, 0, 0, 0, 0,
 414:quantum/quantum.c ****     KC_SPC, KC_1, KC_QUOT, KC_3, KC_4, KC_5, KC_7, KC_QUOT,
 415:quantum/quantum.c ****     KC_9, KC_0, KC_8, KC_EQL, KC_COMM, KC_MINS, KC_DOT, KC_SLSH,
 416:quantum/quantum.c ****     KC_0, KC_1, KC_2, KC_3, KC_4, KC_5, KC_6, KC_7,
 417:quantum/quantum.c ****     KC_8, KC_9, CM_SCLN, CM_SCLN, KC_COMM, KC_EQL, KC_DOT, KC_SLSH,
 418:quantum/quantum.c ****     KC_2, CM_A, CM_B, CM_C, CM_D, CM_E, CM_F, CM_G,
 419:quantum/quantum.c ****     CM_H, CM_I, CM_J, CM_K, CM_L, CM_M, CM_N, CM_O,
 420:quantum/quantum.c ****     CM_P, CM_Q, CM_R, CM_S, CM_T, CM_U, CM_V, CM_W,
 421:quantum/quantum.c ****     CM_X, CM_Y, CM_Z, KC_LBRC, KC_BSLS, KC_RBRC, KC_6, KC_MINS,
 422:quantum/quantum.c ****     KC_GRV, CM_A, CM_B, CM_C, CM_D, CM_E, CM_F, CM_G,
 423:quantum/quantum.c ****     CM_H, CM_I, CM_J, CM_K, CM_L, CM_M, CM_N, CM_O,
 424:quantum/quantum.c ****     CM_P, CM_Q, CM_R, CM_S, CM_T, CM_U, CM_V, CM_W,
 425:quantum/quantum.c ****     CM_X, CM_Y, CM_Z, KC_LBRC, KC_BSLS, KC_RBRC, KC_GRV, KC_DEL
 426:quantum/quantum.c **** };
 427:quantum/quantum.c **** 
 428:quantum/quantum.c **** #endif
 429:quantum/quantum.c **** 
 430:quantum/quantum.c **** void send_string(const char *str) {
 767               		.loc 1 430 0
 768               		.cfi_startproc
 769               	.LVL66:
 770 0000 1F93      		push r17
 771               	.LCFI15:
 772               		.cfi_def_cfa_offset 3
 773               		.cfi_offset 17, -2
 774 0002 CF93      		push r28
 775               	.LCFI16:
 776               		.cfi_def_cfa_offset 4
 777               		.cfi_offset 28, -3
 778 0004 DF93      		push r29
 779               	.LCFI17:
 780               		.cfi_def_cfa_offset 5
 781               		.cfi_offset 29, -4
 782               	/* prologue: function */
 783               	/* frame size = 0 */
 784               	/* stack size = 3 */
 785               	.L__stack_usage = 3
 786 0006 EC01      		movw r28,r24
 787               	.LVL67:
 788               	.L102:
 789               	.LBB7:
 790               	.LBB8:
 431:quantum/quantum.c ****     while (1) {
 432:quantum/quantum.c ****         uint8_t keycode;
 433:quantum/quantum.c ****         uint8_t ascii_code = pgm_read_byte(str);
 791               		.loc 1 433 0
 792 0008 FE01      		movw r30,r28
 793               	/* #APP */
 794               	 ;  433 "quantum/quantum.c" 1
 795 000a 2491      		lpm r18, Z
 796               		
 797               	 ;  0 "" 2
 798               	.LVL68:
 799               	/* #NOAPP */
 800               	.LBE8:
 434:quantum/quantum.c ****         if (!ascii_code) break;
 801               		.loc 1 434 0
 802 000c 2223      		tst r18
 803 000e 01F0      		breq .L98
 804               	.LBB9:
 435:quantum/quantum.c ****         keycode = pgm_read_byte(&ascii_to_qwerty_keycode_lut[ascii_code]);
 805               		.loc 1 435 0
 806 0010 30E0      		ldi r19,0
 807               	.LVL69:
 808 0012 F901      		movw r30,r18
 809 0014 E050      		subi r30,lo8(-(ascii_to_qwerty_keycode_lut))
 810 0016 F040      		sbci r31,hi8(-(ascii_to_qwerty_keycode_lut))
 811               	.LVL70:
 812               	/* #APP */
 813               	 ;  435 "quantum/quantum.c" 1
 814 0018 1491      		lpm r17, Z
 815               		
 816               	 ;  0 "" 2
 817               	.LVL71:
 818               	/* #NOAPP */
 819               	.LBE9:
 820               	.LBB10:
 436:quantum/quantum.c ****         if (pgm_read_byte(&ascii_to_qwerty_shift_lut[ascii_code])) {
 821               		.loc 1 436 0
 822 001a F901      		movw r30,r18
 823               	.LVL72:
 824 001c E050      		subi r30,lo8(-(ascii_to_qwerty_shift_lut))
 825 001e F040      		sbci r31,hi8(-(ascii_to_qwerty_shift_lut))
 826               	.LVL73:
 827               	/* #APP */
 828               	 ;  436 "quantum/quantum.c" 1
 829 0020 2491      		lpm r18, Z
 830               		
 831               	 ;  0 "" 2
 832               	.LVL74:
 833               	/* #NOAPP */
 834               	.LBE10:
 835 0022 2223      		tst r18
 836 0024 01F0      		breq .L100
 437:quantum/quantum.c ****             register_code(KC_LSFT);
 837               		.loc 1 437 0
 838 0026 81EE      		ldi r24,lo8(-31)
 839 0028 0E94 0000 		call register_code
 840               	.LVL75:
 438:quantum/quantum.c ****             register_code(keycode);
 841               		.loc 1 438 0
 842 002c 812F      		mov r24,r17
 843 002e 0E94 0000 		call register_code
 844               	.LVL76:
 439:quantum/quantum.c ****             unregister_code(keycode);
 845               		.loc 1 439 0
 846 0032 812F      		mov r24,r17
 847 0034 0E94 0000 		call unregister_code
 848               	.LVL77:
 440:quantum/quantum.c ****             unregister_code(KC_LSFT);
 849               		.loc 1 440 0
 850 0038 81EE      		ldi r24,lo8(-31)
 851 003a 00C0      		rjmp .L103
 852               	.LVL78:
 853               	.L100:
 441:quantum/quantum.c ****         }
 442:quantum/quantum.c ****         else {
 443:quantum/quantum.c ****             register_code(keycode);
 854               		.loc 1 443 0
 855 003c 812F      		mov r24,r17
 856 003e 0E94 0000 		call register_code
 857               	.LVL79:
 444:quantum/quantum.c ****             unregister_code(keycode);
 858               		.loc 1 444 0
 859 0042 812F      		mov r24,r17
 860               	.L103:
 861 0044 0E94 0000 		call unregister_code
 862               	.LVL80:
 445:quantum/quantum.c ****         }
 446:quantum/quantum.c ****         ++str;
 863               		.loc 1 446 0
 864 0048 2196      		adiw r28,1
 865               	.LVL81:
 866               	.LBE7:
 447:quantum/quantum.c ****     }
 867               		.loc 1 447 0
 868 004a 00C0      		rjmp .L102
 869               	.LVL82:
 870               	.L98:
 871               	/* epilogue start */
 448:quantum/quantum.c **** }
 872               		.loc 1 448 0
 873 004c DF91      		pop r29
 874 004e CF91      		pop r28
 875               	.LVL83:
 876 0050 1F91      		pop r17
 877 0052 0895      		ret
 878               		.cfi_endproc
 879               	.LFE115:
 881               		.section	.text.update_tri_layer,"ax",@progbits
 882               	.global	update_tri_layer
 884               	update_tri_layer:
 885               	.LFB116:
 449:quantum/quantum.c **** 
 450:quantum/quantum.c **** void update_tri_layer(uint8_t layer1, uint8_t layer2, uint8_t layer3) {
 886               		.loc 1 450 0
 887               		.cfi_startproc
 888               	.LVL84:
 889 0000 CF92      		push r12
 890               	.LCFI18:
 891               		.cfi_def_cfa_offset 3
 892               		.cfi_offset 12, -2
 893 0002 DF92      		push r13
 894               	.LCFI19:
 895               		.cfi_def_cfa_offset 4
 896               		.cfi_offset 13, -3
 897 0004 EF92      		push r14
 898               	.LCFI20:
 899               		.cfi_def_cfa_offset 5
 900               		.cfi_offset 14, -4
 901 0006 FF92      		push r15
 902               	.LCFI21:
 903               		.cfi_def_cfa_offset 6
 904               		.cfi_offset 15, -5
 905 0008 0F93      		push r16
 906               	.LCFI22:
 907               		.cfi_def_cfa_offset 7
 908               		.cfi_offset 16, -6
 909 000a 1F93      		push r17
 910               	.LCFI23:
 911               		.cfi_def_cfa_offset 8
 912               		.cfi_offset 17, -7
 913               	/* prologue: function */
 914               	/* frame size = 0 */
 915               	/* stack size = 6 */
 916               	.L__stack_usage = 6
 917 000c 01E0      		ldi r16,lo8(1)
 918 000e 10E0      		ldi r17,0
 919 0010 20E0      		ldi r18,0
 920 0012 30E0      		ldi r19,0
 921 0014 6801      		movw r12,r16
 922 0016 7901      		movw r14,r18
 923 0018 00C0      		rjmp 2f
 924               		1:
 925 001a CC0C      		lsl r12
 926 001c DD1C      		rol r13
 927 001e EE1C      		rol r14
 928 0020 FF1C      		rol r15
 929               		2:
 930 0022 8A95      		dec r24
 931 0024 02F4      		brpl 1b
 932 0026 D701      		movw r26,r14
 933 0028 C601      		movw r24,r12
 934               	.LVL85:
 935 002a 00C0      		rjmp 2f
 936               		1:
 937 002c 000F      		lsl r16
 938 002e 111F      		rol r17
 939 0030 221F      		rol r18
 940 0032 331F      		rol r19
 941               		2:
 942 0034 6A95      		dec r22
 943 0036 02F4      		brpl 1b
 944 0038 802B      		or r24,r16
 945 003a 912B      		or r25,r17
 946 003c A22B      		or r26,r18
 947 003e B32B      		or r27,r19
 948 0040 0091 0000 		lds r16,layer_state
 949 0044 1091 0000 		lds r17,layer_state+1
 950 0048 2091 0000 		lds r18,layer_state+2
 951 004c 3091 0000 		lds r19,layer_state+3
 952 0050 0823      		and r16,r24
 953 0052 1923      		and r17,r25
 954 0054 2A23      		and r18,r26
 955 0056 3B23      		and r19,r27
 451:quantum/quantum.c ****   if (IS_LAYER_ON(layer1) && IS_LAYER_ON(layer2)) {
 956               		.loc 1 451 0
 957 0058 0817      		cp r16,r24
 958 005a 1907      		cpc r17,r25
 959 005c 2A07      		cpc r18,r26
 960 005e 3B07      		cpc r19,r27
 961 0060 01F4      		brne .L105
 452:quantum/quantum.c ****     layer_on(layer3);
 962               		.loc 1 452 0
 963 0062 842F      		mov r24,r20
 964               	/* epilogue start */
 453:quantum/quantum.c ****   } else {
 454:quantum/quantum.c ****     layer_off(layer3);
 455:quantum/quantum.c ****   }
 456:quantum/quantum.c **** }
 965               		.loc 1 456 0
 966 0064 1F91      		pop r17
 967 0066 0F91      		pop r16
 968 0068 FF90      		pop r15
 969 006a EF90      		pop r14
 970 006c DF90      		pop r13
 971 006e CF90      		pop r12
 452:quantum/quantum.c ****     layer_on(layer3);
 972               		.loc 1 452 0
 973 0070 0C94 0000 		jmp layer_on
 974               	.LVL86:
 975               	.L105:
 454:quantum/quantum.c ****   }
 976               		.loc 1 454 0
 977 0074 842F      		mov r24,r20
 978               	/* epilogue start */
 979               		.loc 1 456 0
 980 0076 1F91      		pop r17
 981 0078 0F91      		pop r16
 982 007a FF90      		pop r15
 983 007c EF90      		pop r14
 984 007e DF90      		pop r13
 985 0080 CF90      		pop r12
 454:quantum/quantum.c ****   }
 986               		.loc 1 454 0
 987 0082 0C94 0000 		jmp layer_off
 988               	.LVL87:
 989               		.cfi_endproc
 990               	.LFE116:
 992               		.section	.text.tap_random_base64,"ax",@progbits
 993               	.global	tap_random_base64
 995               	tap_random_base64:
 996               	.LFB117:
 457:quantum/quantum.c **** 
 458:quantum/quantum.c **** void tap_random_base64(void) {
 997               		.loc 1 458 0
 998               		.cfi_startproc
 999 0000 CF93      		push r28
 1000               	.LCFI24:
 1001               		.cfi_def_cfa_offset 3
 1002               		.cfi_offset 28, -2
 1003               	/* prologue: function */
 1004               	/* frame size = 0 */
 1005               	/* stack size = 1 */
 1006               	.L__stack_usage = 1
 459:quantum/quantum.c ****   #if defined(__AVR_ATmega32U4__)
 460:quantum/quantum.c ****     uint8_t key = (TCNT0 + TCNT1 + TCNT3 + TCNT4) % 64;
 1007               		.loc 1 460 0
 1008 0002 66B5      		in r22,0x26
 1009 0004 4091 8400 		lds r20,132
 1010 0008 5091 8500 		lds r21,132+1
 1011 000c 8091 9400 		lds r24,148
 1012 0010 9091 9500 		lds r25,148+1
 1013 0014 2091 BE00 		lds r18,190
 1014 0018 3091 BF00 		lds r19,190+1
 1015 001c C42F      		mov r28,r20
 1016 001e C80F      		add r28,r24
 1017 0020 C60F      		add r28,r22
 1018 0022 C20F      		add r28,r18
 1019 0024 CF73      		andi r28,lo8(63)
 1020               	.LVL88:
 461:quantum/quantum.c ****   #else
 462:quantum/quantum.c ****     uint8_t key = rand() % 64;
 463:quantum/quantum.c ****   #endif
 464:quantum/quantum.c ****   switch (key) {
 1021               		.loc 1 464 0
 1022 0026 CE33      		cpi r28,lo8(62)
 1023 0028 00F4      		brsh .L108
 1024 002a C533      		cpi r28,lo8(53)
 1025 002c 00F4      		brsh .L109
 1026 002e CA31      		cpi r28,lo8(26)
 1027 0030 00F0      		brlo .L107
 1028 0032 C433      		cpi r28,lo8(52)
 1029 0034 00F4      		brsh .L114
 465:quantum/quantum.c ****     case 0 ... 25:
 466:quantum/quantum.c ****       register_code(KC_LSFT);
 467:quantum/quantum.c ****       register_code(key + KC_A);
 468:quantum/quantum.c ****       unregister_code(key + KC_A);
 469:quantum/quantum.c ****       unregister_code(KC_LSFT);
 470:quantum/quantum.c ****       break;
 471:quantum/quantum.c ****     case 26 ... 51:
 472:quantum/quantum.c ****       register_code(key - 26 + KC_A);
 1030               		.loc 1 472 0
 1031 0036 C651      		subi r28,lo8(-(-22))
 1032               	.LVL89:
 1033 0038 00C0      		rjmp .L117
 1034               	.LVL90:
 1035               	.L108:
 464:quantum/quantum.c ****     case 0 ... 25:
 1036               		.loc 1 464 0
 1037 003a CE33      		cpi r28,lo8(62)
 1038 003c 01F0      		breq .L112
 1039 003e CF33      		cpi r28,lo8(63)
 1040 0040 01F0      		breq .L113
 1041               	.L107:
 466:quantum/quantum.c ****       register_code(key + KC_A);
 1042               		.loc 1 466 0
 1043 0042 81EE      		ldi r24,lo8(-31)
 1044 0044 0E94 0000 		call register_code
 1045               	.LVL91:
 467:quantum/quantum.c ****       unregister_code(key + KC_A);
 1046               		.loc 1 467 0
 1047 0048 CC5F      		subi r28,lo8(-(4))
 1048               	.LVL92:
 1049 004a 8C2F      		mov r24,r28
 1050 004c 0E94 0000 		call register_code
 1051               	.LVL93:
 468:quantum/quantum.c ****       unregister_code(KC_LSFT);
 1052               		.loc 1 468 0
 1053 0050 8C2F      		mov r24,r28
 1054 0052 00C0      		rjmp .L116
 1055               	.LVL94:
 1056               	.L114:
 473:quantum/quantum.c ****       unregister_code(key - 26 + KC_A);
 474:quantum/quantum.c ****       break;
 475:quantum/quantum.c ****     case 52:
 476:quantum/quantum.c ****       register_code(KC_0);
 1057               		.loc 1 476 0
 1058 0054 87E2      		ldi r24,lo8(39)
 1059 0056 0E94 0000 		call register_code
 1060               	.LVL95:
 477:quantum/quantum.c ****       unregister_code(KC_0);
 1061               		.loc 1 477 0
 1062 005a 87E2      		ldi r24,lo8(39)
 1063 005c 00C0      		rjmp .L115
 1064               	.L109:
 478:quantum/quantum.c ****       break;
 479:quantum/quantum.c ****     case 53 ... 61:
 480:quantum/quantum.c ****       register_code(key - 53 + KC_1);
 1065               		.loc 1 480 0
 1066 005e C751      		subi r28,lo8(-(-23))
 1067               	.LVL96:
 1068               	.L117:
 1069 0060 8C2F      		mov r24,r28
 1070               	.LVL97:
 1071 0062 0E94 0000 		call register_code
 1072               	.LVL98:
 481:quantum/quantum.c ****       unregister_code(key - 53 + KC_1);
 1073               		.loc 1 481 0
 1074 0066 8C2F      		mov r24,r28
 1075 0068 00C0      		rjmp .L115
 1076               	.LVL99:
 1077               	.L112:
 482:quantum/quantum.c ****       break;
 483:quantum/quantum.c ****     case 62:
 484:quantum/quantum.c ****       register_code(KC_LSFT);
 1078               		.loc 1 484 0
 1079 006a 81EE      		ldi r24,lo8(-31)
 1080 006c 0E94 0000 		call register_code
 1081               	.LVL100:
 485:quantum/quantum.c ****       register_code(KC_EQL);
 1082               		.loc 1 485 0
 1083 0070 8EE2      		ldi r24,lo8(46)
 1084 0072 0E94 0000 		call register_code
 1085               	.LVL101:
 486:quantum/quantum.c ****       unregister_code(KC_EQL);
 1086               		.loc 1 486 0
 1087 0076 8EE2      		ldi r24,lo8(46)
 1088               	.LVL102:
 1089               	.L116:
 1090 0078 0E94 0000 		call unregister_code
 1091               	.LVL103:
 487:quantum/quantum.c ****       unregister_code(KC_LSFT);
 1092               		.loc 1 487 0
 1093 007c 81EE      		ldi r24,lo8(-31)
 1094 007e 00C0      		rjmp .L115
 1095               	.LVL104:
 1096               	.L113:
 488:quantum/quantum.c ****       break;
 489:quantum/quantum.c ****     case 63:
 490:quantum/quantum.c ****       register_code(KC_SLSH);
 1097               		.loc 1 490 0
 1098 0080 88E3      		ldi r24,lo8(56)
 1099 0082 0E94 0000 		call register_code
 1100               	.LVL105:
 491:quantum/quantum.c ****       unregister_code(KC_SLSH);
 1101               		.loc 1 491 0
 1102 0086 88E3      		ldi r24,lo8(56)
 1103               	.LVL106:
 1104               	.L115:
 1105               	/* epilogue start */
 492:quantum/quantum.c ****       break;
 493:quantum/quantum.c ****   }
 494:quantum/quantum.c **** }
 1106               		.loc 1 494 0
 1107 0088 CF91      		pop r28
 491:quantum/quantum.c ****       unregister_code(KC_SLSH);
 1108               		.loc 1 491 0
 1109 008a 0C94 0000 		jmp unregister_code
 1110               	.LVL107:
 1111               		.cfi_endproc
 1112               	.LFE117:
 1114               		.section	.text.matrix_init_quantum,"ax",@progbits
 1115               	.global	matrix_init_quantum
 1117               	matrix_init_quantum:
 1118               	.LFB118:
 495:quantum/quantum.c **** 
 496:quantum/quantum.c **** void matrix_init_quantum() {
 1119               		.loc 1 496 0
 1120               		.cfi_startproc
 1121               	/* prologue: function */
 1122               	/* frame size = 0 */
 1123               	/* stack size = 0 */
 1124               	.L__stack_usage = 0
 497:quantum/quantum.c ****   #ifdef BACKLIGHT_ENABLE
 498:quantum/quantum.c ****     backlight_init_ports();
 499:quantum/quantum.c ****   #endif
 500:quantum/quantum.c ****   matrix_init_kb();
 1125               		.loc 1 500 0
 1126 0000 0C94 0000 		jmp matrix_init_kb
 1127               	.LVL108:
 1128               		.cfi_endproc
 1129               	.LFE118:
 1131               		.section	.text.matrix_scan_quantum,"ax",@progbits
 1132               	.global	matrix_scan_quantum
 1134               	matrix_scan_quantum:
 1135               	.LFB119:
 501:quantum/quantum.c **** }
 502:quantum/quantum.c **** 
 503:quantum/quantum.c **** void matrix_scan_quantum() {
 1136               		.loc 1 503 0
 1137               		.cfi_startproc
 1138               	/* prologue: function */
 1139               	/* frame size = 0 */
 1140               	/* stack size = 0 */
 1141               	.L__stack_usage = 0
 504:quantum/quantum.c ****   #ifdef AUDIO_ENABLE
 505:quantum/quantum.c ****     matrix_scan_music();
 506:quantum/quantum.c ****   #endif
 507:quantum/quantum.c **** 
 508:quantum/quantum.c ****   #ifdef TAP_DANCE_ENABLE
 509:quantum/quantum.c ****     matrix_scan_tap_dance();
 510:quantum/quantum.c ****   #endif
 511:quantum/quantum.c ****   matrix_scan_kb();
 1142               		.loc 1 511 0
 1143 0000 0C94 0000 		jmp matrix_scan_kb
 1144               	.LVL109:
 1145               		.cfi_endproc
 1146               	.LFE119:
 1148               		.section	.text.backlight_init_ports,"ax",@progbits
 1149               		.weak	backlight_init_ports
 1151               	backlight_init_ports:
 1152               	.LFB120:
 512:quantum/quantum.c **** }
 513:quantum/quantum.c **** 
 514:quantum/quantum.c **** #if defined(BACKLIGHT_ENABLE) && defined(BACKLIGHT_PIN)
 515:quantum/quantum.c **** 
 516:quantum/quantum.c **** static const uint8_t backlight_pin = BACKLIGHT_PIN;
 517:quantum/quantum.c **** 
 518:quantum/quantum.c **** #if BACKLIGHT_PIN == B7
 519:quantum/quantum.c **** #  define COM1x1 COM1C1
 520:quantum/quantum.c **** #  define OCR1x  OCR1C
 521:quantum/quantum.c **** #elif BACKLIGHT_PIN == B6
 522:quantum/quantum.c **** #  define COM1x1 COM1B1
 523:quantum/quantum.c **** #  define OCR1x  OCR1B
 524:quantum/quantum.c **** #elif BACKLIGHT_PIN == B5
 525:quantum/quantum.c **** #  define COM1x1 COM1A1
 526:quantum/quantum.c **** #  define OCR1x  OCR1A
 527:quantum/quantum.c **** #else
 528:quantum/quantum.c **** #  error "Backlight pin not supported - use B5, B6, or B7"
 529:quantum/quantum.c **** #endif
 530:quantum/quantum.c **** 
 531:quantum/quantum.c **** __attribute__ ((weak))
 532:quantum/quantum.c **** void backlight_init_ports(void)
 533:quantum/quantum.c **** {
 534:quantum/quantum.c **** 
 535:quantum/quantum.c ****   // Setup backlight pin as output and output low.
 536:quantum/quantum.c ****   // DDRx |= n
 537:quantum/quantum.c ****   _SFR_IO8((backlight_pin >> 4) + 1) |= _BV(backlight_pin & 0xF);
 538:quantum/quantum.c ****   // PORTx &= ~n
 539:quantum/quantum.c ****   _SFR_IO8((backlight_pin >> 4) + 2) &= ~_BV(backlight_pin & 0xF);
 540:quantum/quantum.c **** 
 541:quantum/quantum.c ****   // Use full 16-bit resolution.
 542:quantum/quantum.c ****   ICR1 = 0xFFFF;
 543:quantum/quantum.c **** 
 544:quantum/quantum.c ****   // I could write a wall of text here to explain... but TL;DW
 545:quantum/quantum.c ****   // Go read the ATmega32u4 datasheet.
 546:quantum/quantum.c ****   // And this: http://blog.saikoled.com/post/43165849837/secret-konami-cheat-code-to-high-resolutio
 547:quantum/quantum.c **** 
 548:quantum/quantum.c ****   // Pin PB7 = OCR1C (Timer 1, Channel C)
 549:quantum/quantum.c ****   // Compare Output Mode = Clear on compare match, Channel C = COM1C1=1 COM1C0=0
 550:quantum/quantum.c ****   // (i.e. start high, go low when counter matches.)
 551:quantum/quantum.c ****   // WGM Mode 14 (Fast PWM) = WGM13=1 WGM12=1 WGM11=1 WGM10=0
 552:quantum/quantum.c ****   // Clock Select = clk/1 (no prescaling) = CS12=0 CS11=0 CS10=1
 553:quantum/quantum.c **** 
 554:quantum/quantum.c ****   TCCR1A = _BV(COM1x1) | _BV(WGM11); // = 0b00001010;
 555:quantum/quantum.c ****   TCCR1B = _BV(WGM13) | _BV(WGM12) | _BV(CS10); // = 0b00011001;
 556:quantum/quantum.c **** 
 557:quantum/quantum.c ****   backlight_init();
 558:quantum/quantum.c ****   #ifdef BACKLIGHT_BREATHING
 559:quantum/quantum.c ****     breathing_defaults();
 560:quantum/quantum.c ****   #endif
 561:quantum/quantum.c **** }
 562:quantum/quantum.c **** 
 563:quantum/quantum.c **** __attribute__ ((weak))
 564:quantum/quantum.c **** void backlight_set(uint8_t level)
 565:quantum/quantum.c **** {
 566:quantum/quantum.c ****   // Prevent backlight blink on lowest level
 567:quantum/quantum.c ****   // PORTx &= ~n
 568:quantum/quantum.c ****   _SFR_IO8((backlight_pin >> 4) + 2) &= ~_BV(backlight_pin & 0xF);
 569:quantum/quantum.c **** 
 570:quantum/quantum.c ****   if ( level == 0 ) {
 571:quantum/quantum.c ****     // Turn off PWM control on backlight pin, revert to output low.
 572:quantum/quantum.c ****     TCCR1A &= ~(_BV(COM1x1));
 573:quantum/quantum.c ****     OCR1x = 0x0;
 574:quantum/quantum.c ****   } else if ( level == BACKLIGHT_LEVELS ) {
 575:quantum/quantum.c ****     // Turn on PWM control of backlight pin
 576:quantum/quantum.c ****     TCCR1A |= _BV(COM1x1);
 577:quantum/quantum.c ****     // Set the brightness
 578:quantum/quantum.c ****     OCR1x = 0xFFFF;
 579:quantum/quantum.c ****   } else {
 580:quantum/quantum.c ****     // Turn on PWM control of backlight pin
 581:quantum/quantum.c ****     TCCR1A |= _BV(COM1x1);
 582:quantum/quantum.c ****     // Set the brightness
 583:quantum/quantum.c ****     OCR1x = 0xFFFF >> ((BACKLIGHT_LEVELS - level) * ((BACKLIGHT_LEVELS + 1) / 2));
 584:quantum/quantum.c ****   }
 585:quantum/quantum.c **** 
 586:quantum/quantum.c ****   #ifdef BACKLIGHT_BREATHING
 587:quantum/quantum.c ****     breathing_intensity_default();
 588:quantum/quantum.c ****   #endif
 589:quantum/quantum.c **** }
 590:quantum/quantum.c **** 
 591:quantum/quantum.c **** 
 592:quantum/quantum.c **** #ifdef BACKLIGHT_BREATHING
 593:quantum/quantum.c **** 
 594:quantum/quantum.c **** #define BREATHING_NO_HALT  0
 595:quantum/quantum.c **** #define BREATHING_HALT_OFF 1
 596:quantum/quantum.c **** #define BREATHING_HALT_ON  2
 597:quantum/quantum.c **** 
 598:quantum/quantum.c **** static uint8_t breath_intensity;
 599:quantum/quantum.c **** static uint8_t breath_speed;
 600:quantum/quantum.c **** static uint16_t breathing_index;
 601:quantum/quantum.c **** static uint8_t breathing_halt;
 602:quantum/quantum.c **** 
 603:quantum/quantum.c **** void breathing_enable(void)
 604:quantum/quantum.c **** {
 605:quantum/quantum.c ****     if (get_backlight_level() == 0)
 606:quantum/quantum.c ****     {
 607:quantum/quantum.c ****         breathing_index = 0;
 608:quantum/quantum.c ****     }
 609:quantum/quantum.c ****     else
 610:quantum/quantum.c ****     {
 611:quantum/quantum.c ****         // Set breathing_index to be at the midpoint (brightest point)
 612:quantum/quantum.c ****         breathing_index = 0x20 << breath_speed;
 613:quantum/quantum.c ****     }
 614:quantum/quantum.c **** 
 615:quantum/quantum.c ****     breathing_halt = BREATHING_NO_HALT;
 616:quantum/quantum.c **** 
 617:quantum/quantum.c ****     // Enable breathing interrupt
 618:quantum/quantum.c ****     TIMSK1 |= _BV(OCIE1A);
 619:quantum/quantum.c **** }
 620:quantum/quantum.c **** 
 621:quantum/quantum.c **** void breathing_pulse(void)
 622:quantum/quantum.c **** {
 623:quantum/quantum.c ****     if (get_backlight_level() == 0)
 624:quantum/quantum.c ****     {
 625:quantum/quantum.c ****         breathing_index = 0;
 626:quantum/quantum.c ****     }
 627:quantum/quantum.c ****     else
 628:quantum/quantum.c ****     {
 629:quantum/quantum.c ****         // Set breathing_index to be at the midpoint + 1 (brightest point)
 630:quantum/quantum.c ****         breathing_index = 0x21 << breath_speed;
 631:quantum/quantum.c ****     }
 632:quantum/quantum.c **** 
 633:quantum/quantum.c ****     breathing_halt = BREATHING_HALT_ON;
 634:quantum/quantum.c **** 
 635:quantum/quantum.c ****     // Enable breathing interrupt
 636:quantum/quantum.c ****     TIMSK1 |= _BV(OCIE1A);
 637:quantum/quantum.c **** }
 638:quantum/quantum.c **** 
 639:quantum/quantum.c **** void breathing_disable(void)
 640:quantum/quantum.c **** {
 641:quantum/quantum.c ****     // Disable breathing interrupt
 642:quantum/quantum.c ****     TIMSK1 &= ~_BV(OCIE1A);
 643:quantum/quantum.c ****     backlight_set(get_backlight_level());
 644:quantum/quantum.c **** }
 645:quantum/quantum.c **** 
 646:quantum/quantum.c **** void breathing_self_disable(void)
 647:quantum/quantum.c **** {
 648:quantum/quantum.c ****     if (get_backlight_level() == 0)
 649:quantum/quantum.c ****     {
 650:quantum/quantum.c ****         breathing_halt = BREATHING_HALT_OFF;
 651:quantum/quantum.c ****     }
 652:quantum/quantum.c ****     else
 653:quantum/quantum.c ****     {
 654:quantum/quantum.c ****         breathing_halt = BREATHING_HALT_ON;
 655:quantum/quantum.c ****     }
 656:quantum/quantum.c **** 
 657:quantum/quantum.c ****     //backlight_set(get_backlight_level());
 658:quantum/quantum.c **** }
 659:quantum/quantum.c **** 
 660:quantum/quantum.c **** void breathing_toggle(void)
 661:quantum/quantum.c **** {
 662:quantum/quantum.c ****     if (!is_breathing())
 663:quantum/quantum.c ****     {
 664:quantum/quantum.c ****         if (get_backlight_level() == 0)
 665:quantum/quantum.c ****         {
 666:quantum/quantum.c ****             breathing_index = 0;
 667:quantum/quantum.c ****         }
 668:quantum/quantum.c ****         else
 669:quantum/quantum.c ****         {
 670:quantum/quantum.c ****             // Set breathing_index to be at the midpoint + 1 (brightest point)
 671:quantum/quantum.c ****             breathing_index = 0x21 << breath_speed;
 672:quantum/quantum.c ****         }
 673:quantum/quantum.c **** 
 674:quantum/quantum.c ****         breathing_halt = BREATHING_NO_HALT;
 675:quantum/quantum.c ****     }
 676:quantum/quantum.c **** 
 677:quantum/quantum.c ****     // Toggle breathing interrupt
 678:quantum/quantum.c ****     TIMSK1 ^= _BV(OCIE1A);
 679:quantum/quantum.c **** 
 680:quantum/quantum.c ****     // Restore backlight level
 681:quantum/quantum.c ****     if (!is_breathing())
 682:quantum/quantum.c ****     {
 683:quantum/quantum.c ****         backlight_set(get_backlight_level());
 684:quantum/quantum.c ****     }
 685:quantum/quantum.c **** }
 686:quantum/quantum.c **** 
 687:quantum/quantum.c **** bool is_breathing(void)
 688:quantum/quantum.c **** {
 689:quantum/quantum.c ****     return (TIMSK1 && _BV(OCIE1A));
 690:quantum/quantum.c **** }
 691:quantum/quantum.c **** 
 692:quantum/quantum.c **** void breathing_intensity_default(void)
 693:quantum/quantum.c **** {
 694:quantum/quantum.c ****     //breath_intensity = (uint8_t)((uint16_t)100 * (uint16_t)get_backlight_level() / (uint16_t)BACK
 695:quantum/quantum.c ****     breath_intensity = ((BACKLIGHT_LEVELS - get_backlight_level()) * ((BACKLIGHT_LEVELS + 1) / 2));
 696:quantum/quantum.c **** }
 697:quantum/quantum.c **** 
 698:quantum/quantum.c **** void breathing_intensity_set(uint8_t value)
 699:quantum/quantum.c **** {
 700:quantum/quantum.c ****     breath_intensity = value;
 701:quantum/quantum.c **** }
 702:quantum/quantum.c **** 
 703:quantum/quantum.c **** void breathing_speed_default(void)
 704:quantum/quantum.c **** {
 705:quantum/quantum.c ****     breath_speed = 4;
 706:quantum/quantum.c **** }
 707:quantum/quantum.c **** 
 708:quantum/quantum.c **** void breathing_speed_set(uint8_t value)
 709:quantum/quantum.c **** {
 710:quantum/quantum.c ****     bool is_breathing_now = is_breathing();
 711:quantum/quantum.c ****     uint8_t old_breath_speed = breath_speed;
 712:quantum/quantum.c **** 
 713:quantum/quantum.c ****     if (is_breathing_now)
 714:quantum/quantum.c ****     {
 715:quantum/quantum.c ****         // Disable breathing interrupt
 716:quantum/quantum.c ****         TIMSK1 &= ~_BV(OCIE1A);
 717:quantum/quantum.c ****     }
 718:quantum/quantum.c **** 
 719:quantum/quantum.c ****     breath_speed = value;
 720:quantum/quantum.c **** 
 721:quantum/quantum.c ****     if (is_breathing_now)
 722:quantum/quantum.c ****     {
 723:quantum/quantum.c ****         // Adjust index to account for new speed
 724:quantum/quantum.c ****         breathing_index = (( (uint8_t)( (breathing_index) >> old_breath_speed ) ) & 0x3F) << breath
 725:quantum/quantum.c **** 
 726:quantum/quantum.c ****         // Enable breathing interrupt
 727:quantum/quantum.c ****         TIMSK1 |= _BV(OCIE1A);
 728:quantum/quantum.c ****     }
 729:quantum/quantum.c **** 
 730:quantum/quantum.c **** }
 731:quantum/quantum.c **** 
 732:quantum/quantum.c **** void breathing_speed_inc(uint8_t value)
 733:quantum/quantum.c **** {
 734:quantum/quantum.c ****     if ((uint16_t)(breath_speed - value) > 10 )
 735:quantum/quantum.c ****     {
 736:quantum/quantum.c ****         breathing_speed_set(0);
 737:quantum/quantum.c ****     }
 738:quantum/quantum.c ****     else
 739:quantum/quantum.c ****     {
 740:quantum/quantum.c ****         breathing_speed_set(breath_speed - value);
 741:quantum/quantum.c ****     }
 742:quantum/quantum.c **** }
 743:quantum/quantum.c **** 
 744:quantum/quantum.c **** void breathing_speed_dec(uint8_t value)
 745:quantum/quantum.c **** {
 746:quantum/quantum.c ****     if ((uint16_t)(breath_speed + value) > 10 )
 747:quantum/quantum.c ****     {
 748:quantum/quantum.c ****         breathing_speed_set(10);
 749:quantum/quantum.c ****     }
 750:quantum/quantum.c ****     else
 751:quantum/quantum.c ****     {
 752:quantum/quantum.c ****         breathing_speed_set(breath_speed + value);
 753:quantum/quantum.c ****     }
 754:quantum/quantum.c **** }
 755:quantum/quantum.c **** 
 756:quantum/quantum.c **** void breathing_defaults(void)
 757:quantum/quantum.c **** {
 758:quantum/quantum.c ****     breathing_intensity_default();
 759:quantum/quantum.c ****     breathing_speed_default();
 760:quantum/quantum.c ****     breathing_halt = BREATHING_NO_HALT;
 761:quantum/quantum.c **** }
 762:quantum/quantum.c **** 
 763:quantum/quantum.c **** /* Breathing Sleep LED brighness(PWM On period) table
 764:quantum/quantum.c ****  * (64[steps] * 4[duration]) / 64[PWM periods/s] = 4 second breath cycle
 765:quantum/quantum.c ****  *
 766:quantum/quantum.c ****  * http://www.wolframalpha.com/input/?i=%28sin%28+x%2F64*pi%29**8+*+255%2C+x%3D0+to+63
 767:quantum/quantum.c ****  * (0..63).each {|x| p ((sin(x/64.0*PI)**8)*255).to_i }
 768:quantum/quantum.c ****  */
 769:quantum/quantum.c **** static const uint8_t breathing_table[64] PROGMEM = {
 770:quantum/quantum.c ****   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   1,   2,   4,   6,  10,
 771:quantum/quantum.c ****  15,  23,  32,  44,  58,  74,  93, 113, 135, 157, 179, 199, 218, 233, 245, 252,
 772:quantum/quantum.c **** 255, 252, 245, 233, 218, 199, 179, 157, 135, 113,  93,  74,  58,  44,  32,  23,
 773:quantum/quantum.c ****  15,  10,   6,   4,   2,   1,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
 774:quantum/quantum.c **** };
 775:quantum/quantum.c **** 
 776:quantum/quantum.c **** ISR(TIMER1_COMPA_vect)
 777:quantum/quantum.c **** {
 778:quantum/quantum.c ****     // OCR1x = (pgm_read_byte(&breathing_table[ ( (uint8_t)( (breathing_index++) >> breath_speed ) 
 779:quantum/quantum.c **** 
 780:quantum/quantum.c **** 
 781:quantum/quantum.c ****     uint8_t local_index = ( (uint8_t)( (breathing_index++) >> breath_speed ) ) & 0x3F;
 782:quantum/quantum.c **** 
 783:quantum/quantum.c ****     if (((breathing_halt == BREATHING_HALT_ON) && (local_index == 0x20)) || ((breathing_halt == BRE
 784:quantum/quantum.c ****     {
 785:quantum/quantum.c ****         // Disable breathing interrupt
 786:quantum/quantum.c ****         TIMSK1 &= ~_BV(OCIE1A);
 787:quantum/quantum.c ****     }
 788:quantum/quantum.c **** 
 789:quantum/quantum.c ****     OCR1x = (uint16_t)(((uint16_t)pgm_read_byte(&breathing_table[local_index]) * 257)) >> breath_in
 790:quantum/quantum.c **** 
 791:quantum/quantum.c **** }
 792:quantum/quantum.c **** 
 793:quantum/quantum.c **** 
 794:quantum/quantum.c **** 
 795:quantum/quantum.c **** #endif // breathing
 796:quantum/quantum.c **** 
 797:quantum/quantum.c **** #else // backlight
 798:quantum/quantum.c **** 
 799:quantum/quantum.c **** __attribute__ ((weak))
 800:quantum/quantum.c **** void backlight_init_ports(void)
 801:quantum/quantum.c **** {
 1153               		.loc 1 801 0
 1154               		.cfi_startproc
 1155               	/* prologue: function */
 1156               	/* frame size = 0 */
 1157               	/* stack size = 0 */
 1158               	.L__stack_usage = 0
 1159 0000 0895      		ret
 1160               		.cfi_endproc
 1161               	.LFE120:
 1163               		.section	.text.backlight_set,"ax",@progbits
 1164               		.weak	backlight_set
 1166               	backlight_set:
 1167               	.LFB121:
 802:quantum/quantum.c **** 
 803:quantum/quantum.c **** }
 804:quantum/quantum.c **** 
 805:quantum/quantum.c **** __attribute__ ((weak))
 806:quantum/quantum.c **** void backlight_set(uint8_t level)
 807:quantum/quantum.c **** {
 1168               		.loc 1 807 0
 1169               		.cfi_startproc
 1170               	.LVL110:
 1171               	/* prologue: function */
 1172               	/* frame size = 0 */
 1173               	/* stack size = 0 */
 1174               	.L__stack_usage = 0
 1175 0000 0895      		ret
 1176               		.cfi_endproc
 1177               	.LFE121:
 1179               		.section	.text.send_nibble,"ax",@progbits
 1180               	.global	send_nibble
 1182               	send_nibble:
 1183               	.LFB125:
 808:quantum/quantum.c **** 
 809:quantum/quantum.c **** }
 810:quantum/quantum.c **** 
 811:quantum/quantum.c **** #endif // backlight
 812:quantum/quantum.c **** 
 813:quantum/quantum.c **** 
 814:quantum/quantum.c **** // Functions for spitting out values
 815:quantum/quantum.c **** //
 816:quantum/quantum.c **** 
 817:quantum/quantum.c **** void send_dword(uint32_t number) { // this might not actually work
 818:quantum/quantum.c ****     uint16_t word = (number >> 16);
 819:quantum/quantum.c ****     send_word(word);
 820:quantum/quantum.c ****     send_word(number & 0xFFFFUL);
 821:quantum/quantum.c **** }
 822:quantum/quantum.c **** 
 823:quantum/quantum.c **** void send_word(uint16_t number) {
 824:quantum/quantum.c ****     uint8_t byte = number >> 8;
 825:quantum/quantum.c ****     send_byte(byte);
 826:quantum/quantum.c ****     send_byte(number & 0xFF);
 827:quantum/quantum.c **** }
 828:quantum/quantum.c **** 
 829:quantum/quantum.c **** void send_byte(uint8_t number) {
 830:quantum/quantum.c ****     uint8_t nibble = number >> 4;
 831:quantum/quantum.c ****     send_nibble(nibble);
 832:quantum/quantum.c ****     send_nibble(number & 0xF);
 833:quantum/quantum.c **** }
 834:quantum/quantum.c **** 
 835:quantum/quantum.c **** void send_nibble(uint8_t number) {
 1184               		.loc 1 835 0
 1185               		.cfi_startproc
 1186               	.LVL111:
 1187               		.loc 1 835 0
 1188 0000 CF93      		push r28
 1189               	.LCFI25:
 1190               		.cfi_def_cfa_offset 3
 1191               		.cfi_offset 28, -2
 1192               	/* prologue: function */
 1193               	/* frame size = 0 */
 1194               	/* stack size = 1 */
 1195               	.L__stack_usage = 1
 836:quantum/quantum.c ****     switch (number) {
 1196               		.loc 1 836 0
 1197 0002 8A30      		cpi r24,lo8(10)
 1198 0004 00F4      		brsh .L124
 1199 0006 8130      		cpi r24,lo8(1)
 1200 0008 00F4      		brsh .L132
 837:quantum/quantum.c ****         case 0:
 838:quantum/quantum.c ****             register_code(KC_0);
 1201               		.loc 1 838 0
 1202 000a 87E2      		ldi r24,lo8(39)
 1203               	.LVL112:
 1204 000c 0E94 0000 		call register_code
 1205               	.LVL113:
 839:quantum/quantum.c ****             unregister_code(KC_0);
 1206               		.loc 1 839 0
 1207 0010 87E2      		ldi r24,lo8(39)
 1208 0012 00C0      		rjmp .L130
 1209               	.LVL114:
 1210               	.L124:
 836:quantum/quantum.c ****     switch (number) {
 1211               		.loc 1 836 0
 1212 0014 8031      		cpi r24,lo8(16)
 1213 0016 00F4      		brsh .L133
 840:quantum/quantum.c ****             break;
 841:quantum/quantum.c ****         case 1 ... 9:
 842:quantum/quantum.c ****             register_code(KC_1 + (number - 1));
 843:quantum/quantum.c ****             unregister_code(KC_1 + (number - 1));
 844:quantum/quantum.c ****             break;
 845:quantum/quantum.c ****         case 0xA ... 0xF:
 846:quantum/quantum.c ****             register_code(KC_A + (number - 0xA));
 1214               		.loc 1 846 0
 1215 0018 CAEF      		ldi r28,lo8(-6)
 1216 001a 00C0      		rjmp .L131
 1217               	.L132:
 842:quantum/quantum.c ****             unregister_code(KC_1 + (number - 1));
 1218               		.loc 1 842 0
 1219 001c CDE1      		ldi r28,lo8(29)
 1220               	.L131:
 1221               		.loc 1 846 0
 1222 001e C80F      		add r28,r24
 1223 0020 8C2F      		mov r24,r28
 1224               	.LVL115:
 1225 0022 0E94 0000 		call register_code
 1226               	.LVL116:
 847:quantum/quantum.c ****             unregister_code(KC_A + (number - 0xA));
 1227               		.loc 1 847 0
 1228 0026 8C2F      		mov r24,r28
 1229               	.L130:
 1230               	/* epilogue start */
 848:quantum/quantum.c ****             break;
 849:quantum/quantum.c ****     }
 850:quantum/quantum.c **** }
 1231               		.loc 1 850 0
 1232 0028 CF91      		pop r28
 847:quantum/quantum.c ****             unregister_code(KC_A + (number - 0xA));
 1233               		.loc 1 847 0
 1234 002a 0C94 0000 		jmp unregister_code
 1235               	.LVL117:
 1236               	.L133:
 1237               	/* epilogue start */
 1238               		.loc 1 850 0
 1239 002e CF91      		pop r28
 1240 0030 0895      		ret
 1241               		.cfi_endproc
 1242               	.LFE125:
 1244               		.section	.text.send_byte,"ax",@progbits
 1245               	.global	send_byte
 1247               	send_byte:
 1248               	.LFB124:
 829:quantum/quantum.c ****     uint8_t nibble = number >> 4;
 1249               		.loc 1 829 0
 1250               		.cfi_startproc
 1251               	.LVL118:
 1252 0000 CF93      		push r28
 1253               	.LCFI26:
 1254               		.cfi_def_cfa_offset 3
 1255               		.cfi_offset 28, -2
 1256               	/* prologue: function */
 1257               	/* frame size = 0 */
 1258               	/* stack size = 1 */
 1259               	.L__stack_usage = 1
 1260 0002 C82F      		mov r28,r24
 1261               	.LVL119:
 831:quantum/quantum.c ****     send_nibble(number & 0xF);
 1262               		.loc 1 831 0
 1263 0004 8295      		swap r24
 1264               	.LVL120:
 1265 0006 8F70      		andi r24,lo8(15)
 1266 0008 0E94 0000 		call send_nibble
 1267               	.LVL121:
 832:quantum/quantum.c **** }
 1268               		.loc 1 832 0
 1269 000c 8C2F      		mov r24,r28
 1270 000e 8F70      		andi r24,lo8(15)
 1271               	/* epilogue start */
 833:quantum/quantum.c **** 
 1272               		.loc 1 833 0
 1273 0010 CF91      		pop r28
 1274               	.LVL122:
 832:quantum/quantum.c **** }
 1275               		.loc 1 832 0
 1276 0012 0C94 0000 		jmp send_nibble
 1277               	.LVL123:
 1278               		.cfi_endproc
 1279               	.LFE124:
 1281               		.section	.text.send_word,"ax",@progbits
 1282               	.global	send_word
 1284               	send_word:
 1285               	.LFB123:
 823:quantum/quantum.c ****     uint8_t byte = number >> 8;
 1286               		.loc 1 823 0
 1287               		.cfi_startproc
 1288               	.LVL124:
 1289 0000 CF93      		push r28
 1290               	.LCFI27:
 1291               		.cfi_def_cfa_offset 3
 1292               		.cfi_offset 28, -2
 1293               	/* prologue: function */
 1294               	/* frame size = 0 */
 1295               	/* stack size = 1 */
 1296               	.L__stack_usage = 1
 1297 0002 C82F      		mov r28,r24
 1298               	.LVL125:
 825:quantum/quantum.c ****     send_byte(number & 0xFF);
 1299               		.loc 1 825 0
 1300 0004 892F      		mov r24,r25
 1301               	.LVL126:
 1302 0006 0E94 0000 		call send_byte
 1303               	.LVL127:
 826:quantum/quantum.c **** }
 1304               		.loc 1 826 0
 1305 000a 8C2F      		mov r24,r28
 1306               	/* epilogue start */
 827:quantum/quantum.c **** 
 1307               		.loc 1 827 0
 1308 000c CF91      		pop r28
 826:quantum/quantum.c **** }
 1309               		.loc 1 826 0
 1310 000e 0C94 0000 		jmp send_byte
 1311               	.LVL128:
 1312               		.cfi_endproc
 1313               	.LFE123:
 1315               		.section	.text.send_dword,"ax",@progbits
 1316               	.global	send_dword
 1318               	send_dword:
 1319               	.LFB122:
 817:quantum/quantum.c ****     uint16_t word = (number >> 16);
 1320               		.loc 1 817 0
 1321               		.cfi_startproc
 1322               	.LVL129:
 1323 0000 CF92      		push r12
 1324               	.LCFI28:
 1325               		.cfi_def_cfa_offset 3
 1326               		.cfi_offset 12, -2
 1327 0002 DF92      		push r13
 1328               	.LCFI29:
 1329               		.cfi_def_cfa_offset 4
 1330               		.cfi_offset 13, -3
 1331 0004 EF92      		push r14
 1332               	.LCFI30:
 1333               		.cfi_def_cfa_offset 5
 1334               		.cfi_offset 14, -4
 1335 0006 FF92      		push r15
 1336               	.LCFI31:
 1337               		.cfi_def_cfa_offset 6
 1338               		.cfi_offset 15, -5
 1339               	/* prologue: function */
 1340               	/* frame size = 0 */
 1341               	/* stack size = 4 */
 1342               	.L__stack_usage = 4
 1343 0008 6B01      		movw r12,r22
 1344 000a 7C01      		movw r14,r24
 1345               	.LVL130:
 819:quantum/quantum.c ****     send_word(number & 0xFFFFUL);
 1346               		.loc 1 819 0
 1347 000c C701      		movw r24,r14
 1348 000e 0E94 0000 		call send_word
 1349               	.LVL131:
 820:quantum/quantum.c **** }
 1350               		.loc 1 820 0
 1351 0012 C601      		movw r24,r12
 1352               	/* epilogue start */
 821:quantum/quantum.c **** 
 1353               		.loc 1 821 0
 1354 0014 FF90      		pop r15
 1355 0016 EF90      		pop r14
 1356 0018 DF90      		pop r13
 1357 001a CF90      		pop r12
 1358               	.LVL132:
 820:quantum/quantum.c **** }
 1359               		.loc 1 820 0
 1360 001c 0C94 0000 		jmp send_word
 1361               	.LVL133:
 1362               		.cfi_endproc
 1363               	.LFE122:
 1365               		.section	.text.api_send_unicode,"ax",@progbits
 1366               	.global	api_send_unicode
 1368               	api_send_unicode:
 1369               	.LFB126:
 851:quantum/quantum.c **** 
 852:quantum/quantum.c **** void api_send_unicode(uint32_t unicode) {
 1370               		.loc 1 852 0
 1371               		.cfi_startproc
 1372               	.LVL134:
 1373               	/* prologue: function */
 1374               	/* frame size = 0 */
 1375               	/* stack size = 0 */
 1376               	.L__stack_usage = 0
 1377 0000 0895      		ret
 1378               		.cfi_endproc
 1379               	.LFE126:
 1381               		.section	.text.led_set_user,"ax",@progbits
 1382               		.weak	led_set_user
 1384               	led_set_user:
 1385               	.LFB127:
 853:quantum/quantum.c **** #ifdef API_ENABLE
 854:quantum/quantum.c ****     uint8_t chunk[4];
 855:quantum/quantum.c ****     dword_to_bytes(unicode, chunk);
 856:quantum/quantum.c ****     MT_SEND_DATA(DT_UNICODE, chunk, 5);
 857:quantum/quantum.c **** #endif
 858:quantum/quantum.c **** }
 859:quantum/quantum.c **** 
 860:quantum/quantum.c **** __attribute__ ((weak))
 861:quantum/quantum.c **** void led_set_user(uint8_t usb_led) {
 1386               		.loc 1 861 0
 1387               		.cfi_startproc
 1388               	.LVL135:
 1389               	/* prologue: function */
 1390               	/* frame size = 0 */
 1391               	/* stack size = 0 */
 1392               	.L__stack_usage = 0
 1393 0000 0895      		ret
 1394               		.cfi_endproc
 1395               	.LFE127:
 1397               		.section	.text.led_set_kb,"ax",@progbits
 1398               		.weak	led_set_kb
 1400               	led_set_kb:
 1401               	.LFB128:
 862:quantum/quantum.c **** 
 863:quantum/quantum.c **** }
 864:quantum/quantum.c **** 
 865:quantum/quantum.c **** __attribute__ ((weak))
 866:quantum/quantum.c **** void led_set_kb(uint8_t usb_led) {
 1402               		.loc 1 866 0
 1403               		.cfi_startproc
 1404               	.LVL136:
 1405               	/* prologue: function */
 1406               	/* frame size = 0 */
 1407               	/* stack size = 0 */
 1408               	.L__stack_usage = 0
 867:quantum/quantum.c ****     led_set_user(usb_led);
 1409               		.loc 1 867 0
 1410 0000 0C94 0000 		jmp led_set_user
 1411               	.LVL137:
 1412               		.cfi_endproc
 1413               	.LFE128:
 1415               		.section	.text.led_init_ports,"ax",@progbits
 1416               		.weak	led_init_ports
 1418               	led_init_ports:
 1419               	.LFB129:
 868:quantum/quantum.c **** }
 869:quantum/quantum.c **** 
 870:quantum/quantum.c **** __attribute__ ((weak))
 871:quantum/quantum.c **** void led_init_ports(void)
 872:quantum/quantum.c **** {
 1420               		.loc 1 872 0
 1421               		.cfi_startproc
 1422               	/* prologue: function */
 1423               	/* frame size = 0 */
 1424               	/* stack size = 0 */
 1425               	.L__stack_usage = 0
 1426 0000 0895      		ret
 1427               		.cfi_endproc
 1428               	.LFE129:
 1430               		.section	.text.led_set,"ax",@progbits
 1431               		.weak	led_set
 1433               	led_set:
 1434               	.LFB130:
 873:quantum/quantum.c **** 
 874:quantum/quantum.c **** }
 875:quantum/quantum.c **** 
 876:quantum/quantum.c **** __attribute__ ((weak))
 877:quantum/quantum.c **** void led_set(uint8_t usb_led)
 878:quantum/quantum.c **** {
 1435               		.loc 1 878 0
 1436               		.cfi_startproc
 1437               	.LVL138:
 1438               	/* prologue: function */
 1439               	/* frame size = 0 */
 1440               	/* stack size = 0 */
 1441               	.L__stack_usage = 0
 879:quantum/quantum.c **** 
 880:quantum/quantum.c ****   // Example LED Code
 881:quantum/quantum.c ****   //
 882:quantum/quantum.c ****     // // Using PE6 Caps Lock LED
 883:quantum/quantum.c ****     // if (usb_led & (1<<USB_LED_CAPS_LOCK))
 884:quantum/quantum.c ****     // {
 885:quantum/quantum.c ****     //     // Output high.
 886:quantum/quantum.c ****     //     DDRE |= (1<<6);
 887:quantum/quantum.c ****     //     PORTE |= (1<<6);
 888:quantum/quantum.c ****     // }
 889:quantum/quantum.c ****     // else
 890:quantum/quantum.c ****     // {
 891:quantum/quantum.c ****     //     // Output low.
 892:quantum/quantum.c ****     //     DDRE &= ~(1<<6);
 893:quantum/quantum.c ****     //     PORTE &= ~(1<<6);
 894:quantum/quantum.c ****     // }
 895:quantum/quantum.c **** 
 896:quantum/quantum.c ****   led_set_kb(usb_led);
 1442               		.loc 1 896 0
 1443 0000 0C94 0000 		jmp led_set_kb
 1444               	.LVL139:
 1445               		.cfi_endproc
 1446               	.LFE130:
 1448               		.section	.text.startup_user,"ax",@progbits
 1449               		.weak	startup_user
 1451               	startup_user:
 1452               	.LFB131:
 897:quantum/quantum.c **** }
 898:quantum/quantum.c **** 
 899:quantum/quantum.c **** 
 900:quantum/quantum.c **** //------------------------------------------------------------------------------
 901:quantum/quantum.c **** // Override these functions in your keymap file to play different tunes on
 902:quantum/quantum.c **** // different events such as startup and bootloader jump
 903:quantum/quantum.c **** 
 904:quantum/quantum.c **** __attribute__ ((weak))
 905:quantum/quantum.c **** void startup_user() {}
 1453               		.loc 1 905 0
 1454               		.cfi_startproc
 1455               	/* prologue: function */
 1456               	/* frame size = 0 */
 1457               	/* stack size = 0 */
 1458               	.L__stack_usage = 0
 1459 0000 0895      		ret
 1460               		.cfi_endproc
 1461               	.LFE131:
 1463               		.section	.text.shutdown_user,"ax",@progbits
 1464               		.weak	shutdown_user
 1466               	shutdown_user:
 1467               	.LFB132:
 906:quantum/quantum.c **** 
 907:quantum/quantum.c **** __attribute__ ((weak))
 908:quantum/quantum.c **** void shutdown_user() {}
 1468               		.loc 1 908 0
 1469               		.cfi_startproc
 1470               	/* prologue: function */
 1471               	/* frame size = 0 */
 1472               	/* stack size = 0 */
 1473               	.L__stack_usage = 0
 1474 0000 0895      		ret
 1475               		.cfi_endproc
 1476               	.LFE132:
 1478               	.global	ascii_to_qwerty_keycode_lut
 1479               		.section	.progmem.data.ascii_to_qwerty_keycode_lut,"a",@progbits
 1482               	ascii_to_qwerty_keycode_lut:
 1483 0000 00        		.byte	0
 1484 0001 00        		.byte	0
 1485 0002 00        		.byte	0
 1486 0003 00        		.byte	0
 1487 0004 00        		.byte	0
 1488 0005 00        		.byte	0
 1489 0006 00        		.byte	0
 1490 0007 00        		.byte	0
 1491 0008 2A        		.byte	42
 1492 0009 2B        		.byte	43
 1493 000a 28        		.byte	40
 1494 000b 00        		.byte	0
 1495 000c 00        		.byte	0
 1496 000d 00        		.byte	0
 1497 000e 00        		.byte	0
 1498 000f 00        		.byte	0
 1499 0010 00        		.byte	0
 1500 0011 00        		.byte	0
 1501 0012 00        		.byte	0
 1502 0013 00        		.byte	0
 1503 0014 00        		.byte	0
 1504 0015 00        		.byte	0
 1505 0016 00        		.byte	0
 1506 0017 00        		.byte	0
 1507 0018 00        		.byte	0
 1508 0019 00        		.byte	0
 1509 001a 00        		.byte	0
 1510 001b 29        		.byte	41
 1511 001c 00        		.byte	0
 1512 001d 00        		.byte	0
 1513 001e 00        		.byte	0
 1514 001f 00        		.byte	0
 1515 0020 2C        		.byte	44
 1516 0021 1E        		.byte	30
 1517 0022 34        		.byte	52
 1518 0023 20        		.byte	32
 1519 0024 21        		.byte	33
 1520 0025 22        		.byte	34
 1521 0026 24        		.byte	36
 1522 0027 34        		.byte	52
 1523 0028 26        		.byte	38
 1524 0029 27        		.byte	39
 1525 002a 25        		.byte	37
 1526 002b 2E        		.byte	46
 1527 002c 36        		.byte	54
 1528 002d 2D        		.byte	45
 1529 002e 37        		.byte	55
 1530 002f 38        		.byte	56
 1531 0030 27        		.byte	39
 1532 0031 1E        		.byte	30
 1533 0032 1F        		.byte	31
 1534 0033 20        		.byte	32
 1535 0034 21        		.byte	33
 1536 0035 22        		.byte	34
 1537 0036 23        		.byte	35
 1538 0037 24        		.byte	36
 1539 0038 25        		.byte	37
 1540 0039 26        		.byte	38
 1541 003a 33        		.byte	51
 1542 003b 33        		.byte	51
 1543 003c 36        		.byte	54
 1544 003d 2E        		.byte	46
 1545 003e 37        		.byte	55
 1546 003f 38        		.byte	56
 1547 0040 1F        		.byte	31
 1548 0041 04        		.byte	4
 1549 0042 05        		.byte	5
 1550 0043 06        		.byte	6
 1551 0044 07        		.byte	7
 1552 0045 08        		.byte	8
 1553 0046 09        		.byte	9
 1554 0047 0A        		.byte	10
 1555 0048 0B        		.byte	11
 1556 0049 0C        		.byte	12
 1557 004a 0D        		.byte	13
 1558 004b 0E        		.byte	14
 1559 004c 0F        		.byte	15
 1560 004d 10        		.byte	16
 1561 004e 11        		.byte	17
 1562 004f 12        		.byte	18
 1563 0050 13        		.byte	19
 1564 0051 14        		.byte	20
 1565 0052 15        		.byte	21
 1566 0053 16        		.byte	22
 1567 0054 17        		.byte	23
 1568 0055 18        		.byte	24
 1569 0056 19        		.byte	25
 1570 0057 1A        		.byte	26
 1571 0058 1B        		.byte	27
 1572 0059 1C        		.byte	28
 1573 005a 1D        		.byte	29
 1574 005b 2F        		.byte	47
 1575 005c 31        		.byte	49
 1576 005d 30        		.byte	48
 1577 005e 23        		.byte	35
 1578 005f 2D        		.byte	45
 1579 0060 35        		.byte	53
 1580 0061 04        		.byte	4
 1581 0062 05        		.byte	5
 1582 0063 06        		.byte	6
 1583 0064 07        		.byte	7
 1584 0065 08        		.byte	8
 1585 0066 09        		.byte	9
 1586 0067 0A        		.byte	10
 1587 0068 0B        		.byte	11
 1588 0069 0C        		.byte	12
 1589 006a 0D        		.byte	13
 1590 006b 0E        		.byte	14
 1591 006c 0F        		.byte	15
 1592 006d 10        		.byte	16
 1593 006e 11        		.byte	17
 1594 006f 12        		.byte	18
 1595 0070 13        		.byte	19
 1596 0071 14        		.byte	20
 1597 0072 15        		.byte	21
 1598 0073 16        		.byte	22
 1599 0074 17        		.byte	23
 1600 0075 18        		.byte	24
 1601 0076 19        		.byte	25
 1602 0077 1A        		.byte	26
 1603 0078 1B        		.byte	27
 1604 0079 1C        		.byte	28
 1605 007a 1D        		.byte	29
 1606 007b 2F        		.byte	47
 1607 007c 31        		.byte	49
 1608 007d 30        		.byte	48
 1609 007e 35        		.byte	53
 1610 007f 4C        		.byte	76
 1611               	.global	ascii_to_qwerty_shift_lut
 1612               		.section	.progmem.data.ascii_to_qwerty_shift_lut,"a",@progbits
 1615               	ascii_to_qwerty_shift_lut:
 1616 0000 00        		.byte	0
 1617 0001 00        		.byte	0
 1618 0002 00        		.byte	0
 1619 0003 00        		.byte	0
 1620 0004 00        		.byte	0
 1621 0005 00        		.byte	0
 1622 0006 00        		.byte	0
 1623 0007 00        		.byte	0
 1624 0008 00        		.byte	0
 1625 0009 00        		.byte	0
 1626 000a 00        		.byte	0
 1627 000b 00        		.byte	0
 1628 000c 00        		.byte	0
 1629 000d 00        		.byte	0
 1630 000e 00        		.byte	0
 1631 000f 00        		.byte	0
 1632 0010 00        		.byte	0
 1633 0011 00        		.byte	0
 1634 0012 00        		.byte	0
 1635 0013 00        		.byte	0
 1636 0014 00        		.byte	0
 1637 0015 00        		.byte	0
 1638 0016 00        		.byte	0
 1639 0017 00        		.byte	0
 1640 0018 00        		.byte	0
 1641 0019 00        		.byte	0
 1642 001a 00        		.byte	0
 1643 001b 00        		.byte	0
 1644 001c 00        		.byte	0
 1645 001d 00        		.byte	0
 1646 001e 00        		.byte	0
 1647 001f 00        		.byte	0
 1648 0020 00        		.byte	0
 1649 0021 01        		.byte	1
 1650 0022 01        		.byte	1
 1651 0023 01        		.byte	1
 1652 0024 01        		.byte	1
 1653 0025 01        		.byte	1
 1654 0026 01        		.byte	1
 1655 0027 00        		.byte	0
 1656 0028 01        		.byte	1
 1657 0029 01        		.byte	1
 1658 002a 01        		.byte	1
 1659 002b 01        		.byte	1
 1660 002c 00        		.byte	0
 1661 002d 00        		.byte	0
 1662 002e 00        		.byte	0
 1663 002f 00        		.byte	0
 1664 0030 00        		.byte	0
 1665 0031 00        		.byte	0
 1666 0032 00        		.byte	0
 1667 0033 00        		.byte	0
 1668 0034 00        		.byte	0
 1669 0035 00        		.byte	0
 1670 0036 00        		.byte	0
 1671 0037 00        		.byte	0
 1672 0038 00        		.byte	0
 1673 0039 00        		.byte	0
 1674 003a 01        		.byte	1
 1675 003b 00        		.byte	0
 1676 003c 01        		.byte	1
 1677 003d 00        		.byte	0
 1678 003e 01        		.byte	1
 1679 003f 01        		.byte	1
 1680 0040 01        		.byte	1
 1681 0041 01        		.byte	1
 1682 0042 01        		.byte	1
 1683 0043 01        		.byte	1
 1684 0044 01        		.byte	1
 1685 0045 01        		.byte	1
 1686 0046 01        		.byte	1
 1687 0047 01        		.byte	1
 1688 0048 01        		.byte	1
 1689 0049 01        		.byte	1
 1690 004a 01        		.byte	1
 1691 004b 01        		.byte	1
 1692 004c 01        		.byte	1
 1693 004d 01        		.byte	1
 1694 004e 01        		.byte	1
 1695 004f 01        		.byte	1
 1696 0050 01        		.byte	1
 1697 0051 01        		.byte	1
 1698 0052 01        		.byte	1
 1699 0053 01        		.byte	1
 1700 0054 01        		.byte	1
 1701 0055 01        		.byte	1
 1702 0056 01        		.byte	1
 1703 0057 01        		.byte	1
 1704 0058 01        		.byte	1
 1705 0059 01        		.byte	1
 1706 005a 01        		.byte	1
 1707 005b 00        		.byte	0
 1708 005c 00        		.byte	0
 1709 005d 00        		.byte	0
 1710 005e 01        		.byte	1
 1711 005f 01        		.byte	1
 1712 0060 00        		.byte	0
 1713 0061 00        		.byte	0
 1714 0062 00        		.byte	0
 1715 0063 00        		.byte	0
 1716 0064 00        		.byte	0
 1717 0065 00        		.byte	0
 1718 0066 00        		.byte	0
 1719 0067 00        		.byte	0
 1720 0068 00        		.byte	0
 1721 0069 00        		.byte	0
 1722 006a 00        		.byte	0
 1723 006b 00        		.byte	0
 1724 006c 00        		.byte	0
 1725 006d 00        		.byte	0
 1726 006e 00        		.byte	0
 1727 006f 00        		.byte	0
 1728 0070 00        		.byte	0
 1729 0071 00        		.byte	0
 1730 0072 00        		.byte	0
 1731 0073 00        		.byte	0
 1732 0074 00        		.byte	0
 1733 0075 00        		.byte	0
 1734 0076 00        		.byte	0
 1735 0077 00        		.byte	0
 1736 0078 00        		.byte	0
 1737 0079 00        		.byte	0
 1738 007a 00        		.byte	0
 1739 007b 01        		.byte	1
 1740 007c 01        		.byte	1
 1741 007d 01        		.byte	1
 1742 007e 01        		.byte	1
 1743 007f 00        		.byte	0
 1744               		.section	.bss.scs_timer,"aw",@nobits
 1747               	scs_timer:
 1748 0000 0000      		.zero	2
 1749               		.section	.bss.shift_interrupted,"aw",@nobits
 1752               	shift_interrupted:
 1753 0000 0000      		.zero	2
 1754               		.text
 1755               	.Letext0:
 1756               		.file 3 "c:\\users\\james\\mhv_avr\\avr\\include\\stdint.h"
 1757               		.file 4 "./tmk_core/common/keyboard.h"
 1758               		.file 5 "./tmk_core/common/action.h"
 1759               		.file 6 "./tmk_core/common/debug.h"
 1760               		.file 7 "quantum/keycode_config.h"
 1761               		.file 8 "./tmk_core/common/keycode.h"
 1762               		.file 9 "quantum/quantum_keycodes.h"
 1763               		.file 10 "./tmk_core/protocol/lufa/LUFA-git/LUFA/Drivers/USB/Core/USBTask.h"
 1764               		.file 11 "quantum/quantum.h"
 1765               		.file 12 "./tmk_core/common/bootloader.h"
 1766               		.file 13 "./tmk_core/common/action_layer.h"
 1767               		.file 14 "quantum/keymap.h"
 1768               		.file 15 "./quantum/process_keycode/process_leader.h"
 1769               		.file 16 "./quantum/process_keycode/process_unicode.h"
 1770               		.file 17 "./tmk_core/common/eeconfig.h"
 1771               		.file 18 "./tmk_core/common/timer.h"
DEFINED SYMBOLS
                            *ABS*:00000000 quantum.c
C:\Users\James\AppData\Local\Temp\cco7Vzbh.s:2      *ABS*:0000003e __SP_H__
C:\Users\James\AppData\Local\Temp\cco7Vzbh.s:3      *ABS*:0000003d __SP_L__
C:\Users\James\AppData\Local\Temp\cco7Vzbh.s:4      *ABS*:0000003f __SREG__
C:\Users\James\AppData\Local\Temp\cco7Vzbh.s:5      *ABS*:00000000 __tmp_reg__
C:\Users\James\AppData\Local\Temp\cco7Vzbh.s:6      *ABS*:00000001 __zero_reg__
C:\Users\James\AppData\Local\Temp\cco7Vzbh.s:12     .text.do_code16:00000000 do_code16
C:\Users\James\AppData\Local\Temp\cco7Vzbh.s:131    .text.register_code16:00000000 register_code16
C:\Users\James\AppData\Local\Temp\cco7Vzbh.s:164    .text.unregister_code16:00000000 unregister_code16
C:\Users\James\AppData\Local\Temp\cco7Vzbh.s:217    .text.process_action_kb:00000000 process_action_kb
C:\Users\James\AppData\Local\Temp\cco7Vzbh.s:236    .text.process_record_user:00000000 process_record_user
C:\Users\James\AppData\Local\Temp\cco7Vzbh.s:255    .text.process_record_kb:00000000 process_record_kb
C:\Users\James\AppData\Local\Temp\cco7Vzbh.s:273    .text.reset_keyboard:00000000 reset_keyboard
C:\Users\James\AppData\Local\Temp\cco7Vzbh.s:308    .text.process_record_quantum:00000000 process_record_quantum
C:\Users\James\AppData\Local\Temp\cco7Vzbh.s:1752   .bss.shift_interrupted:00000000 shift_interrupted
C:\Users\James\AppData\Local\Temp\cco7Vzbh.s:1747   .bss.scs_timer:00000000 scs_timer
C:\Users\James\AppData\Local\Temp\cco7Vzbh.s:765    .text.send_string:00000000 send_string
C:\Users\James\AppData\Local\Temp\cco7Vzbh.s:1482   .progmem.data.ascii_to_qwerty_keycode_lut:00000000 ascii_to_qwerty_keycode_lut
C:\Users\James\AppData\Local\Temp\cco7Vzbh.s:1615   .progmem.data.ascii_to_qwerty_shift_lut:00000000 ascii_to_qwerty_shift_lut
C:\Users\James\AppData\Local\Temp\cco7Vzbh.s:884    .text.update_tri_layer:00000000 update_tri_layer
C:\Users\James\AppData\Local\Temp\cco7Vzbh.s:995    .text.tap_random_base64:00000000 tap_random_base64
C:\Users\James\AppData\Local\Temp\cco7Vzbh.s:1117   .text.matrix_init_quantum:00000000 matrix_init_quantum
C:\Users\James\AppData\Local\Temp\cco7Vzbh.s:1134   .text.matrix_scan_quantum:00000000 matrix_scan_quantum
C:\Users\James\AppData\Local\Temp\cco7Vzbh.s:1151   .text.backlight_init_ports:00000000 backlight_init_ports
C:\Users\James\AppData\Local\Temp\cco7Vzbh.s:1166   .text.backlight_set:00000000 backlight_set
C:\Users\James\AppData\Local\Temp\cco7Vzbh.s:1182   .text.send_nibble:00000000 send_nibble
C:\Users\James\AppData\Local\Temp\cco7Vzbh.s:1247   .text.send_byte:00000000 send_byte
C:\Users\James\AppData\Local\Temp\cco7Vzbh.s:1284   .text.send_word:00000000 send_word
C:\Users\James\AppData\Local\Temp\cco7Vzbh.s:1318   .text.send_dword:00000000 send_dword
C:\Users\James\AppData\Local\Temp\cco7Vzbh.s:1368   .text.api_send_unicode:00000000 api_send_unicode
C:\Users\James\AppData\Local\Temp\cco7Vzbh.s:1384   .text.led_set_user:00000000 led_set_user
C:\Users\James\AppData\Local\Temp\cco7Vzbh.s:1400   .text.led_set_kb:00000000 led_set_kb
C:\Users\James\AppData\Local\Temp\cco7Vzbh.s:1418   .text.led_init_ports:00000000 led_init_ports
C:\Users\James\AppData\Local\Temp\cco7Vzbh.s:1433   .text.led_set:00000000 led_set
C:\Users\James\AppData\Local\Temp\cco7Vzbh.s:1451   .text.startup_user:00000000 startup_user
C:\Users\James\AppData\Local\Temp\cco7Vzbh.s:1466   .text.shutdown_user:00000000 shutdown_user

UNDEFINED SYMBOLS
register_code
unregister_code
clear_keyboard
bootloader_jump
disable_action_cache
layer_switch_get_layer
update_source_layers_cache
read_source_layers_cache
keymap_key_to_keycode
process_leader
process_unicode
eeconfig_is_enabled
eeconfig_init
eeconfig_read_keymap
keymap_config
__tablejump2__
eeconfig_update_keymap
debug_config
timer_read
timer_elapsed
register_mods
unregister_mods
layer_state
layer_on
layer_off
matrix_init_kb
matrix_scan_kb
__do_clear_bss
